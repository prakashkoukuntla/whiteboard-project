{"ast":null,"code":"var _jsxFileName = \"/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/pages/WhiteboardLabelingPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef, useEffect } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import {\n//   Container,\n//   Typography,\n//   IconButton,\n//   TextField,\n//   Paper,\n//   Button,\n// } from \"@mui/material\";\n// import { ArrowBack } from \"@mui/icons-material\";\n// import { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\n// import useImage from \"use-image\";\n// import axios from \"axios\"; // Import axios for HTTP requests\n\n// const confidenceColors = [\n//   \"rgba(0, 255, 0, 0.5)\", // High Confidence (Green)\n//   \"rgba(255, 165, 0, 0.5)\", // Medium Confidence (Orange)\n//   \"rgba(255, 0, 0, 0.5)\", // Low Confidence (Red)\n// ];\n\n// function WhiteboardLabelingPage() {\n//   const { id } = useParams();\n//   const navigate = useNavigate();\n//   const [whiteboard, setWhiteboard] = useState(null);\n//   const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n//   const [annotations, setAnnotations] = useState([]);\n//   const [newAnnotation, setNewAnnotation] = useState(null);\n//   const [activeAnnotation, setActiveAnnotation] = useState(null);\n//   const [transcription, setTranscription] = useState(\"\");\n//   const [panelWidth, setPanelWidth] = useState(70);\n//   const transcriptionRef = useRef(null);\n//   const [pendingTranscription, setPendingTranscription] = useState(\"\");\n\n//   // Load whiteboard data and annotations from backend\n//   useEffect(() => {\n//     const fetchWhiteboardData = async () => {\n//       try {\n//         const whiteboardRes = await axios.get(\n//           `http://localhost:5001/whiteboards/${id}`,\n//           { withCredentials: true }\n//         );\n//         setWhiteboard(whiteboardRes.data);\n\n//         // Fetch and set annotations\n//         const annotationsRes = await axios.get(\n//           `http://localhost:5001/whiteboards/${id}/annotations`,\n//           { withCredentials: true }\n//         );\n//         setAnnotations(annotationsRes.data);\n//         console.log(\"IT GOT HERE\");\n//         console.log(annotationsRes.data);\n//       } catch (error) {\n//         console.error(\"Error fetching whiteboard data:\", error);\n//       }\n//     };\n\n//     fetchWhiteboardData();\n//   }, [id]);\n\n//   useEffect(() => {\n//     if (activeAnnotation !== null && transcriptionRef.current) {\n//       transcriptionRef.current.focus();\n//     }\n//   }, [activeAnnotation]);\n\n//   const handleMouseDown = (e) => {\n//     const { x, y } = e.target.getStage().getPointerPosition();\n//     setNewAnnotation({\n//       x,\n//       y,\n//       width: 0,\n//       height: 0,\n//       confidenceLevel: 0,\n//       transcription: \"\",\n//     });\n//   };\n\n//   const handleMouseMove = (e) => {\n//     if (!newAnnotation) return;\n//     const stage = e.target.getStage();\n//     const pointerPosition = stage.getPointerPosition();\n//     setNewAnnotation({\n//       ...newAnnotation,\n//       width: pointerPosition.x - newAnnotation.x,\n//       height: pointerPosition.y - newAnnotation.y,\n//     });\n//   };\n\n//   const handleMouseUp = () => {\n//     if (newAnnotation) {\n//       setAnnotations((prevAnnotations) => [...prevAnnotations, newAnnotation]);\n//       setActiveAnnotation(annotations.length);\n//       setTranscription(newAnnotation.transcription);\n\n//       // Save new annotation to the backend\n//       saveAnnotation(newAnnotation);\n//       setNewAnnotation(null);\n//     }\n//   };\n\n//   // Function to save a new annotation to the backend\n//   const saveAnnotation = async (annotation) => {\n//     console.log(annotation);\n//     console.log(`/whiteboards/${id}/annotations`);\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5001/whiteboards/${id}/annotations`,\n//         annotation,\n//         { withCredentials: true }\n//       );\n\n//       console.log(\"it got here\");\n\n//       // Update the annotations state with the newly saved annotation, including its backend `_id`\n//       setAnnotations((prevAnnotations) => [\n//         ...prevAnnotations,\n//         { ...annotation, _id: response.data._id },\n//       ]);\n//     } catch (error) {\n//       console.error(\"Error saving annotation:\", error);\n//     }\n//   };\n\n//   // Function to update an existing annotation in the backend and in the state\n//   const updateAnnotation = async (index, updatedFields) => {\n//     const annotation = annotations[index];\n\n//     try {\n//       const response = await axios.patch(\n//         `http://localhost:5001/annotations/${annotation._id}`,\n//         updatedFields,\n//         { withCredentials: true }\n//       );\n\n//       // Update the specific annotation in the state based on its index\n//       setAnnotations((prevAnnotations) =>\n//         prevAnnotations.map((a, i) => (i === index ? response.data : a))\n//       );\n//     } catch (error) {\n//       console.error(\"Error updating annotation:\", error);\n//     }\n//   };\n\n//   // const handleAnnotationClick = (index) => {\n//   //   // Save current transcription if there's an active annotation and if it has changed\n//   //   if (\n//   //     activeAnnotation !== null &&\n//   //     pendingTranscription !== annotations[activeAnnotation]?.transcription\n//   //   ) {\n//   //     updateAnnotation(activeAnnotation, {\n//   //       transcription: pendingTranscription,\n//   //     });\n//   //   }\n\n//   //   // Cycle confidence level (color) of the clicked annotation\n//   //   const updatedAnnotations = [...annotations];\n//   //   const currentAnnotation = updatedAnnotations[index];\n//   //   const nextConfidenceLevel =\n//   //     (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n\n//   //   updatedAnnotations[index] = {\n//   //     ...currentAnnotation,\n//   //     confidenceLevel: nextConfidenceLevel,\n//   //   };\n\n//   //   setAnnotations(updatedAnnotations);\n//   //   setActiveAnnotation(index);\n//   //   setPendingTranscription(currentAnnotation.transcription || \"\");\n\n//   //   // Update confidence level in the backend\n//   //   updateAnnotation(index, { confidenceLevel: nextConfidenceLevel });\n//   // };\n\n//   const handleAnnotationClick = (index) => {\n//     // Save current transcription if there's an active annotation and it has changed\n//     if (activeAnnotation !== null) {\n//       saveTranscription();\n//     }\n\n//     // Cycle confidence level (color) of the clicked annotation\n//     const updatedAnnotations = [...annotations];\n//     const currentAnnotation = updatedAnnotations[index];\n//     const nextConfidenceLevel =\n//       (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n\n//     updatedAnnotations[index] = {\n//       ...currentAnnotation,\n//       confidenceLevel: nextConfidenceLevel,\n//     };\n\n//     setAnnotations(updatedAnnotations);\n//     setActiveAnnotation(index);\n//     setPendingTranscription(currentAnnotation.transcription || \"\");\n\n//     // Update confidence level in the backend\n//     updateAnnotation(index, { confidenceLevel: nextConfidenceLevel });\n//   };\n\n//   const saveTranscription = () => {\n//     if (\n//       activeAnnotation !== null &&\n//       pendingTranscription !== annotations[activeAnnotation]?.transcription\n//     ) {\n//       updateAnnotation(activeAnnotation, {\n//         transcription: pendingTranscription,\n//       });\n//     }\n//   };\n\n//   const handleTranscriptionChange = (event) => {\n//     const updatedTranscription = event.target.value;\n//     setPendingTranscription(updatedTranscription);\n//   };\n\n//   // Set pending transcription when active annotation changes\n//   useEffect(() => {\n//     if (activeAnnotation !== null) {\n//       setPendingTranscription(\n//         annotations[activeAnnotation]?.transcription || \"\"\n//       );\n//     }\n//   }, [activeAnnotation, annotations]);\n\n//   const handleResize = (e) => {\n//     const newWidth = (e.clientX / window.innerWidth) * 100;\n//     setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n//   };\n\n//   return (\n//     <Container\n//       maxWidth={false}\n//       style={{ height: \"100vh\", display: \"flex\", padding: 0 }}\n//     >\n//       <div\n//         style={{\n//           width: `${panelWidth}%`,\n//           overflowY: \"auto\",\n//           position: \"relative\",\n//         }}\n//       >\n//         <IconButton\n//           onClick={() => navigate(\"/whiteboards\")}\n//           style={{\n//             position: \"absolute\",\n//             top: \"20px\",\n//             left: \"20px\",\n//             zIndex: 1000,\n//           }}\n//         >\n//           <ArrowBack fontSize=\"large\" />\n//         </IconButton>\n//         <Typography\n//           variant=\"h6\"\n//           style={{\n//             position: \"absolute\",\n//             top: \"20px\",\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             zIndex: 1000,\n//             opacity: 0.8,\n//             backgroundColor: \"white\",\n//             padding: \"5px 15px\",\n//             borderRadius: \"4px\",\n//           }}\n//         >\n//           Whiteboard ID: {id}\n//         </Typography>\n//         {whiteboard ? (\n//           <Stage\n//             width={1200}\n//             height={800}\n//             onMouseDown={handleMouseDown}\n//             onMouseMove={handleMouseMove}\n//             onMouseUp={handleMouseUp}\n//             style={{ margin: \"0 auto\" }}\n//           >\n//             <Layer>\n//               <KonvaImage image={image} width={1200} height={800} />\n//               {annotations.map((rect, i) => (\n//                 <Rect\n//                   key={i}\n//                   x={rect.x}\n//                   y={rect.y}\n//                   width={rect.width}\n//                   height={rect.height}\n//                   fill={confidenceColors[rect.confidenceLevel]}\n//                   onClick={() => handleAnnotationClick(i)}\n//                 />\n//               ))}\n//               {newAnnotation && (\n//                 <Rect\n//                   x={newAnnotation.x}\n//                   y={newAnnotation.y}\n//                   width={newAnnotation.width}\n//                   height={newAnnotation.height}\n//                   fill=\"rgba(0,0,255,0.5)\"\n//                 />\n//               )}\n//             </Layer>\n//           </Stage>\n//         ) : (\n//           <Typography color=\"error\">Whiteboard not found</Typography>\n//         )}\n//       </div>\n\n//       {/* Divider for Resizing */}\n//       <div\n//         onMouseDown={(e) => {\n//           document.addEventListener(\"mousemove\", handleResize);\n//           document.addEventListener(\"mouseup\", () => {\n//             document.removeEventListener(\"mousemove\", handleResize);\n//           });\n//         }}\n//         style={{\n//           width: \"5px\",\n//           cursor: \"col-resize\",\n//           backgroundColor: \"#ccc\",\n//         }}\n//       />\n\n//       {/* Transcription Panel */}\n//       {activeAnnotation !== null && (\n//         <Paper\n//           style={{\n//             width: `${100 - panelWidth}%`,\n//             padding: \"20px\",\n//             display: \"flex\",\n//             flexDirection: \"column\",\n//             alignItems: \"flex-start\",\n//             boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n//             overflowY: \"auto\",\n//           }}\n//           square\n//         >\n//           <Typography variant=\"h6\" gutterBottom>\n//             Edit Transcription\n//           </Typography>\n//           <TextField\n//             fullWidth\n//             label=\"Transcription\"\n//             value={pendingTranscription}\n//             onChange={handleTranscriptionChange}\n//             onBlur={saveTranscription}\n//             multiline\n//             rows={4}\n//             variant=\"outlined\"\n//             inputRef={transcriptionRef}\n//             autoFocus\n//           />\n//         </Paper>\n//       )}\n//     </Container>\n//   );\n// }\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Container, Typography, IconButton, TextField, Paper, Button } from \"@mui/material\";\nimport { ArrowBack } from \"@mui/icons-material\";\nimport { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\nimport useImage from \"use-image\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst confidenceColors = [\"rgba(0, 255, 0, 0.5)\",\n// High Confidence (Green)\n\"rgba(255, 165, 0, 0.5)\",\n// Medium Confidence (Orange)\n\"rgba(255, 0, 0, 0.5)\" // Low Confidence (Red)\n];\nfunction WhiteboardLabelingPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [whiteboard, setWhiteboard] = useState(null);\n  const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n  const [annotations, setAnnotations] = useState([]);\n  const [activeAnnotation, setActiveAnnotation] = useState(null);\n  const [pendingTranscription, setPendingTranscription] = useState(\"\");\n  useEffect(() => {\n    const fetchWhiteboardData = async () => {\n      try {\n        const whiteboardRes = await axios.get(`http://localhost:5001/whiteboards/${id}`, {\n          withCredentials: true\n        });\n        setWhiteboard(whiteboardRes.data);\n        const annotationsRes = await axios.get(`http://localhost:5001/whiteboards/${id}/annotations`, {\n          withCredentials: true\n        });\n        setAnnotations(annotationsRes.data);\n      } catch (error) {\n        console.error(\"Error fetching whiteboard data:\", error);\n      }\n    };\n    fetchWhiteboardData();\n  }, [id]);\n  const saveTranscription = async () => {\n    if (activeAnnotation !== null) {\n      try {\n        await axios.patch(`http://localhost:5001/annotations/${annotations[activeAnnotation]._id}`, {\n          transcription: pendingTranscription\n        }, {\n          withCredentials: true\n        });\n        console.log(\"Transcription saved successfully.\");\n      } catch (error) {\n        console.error(\"Failed to save transcription:\", error);\n      }\n    }\n  };\n  const handleNavigateBack = async () => {\n    await saveTranscription();\n    navigate(\"/whiteboards\");\n  };\n  const handleAnnotationClick = index => {\n    var _annotations$index;\n    setActiveAnnotation(index);\n    setPendingTranscription(((_annotations$index = annotations[index]) === null || _annotations$index === void 0 ? void 0 : _annotations$index.transcription) || \"\");\n  };\n  const handleTranscriptionChange = event => {\n    setPendingTranscription(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: false,\n    style: {\n      height: \"100vh\",\n      display: \"flex\",\n      padding: 0\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: `70%`,\n        overflowY: \"auto\",\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: handleNavigateBack,\n        style: {\n          position: \"absolute\",\n          top: \"20px\",\n          left: \"20px\",\n          zIndex: 1000\n        },\n        children: /*#__PURE__*/_jsxDEV(ArrowBack, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        style: {\n          position: \"absolute\",\n          top: \"20px\",\n          left: \"50%\",\n          transform: \"translateX(-50%)\",\n          zIndex: 1000,\n          opacity: 0.8,\n          backgroundColor: \"white\",\n          padding: \"5px 15px\",\n          borderRadius: \"4px\"\n        },\n        children: [\"Whiteboard ID: \", id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this), whiteboard ? /*#__PURE__*/_jsxDEV(Stage, {\n        width: 1200,\n        height: 800,\n        style: {\n          margin: \"0 auto\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Layer, {\n          children: [/*#__PURE__*/_jsxDEV(KonvaImage, {\n            image: image,\n            width: 1200,\n            height: 800\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 15\n          }, this), annotations.map((rect, i) => /*#__PURE__*/_jsxDEV(Rect, {\n            x: rect.x,\n            y: rect.y,\n            width: rect.width,\n            height: rect.height,\n            fill: confidenceColors[rect.confidenceLevel],\n            onClick: () => handleAnnotationClick(i)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        children: \"Whiteboard not found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this), activeAnnotation !== null && /*#__PURE__*/_jsxDEV(Paper, {\n      style: {\n        width: `30%`,\n        padding: \"20px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\",\n        boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n        overflowY: \"auto\"\n      },\n      square: true,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Edit Transcription\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"Transcription\",\n        value: pendingTranscription,\n        onChange: handleTranscriptionChange,\n        multiline: true,\n        rows: 4,\n        variant: \"outlined\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: saveTranscription,\n        style: {\n          marginTop: \"10px\"\n        },\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 439,\n    columnNumber: 5\n  }, this);\n}\n_s(WhiteboardLabelingPage, \"UnmJvFuFRW93/enWcgUtHiwrv5E=\", false, function () {\n  return [useParams, useNavigate, useImage];\n});\n_c = WhiteboardLabelingPage;\nexport default WhiteboardLabelingPage;\nvar _c;\n$RefreshReg$(_c, \"WhiteboardLabelingPage\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useParams","useNavigate","Container","Typography","IconButton","TextField","Paper","Button","ArrowBack","Stage","Layer","Image","KonvaImage","Rect","useImage","axios","jsxDEV","_jsxDEV","confidenceColors","WhiteboardLabelingPage","_s","id","navigate","whiteboard","setWhiteboard","image","imageUrl","annotations","setAnnotations","activeAnnotation","setActiveAnnotation","pendingTranscription","setPendingTranscription","fetchWhiteboardData","whiteboardRes","get","withCredentials","data","annotationsRes","error","console","saveTranscription","patch","_id","transcription","log","handleNavigateBack","handleAnnotationClick","index","_annotations$index","handleTranscriptionChange","event","target","value","maxWidth","style","height","display","padding","children","width","overflowY","position","onClick","top","left","zIndex","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","variant","transform","opacity","backgroundColor","borderRadius","margin","map","rect","i","x","y","fill","confidenceLevel","color","flexDirection","alignItems","boxShadow","square","gutterBottom","fullWidth","label","onChange","multiline","rows","autoFocus","marginTop","_c","$RefreshReg$"],"sources":["/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/pages/WhiteboardLabelingPage.js"],"sourcesContent":["// import React, { useState, useRef, useEffect } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import {\n//   Container,\n//   Typography,\n//   IconButton,\n//   TextField,\n//   Paper,\n//   Button,\n// } from \"@mui/material\";\n// import { ArrowBack } from \"@mui/icons-material\";\n// import { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\n// import useImage from \"use-image\";\n// import axios from \"axios\"; // Import axios for HTTP requests\n\n// const confidenceColors = [\n//   \"rgba(0, 255, 0, 0.5)\", // High Confidence (Green)\n//   \"rgba(255, 165, 0, 0.5)\", // Medium Confidence (Orange)\n//   \"rgba(255, 0, 0, 0.5)\", // Low Confidence (Red)\n// ];\n\n// function WhiteboardLabelingPage() {\n//   const { id } = useParams();\n//   const navigate = useNavigate();\n//   const [whiteboard, setWhiteboard] = useState(null);\n//   const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n//   const [annotations, setAnnotations] = useState([]);\n//   const [newAnnotation, setNewAnnotation] = useState(null);\n//   const [activeAnnotation, setActiveAnnotation] = useState(null);\n//   const [transcription, setTranscription] = useState(\"\");\n//   const [panelWidth, setPanelWidth] = useState(70);\n//   const transcriptionRef = useRef(null);\n//   const [pendingTranscription, setPendingTranscription] = useState(\"\");\n\n//   // Load whiteboard data and annotations from backend\n//   useEffect(() => {\n//     const fetchWhiteboardData = async () => {\n//       try {\n//         const whiteboardRes = await axios.get(\n//           `http://localhost:5001/whiteboards/${id}`,\n//           { withCredentials: true }\n//         );\n//         setWhiteboard(whiteboardRes.data);\n\n//         // Fetch and set annotations\n//         const annotationsRes = await axios.get(\n//           `http://localhost:5001/whiteboards/${id}/annotations`,\n//           { withCredentials: true }\n//         );\n//         setAnnotations(annotationsRes.data);\n//         console.log(\"IT GOT HERE\");\n//         console.log(annotationsRes.data);\n//       } catch (error) {\n//         console.error(\"Error fetching whiteboard data:\", error);\n//       }\n//     };\n\n//     fetchWhiteboardData();\n//   }, [id]);\n\n//   useEffect(() => {\n//     if (activeAnnotation !== null && transcriptionRef.current) {\n//       transcriptionRef.current.focus();\n//     }\n//   }, [activeAnnotation]);\n\n//   const handleMouseDown = (e) => {\n//     const { x, y } = e.target.getStage().getPointerPosition();\n//     setNewAnnotation({\n//       x,\n//       y,\n//       width: 0,\n//       height: 0,\n//       confidenceLevel: 0,\n//       transcription: \"\",\n//     });\n//   };\n\n//   const handleMouseMove = (e) => {\n//     if (!newAnnotation) return;\n//     const stage = e.target.getStage();\n//     const pointerPosition = stage.getPointerPosition();\n//     setNewAnnotation({\n//       ...newAnnotation,\n//       width: pointerPosition.x - newAnnotation.x,\n//       height: pointerPosition.y - newAnnotation.y,\n//     });\n//   };\n\n//   const handleMouseUp = () => {\n//     if (newAnnotation) {\n//       setAnnotations((prevAnnotations) => [...prevAnnotations, newAnnotation]);\n//       setActiveAnnotation(annotations.length);\n//       setTranscription(newAnnotation.transcription);\n\n//       // Save new annotation to the backend\n//       saveAnnotation(newAnnotation);\n//       setNewAnnotation(null);\n//     }\n//   };\n\n//   // Function to save a new annotation to the backend\n//   const saveAnnotation = async (annotation) => {\n//     console.log(annotation);\n//     console.log(`/whiteboards/${id}/annotations`);\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5001/whiteboards/${id}/annotations`,\n//         annotation,\n//         { withCredentials: true }\n//       );\n\n//       console.log(\"it got here\");\n\n//       // Update the annotations state with the newly saved annotation, including its backend `_id`\n//       setAnnotations((prevAnnotations) => [\n//         ...prevAnnotations,\n//         { ...annotation, _id: response.data._id },\n//       ]);\n//     } catch (error) {\n//       console.error(\"Error saving annotation:\", error);\n//     }\n//   };\n\n//   // Function to update an existing annotation in the backend and in the state\n//   const updateAnnotation = async (index, updatedFields) => {\n//     const annotation = annotations[index];\n\n//     try {\n//       const response = await axios.patch(\n//         `http://localhost:5001/annotations/${annotation._id}`,\n//         updatedFields,\n//         { withCredentials: true }\n//       );\n\n//       // Update the specific annotation in the state based on its index\n//       setAnnotations((prevAnnotations) =>\n//         prevAnnotations.map((a, i) => (i === index ? response.data : a))\n//       );\n//     } catch (error) {\n//       console.error(\"Error updating annotation:\", error);\n//     }\n//   };\n\n//   // const handleAnnotationClick = (index) => {\n//   //   // Save current transcription if there's an active annotation and if it has changed\n//   //   if (\n//   //     activeAnnotation !== null &&\n//   //     pendingTranscription !== annotations[activeAnnotation]?.transcription\n//   //   ) {\n//   //     updateAnnotation(activeAnnotation, {\n//   //       transcription: pendingTranscription,\n//   //     });\n//   //   }\n\n//   //   // Cycle confidence level (color) of the clicked annotation\n//   //   const updatedAnnotations = [...annotations];\n//   //   const currentAnnotation = updatedAnnotations[index];\n//   //   const nextConfidenceLevel =\n//   //     (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n\n//   //   updatedAnnotations[index] = {\n//   //     ...currentAnnotation,\n//   //     confidenceLevel: nextConfidenceLevel,\n//   //   };\n\n//   //   setAnnotations(updatedAnnotations);\n//   //   setActiveAnnotation(index);\n//   //   setPendingTranscription(currentAnnotation.transcription || \"\");\n\n//   //   // Update confidence level in the backend\n//   //   updateAnnotation(index, { confidenceLevel: nextConfidenceLevel });\n//   // };\n\n//   const handleAnnotationClick = (index) => {\n//     // Save current transcription if there's an active annotation and it has changed\n//     if (activeAnnotation !== null) {\n//       saveTranscription();\n//     }\n\n//     // Cycle confidence level (color) of the clicked annotation\n//     const updatedAnnotations = [...annotations];\n//     const currentAnnotation = updatedAnnotations[index];\n//     const nextConfidenceLevel =\n//       (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n\n//     updatedAnnotations[index] = {\n//       ...currentAnnotation,\n//       confidenceLevel: nextConfidenceLevel,\n//     };\n\n//     setAnnotations(updatedAnnotations);\n//     setActiveAnnotation(index);\n//     setPendingTranscription(currentAnnotation.transcription || \"\");\n\n//     // Update confidence level in the backend\n//     updateAnnotation(index, { confidenceLevel: nextConfidenceLevel });\n//   };\n\n//   const saveTranscription = () => {\n//     if (\n//       activeAnnotation !== null &&\n//       pendingTranscription !== annotations[activeAnnotation]?.transcription\n//     ) {\n//       updateAnnotation(activeAnnotation, {\n//         transcription: pendingTranscription,\n//       });\n//     }\n//   };\n\n//   const handleTranscriptionChange = (event) => {\n//     const updatedTranscription = event.target.value;\n//     setPendingTranscription(updatedTranscription);\n//   };\n\n//   // Set pending transcription when active annotation changes\n//   useEffect(() => {\n//     if (activeAnnotation !== null) {\n//       setPendingTranscription(\n//         annotations[activeAnnotation]?.transcription || \"\"\n//       );\n//     }\n//   }, [activeAnnotation, annotations]);\n\n//   const handleResize = (e) => {\n//     const newWidth = (e.clientX / window.innerWidth) * 100;\n//     setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n//   };\n\n//   return (\n//     <Container\n//       maxWidth={false}\n//       style={{ height: \"100vh\", display: \"flex\", padding: 0 }}\n//     >\n//       <div\n//         style={{\n//           width: `${panelWidth}%`,\n//           overflowY: \"auto\",\n//           position: \"relative\",\n//         }}\n//       >\n//         <IconButton\n//           onClick={() => navigate(\"/whiteboards\")}\n//           style={{\n//             position: \"absolute\",\n//             top: \"20px\",\n//             left: \"20px\",\n//             zIndex: 1000,\n//           }}\n//         >\n//           <ArrowBack fontSize=\"large\" />\n//         </IconButton>\n//         <Typography\n//           variant=\"h6\"\n//           style={{\n//             position: \"absolute\",\n//             top: \"20px\",\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             zIndex: 1000,\n//             opacity: 0.8,\n//             backgroundColor: \"white\",\n//             padding: \"5px 15px\",\n//             borderRadius: \"4px\",\n//           }}\n//         >\n//           Whiteboard ID: {id}\n//         </Typography>\n//         {whiteboard ? (\n//           <Stage\n//             width={1200}\n//             height={800}\n//             onMouseDown={handleMouseDown}\n//             onMouseMove={handleMouseMove}\n//             onMouseUp={handleMouseUp}\n//             style={{ margin: \"0 auto\" }}\n//           >\n//             <Layer>\n//               <KonvaImage image={image} width={1200} height={800} />\n//               {annotations.map((rect, i) => (\n//                 <Rect\n//                   key={i}\n//                   x={rect.x}\n//                   y={rect.y}\n//                   width={rect.width}\n//                   height={rect.height}\n//                   fill={confidenceColors[rect.confidenceLevel]}\n//                   onClick={() => handleAnnotationClick(i)}\n//                 />\n//               ))}\n//               {newAnnotation && (\n//                 <Rect\n//                   x={newAnnotation.x}\n//                   y={newAnnotation.y}\n//                   width={newAnnotation.width}\n//                   height={newAnnotation.height}\n//                   fill=\"rgba(0,0,255,0.5)\"\n//                 />\n//               )}\n//             </Layer>\n//           </Stage>\n//         ) : (\n//           <Typography color=\"error\">Whiteboard not found</Typography>\n//         )}\n//       </div>\n\n//       {/* Divider for Resizing */}\n//       <div\n//         onMouseDown={(e) => {\n//           document.addEventListener(\"mousemove\", handleResize);\n//           document.addEventListener(\"mouseup\", () => {\n//             document.removeEventListener(\"mousemove\", handleResize);\n//           });\n//         }}\n//         style={{\n//           width: \"5px\",\n//           cursor: \"col-resize\",\n//           backgroundColor: \"#ccc\",\n//         }}\n//       />\n\n//       {/* Transcription Panel */}\n//       {activeAnnotation !== null && (\n//         <Paper\n//           style={{\n//             width: `${100 - panelWidth}%`,\n//             padding: \"20px\",\n//             display: \"flex\",\n//             flexDirection: \"column\",\n//             alignItems: \"flex-start\",\n//             boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n//             overflowY: \"auto\",\n//           }}\n//           square\n//         >\n//           <Typography variant=\"h6\" gutterBottom>\n//             Edit Transcription\n//           </Typography>\n//           <TextField\n//             fullWidth\n//             label=\"Transcription\"\n//             value={pendingTranscription}\n//             onChange={handleTranscriptionChange}\n//             onBlur={saveTranscription}\n//             multiline\n//             rows={4}\n//             variant=\"outlined\"\n//             inputRef={transcriptionRef}\n//             autoFocus\n//           />\n//         </Paper>\n//       )}\n//     </Container>\n//   );\n// }\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport {\n  Container,\n  Typography,\n  IconButton,\n  TextField,\n  Paper,\n  Button,\n} from \"@mui/material\";\nimport { ArrowBack } from \"@mui/icons-material\";\nimport { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\nimport useImage from \"use-image\";\nimport axios from \"axios\";\n\nconst confidenceColors = [\n  \"rgba(0, 255, 0, 0.5)\", // High Confidence (Green)\n  \"rgba(255, 165, 0, 0.5)\", // Medium Confidence (Orange)\n  \"rgba(255, 0, 0, 0.5)\", // Low Confidence (Red)\n];\n\nfunction WhiteboardLabelingPage() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [whiteboard, setWhiteboard] = useState(null);\n  const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n  const [annotations, setAnnotations] = useState([]);\n  const [activeAnnotation, setActiveAnnotation] = useState(null);\n  const [pendingTranscription, setPendingTranscription] = useState(\"\");\n\n  useEffect(() => {\n    const fetchWhiteboardData = async () => {\n      try {\n        const whiteboardRes = await axios.get(\n          `http://localhost:5001/whiteboards/${id}`,\n          { withCredentials: true }\n        );\n        setWhiteboard(whiteboardRes.data);\n\n        const annotationsRes = await axios.get(\n          `http://localhost:5001/whiteboards/${id}/annotations`,\n          { withCredentials: true }\n        );\n        setAnnotations(annotationsRes.data);\n      } catch (error) {\n        console.error(\"Error fetching whiteboard data:\", error);\n      }\n    };\n\n    fetchWhiteboardData();\n  }, [id]);\n\n  const saveTranscription = async () => {\n    if (activeAnnotation !== null) {\n      try {\n        await axios.patch(\n          `http://localhost:5001/annotations/${annotations[activeAnnotation]._id}`,\n          { transcription: pendingTranscription },\n          { withCredentials: true }\n        );\n        console.log(\"Transcription saved successfully.\");\n      } catch (error) {\n        console.error(\"Failed to save transcription:\", error);\n      }\n    }\n  };\n\n  const handleNavigateBack = async () => {\n    await saveTranscription();\n    navigate(\"/whiteboards\");\n  };\n\n  const handleAnnotationClick = (index) => {\n    setActiveAnnotation(index);\n    setPendingTranscription(annotations[index]?.transcription || \"\");\n  };\n\n  const handleTranscriptionChange = (event) => {\n    setPendingTranscription(event.target.value);\n  };\n\n  return (\n    <Container\n      maxWidth={false}\n      style={{ height: \"100vh\", display: \"flex\", padding: 0 }}\n    >\n      <div\n        style={{\n          width: `70%`,\n          overflowY: \"auto\",\n          position: \"relative\",\n        }}\n      >\n        <IconButton\n          onClick={handleNavigateBack}\n          style={{\n            position: \"absolute\",\n            top: \"20px\",\n            left: \"20px\",\n            zIndex: 1000,\n          }}\n        >\n          <ArrowBack fontSize=\"large\" />\n        </IconButton>\n        <Typography\n          variant=\"h6\"\n          style={{\n            position: \"absolute\",\n            top: \"20px\",\n            left: \"50%\",\n            transform: \"translateX(-50%)\",\n            zIndex: 1000,\n            opacity: 0.8,\n            backgroundColor: \"white\",\n            padding: \"5px 15px\",\n            borderRadius: \"4px\",\n          }}\n        >\n          Whiteboard ID: {id}\n        </Typography>\n        {whiteboard ? (\n          <Stage width={1200} height={800} style={{ margin: \"0 auto\" }}>\n            <Layer>\n              <KonvaImage image={image} width={1200} height={800} />\n              {annotations.map((rect, i) => (\n                <Rect\n                  key={i}\n                  x={rect.x}\n                  y={rect.y}\n                  width={rect.width}\n                  height={rect.height}\n                  fill={confidenceColors[rect.confidenceLevel]}\n                  onClick={() => handleAnnotationClick(i)}\n                />\n              ))}\n            </Layer>\n          </Stage>\n        ) : (\n          <Typography color=\"error\">Whiteboard not found</Typography>\n        )}\n      </div>\n\n      {activeAnnotation !== null && (\n        <Paper\n          style={{\n            width: `30%`,\n            padding: \"20px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n            overflowY: \"auto\",\n          }}\n          square\n        >\n          <Typography variant=\"h6\" gutterBottom>\n            Edit Transcription\n          </Typography>\n          <TextField\n            fullWidth\n            label=\"Transcription\"\n            value={pendingTranscription}\n            onChange={handleTranscriptionChange}\n            multiline\n            rows={4}\n            variant=\"outlined\"\n            autoFocus\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={saveTranscription}\n            style={{ marginTop: \"10px\" }}\n          >\n            Save\n          </Button>\n        </Paper>\n      )}\n    </Container>\n  );\n}\n\nexport default WhiteboardLabelingPage;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}