{"ast":null,"code":"var _jsxFileName = \"/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/pages/WhiteboardLabelingPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Container, Typography, IconButton, TextField, Paper, Button } from \"@mui/material\";\nimport { ArrowBack } from \"@mui/icons-material\";\nimport { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\nimport useImage from \"use-image\";\nimport axios from \"axios\"; // Import axios for HTTP requests\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst confidenceColors = [\"rgba(0, 255, 0, 0.5)\",\n// High Confidence (Green)\n\"rgba(255, 165, 0, 0.5)\",\n// Medium Confidence (Orange)\n\"rgba(255, 0, 0, 0.5)\" // Low Confidence (Red)\n];\nfunction WhiteboardLabelingPage() {\n  _s();\n  var _annotations$activeAn;\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [whiteboard, setWhiteboard] = useState(null);\n  const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n  const [annotations, setAnnotations] = useState([]);\n  const [newAnnotation, setNewAnnotation] = useState(null);\n  const [activeAnnotation, setActiveAnnotation] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n  const [panelWidth, setPanelWidth] = useState(70);\n  const transcriptionRef = useRef(null);\n\n  // Load whiteboard data and annotations from backend\n  useEffect(() => {\n    const fetchWhiteboardData = async () => {\n      try {\n        const whiteboardRes = await axios.get(`http://localhost:5001/whiteboards/${id}`);\n        setWhiteboard(whiteboardRes.data);\n\n        // Fetch and set annotations\n        const annotationsRes = await axios.get(`http://localhost:5001/whiteboards/${id}/annotations`);\n        setAnnotations(annotationsRes.data);\n      } catch (error) {\n        console.error(\"Error fetching whiteboard data:\", error);\n      }\n    };\n    fetchWhiteboardData();\n  }, [id]);\n  useEffect(() => {\n    if (activeAnnotation !== null && transcriptionRef.current) {\n      transcriptionRef.current.focus();\n    }\n  }, [activeAnnotation]);\n  const handleMouseDown = e => {\n    const {\n      x,\n      y\n    } = e.target.getStage().getPointerPosition();\n    setNewAnnotation({\n      x,\n      y,\n      width: 0,\n      height: 0,\n      confidenceLevel: 0,\n      transcription: \"\"\n    });\n  };\n  const handleMouseMove = e => {\n    if (!newAnnotation) return;\n    const stage = e.target.getStage();\n    const pointerPosition = stage.getPointerPosition();\n    setNewAnnotation({\n      ...newAnnotation,\n      width: pointerPosition.x - newAnnotation.x,\n      height: pointerPosition.y - newAnnotation.y\n    });\n  };\n  const handleMouseUp = () => {\n    if (newAnnotation) {\n      setAnnotations(prevAnnotations => [...prevAnnotations, newAnnotation]);\n      setActiveAnnotation(annotations.length);\n      setTranscription(newAnnotation.transcription);\n\n      // Save new annotation to the backend\n      saveAnnotation(newAnnotation);\n      setNewAnnotation(null);\n    }\n  };\n\n  // Enum values for confidence levels\n  const confidenceLevels = [\"high\", \"medium\", \"low\"];\n\n  // Function to save a new annotation to the backend\n  const saveAnnotation = async annotation => {\n    try {\n      const response = await axios.post(`/whiteboards/${id}/annotations`, annotation);\n\n      // Update the annotations state with the newly saved annotation, including its backend `_id`\n      setAnnotations(prevAnnotations => [...prevAnnotations, {\n        ...annotation,\n        _id: response.data._id\n      }]);\n    } catch (error) {\n      console.error(\"Error saving annotation:\", error);\n    }\n  };\n\n  // Function to update an existing annotation in the backend and in the state\n  const updateAnnotation = async (index, updatedFields) => {\n    const annotation = annotations[index];\n    try {\n      const response = await axios.patch(`/annotations/${annotation._id}`, updatedFields);\n\n      // Update the specific annotation in the state based on its index\n      setAnnotations(prevAnnotations => prevAnnotations.map((a, i) => i === index ? response.data : a));\n    } catch (error) {\n      console.error(\"Error updating annotation:\", error);\n    }\n  };\n\n  // Handler for clicking an annotation, cycles through confidence levels\n  const handleAnnotationClick = index => {\n    const updatedAnnotations = [...annotations];\n    const currentAnnotation = updatedAnnotations[index];\n\n    // Find the next confidence level using the enum values\n    const currentLevelIndex = confidenceLevels.indexOf(currentAnnotation.confidenceLevel);\n    const nextLevel = confidenceLevels[(currentLevelIndex + 1) % confidenceLevels.length];\n    updatedAnnotations[index] = {\n      ...currentAnnotation,\n      confidenceLevel: nextLevel\n    };\n    setAnnotations(updatedAnnotations);\n    setActiveAnnotation(index);\n    setTranscription(updatedAnnotations[index].transcription);\n\n    // Update confidence level in the backend\n    updateAnnotation(index, {\n      confidenceLevel: nextLevel\n    });\n  };\n\n  // Handler for transcription change, saves the change to the backend\n  const handleTranscriptionChange = event => {\n    const updatedTranscription = event.target.value;\n    setTranscription(updatedTranscription);\n\n    // Update the transcription in the state\n    setAnnotations(prevAnnotations => prevAnnotations.map((annotation, i) => i === activeAnnotation ? {\n      ...annotation,\n      transcription: updatedTranscription\n    } : annotation));\n\n    // Auto-save transcription to backend\n    updateAnnotation(activeAnnotation, {\n      transcription: updatedTranscription\n    });\n  };\n  const handleResize = e => {\n    const newWidth = e.clientX / window.innerWidth * 100;\n    setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: false,\n    style: {\n      height: \"100vh\",\n      display: \"flex\",\n      padding: 0\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: `${panelWidth}%`,\n        overflowY: \"auto\",\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => navigate(\"/whiteboards\"),\n        style: {\n          position: \"absolute\",\n          top: \"20px\",\n          left: \"20px\",\n          zIndex: 1000\n        },\n        children: /*#__PURE__*/_jsxDEV(ArrowBack, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        style: {\n          position: \"absolute\",\n          top: \"20px\",\n          left: \"50%\",\n          transform: \"translateX(-50%)\",\n          zIndex: 1000,\n          opacity: 0.8,\n          backgroundColor: \"white\",\n          padding: \"5px 15px\",\n          borderRadius: \"4px\"\n        },\n        children: [\"Whiteboard ID: \", id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), whiteboard ? /*#__PURE__*/_jsxDEV(Stage, {\n        width: 1200,\n        height: 800,\n        onMouseDown: handleMouseDown,\n        onMouseMove: handleMouseMove,\n        onMouseUp: handleMouseUp,\n        style: {\n          margin: \"0 auto\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Layer, {\n          children: [/*#__PURE__*/_jsxDEV(KonvaImage, {\n            image: image,\n            width: 1200,\n            height: 800\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this), annotations.map((rect, i) => /*#__PURE__*/_jsxDEV(Rect, {\n            x: rect.x,\n            y: rect.y,\n            width: rect.width,\n            height: rect.height,\n            fill: confidenceColors[rect.confidenceLevel],\n            onClick: () => handleAnnotationClick(i)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 17\n          }, this)), newAnnotation && /*#__PURE__*/_jsxDEV(Rect, {\n            x: newAnnotation.x,\n            y: newAnnotation.y,\n            width: newAnnotation.width,\n            height: newAnnotation.height,\n            fill: \"rgba(0,0,255,0.5)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        children: \"Whiteboard not found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onMouseDown: e => {\n        document.addEventListener(\"mousemove\", handleResize);\n        document.addEventListener(\"mouseup\", () => {\n          document.removeEventListener(\"mousemove\", handleResize);\n        });\n      },\n      style: {\n        width: \"5px\",\n        cursor: \"col-resize\",\n        backgroundColor: \"#ccc\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), activeAnnotation !== null && /*#__PURE__*/_jsxDEV(Paper, {\n      style: {\n        width: `${100 - panelWidth}%`,\n        padding: \"20px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\",\n        boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n        overflowY: \"auto\"\n      },\n      square: true,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Edit Transcription\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"Transcription\",\n        value: ((_annotations$activeAn = annotations[activeAnnotation]) === null || _annotations$activeAn === void 0 ? void 0 : _annotations$activeAn.transcription) || \"\",\n        onChange: handleTranscriptionChange,\n        multiline: true,\n        rows: 4,\n        variant: \"outlined\",\n        inputRef: transcriptionRef,\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n}\n_s(WhiteboardLabelingPage, \"vAJCSsYy7P/mBDbXFTkTWsKwqFc=\", false, function () {\n  return [useParams, useNavigate, useImage];\n});\n_c = WhiteboardLabelingPage;\nexport default WhiteboardLabelingPage;\nvar _c;\n$RefreshReg$(_c, \"WhiteboardLabelingPage\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useParams","useNavigate","Container","Typography","IconButton","TextField","Paper","Button","ArrowBack","Stage","Layer","Image","KonvaImage","Rect","useImage","axios","jsxDEV","_jsxDEV","confidenceColors","WhiteboardLabelingPage","_s","_annotations$activeAn","id","navigate","whiteboard","setWhiteboard","image","imageUrl","annotations","setAnnotations","newAnnotation","setNewAnnotation","activeAnnotation","setActiveAnnotation","transcription","setTranscription","panelWidth","setPanelWidth","transcriptionRef","fetchWhiteboardData","whiteboardRes","get","data","annotationsRes","error","console","current","focus","handleMouseDown","e","x","y","target","getStage","getPointerPosition","width","height","confidenceLevel","handleMouseMove","stage","pointerPosition","handleMouseUp","prevAnnotations","length","saveAnnotation","confidenceLevels","annotation","response","post","_id","updateAnnotation","index","updatedFields","patch","map","a","i","handleAnnotationClick","updatedAnnotations","currentAnnotation","currentLevelIndex","indexOf","nextLevel","handleTranscriptionChange","event","updatedTranscription","value","handleResize","newWidth","clientX","window","innerWidth","Math","max","min","maxWidth","style","display","padding","children","overflowY","position","onClick","top","left","zIndex","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","variant","transform","opacity","backgroundColor","borderRadius","onMouseDown","onMouseMove","onMouseUp","margin","rect","fill","color","document","addEventListener","removeEventListener","cursor","flexDirection","alignItems","boxShadow","square","gutterBottom","fullWidth","label","onChange","multiline","rows","inputRef","autoFocus","_c","$RefreshReg$"],"sources":["/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/pages/WhiteboardLabelingPage.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport {\n  Container,\n  Typography,\n  IconButton,\n  TextField,\n  Paper,\n  Button,\n} from \"@mui/material\";\nimport { ArrowBack } from \"@mui/icons-material\";\nimport { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\nimport useImage from \"use-image\";\nimport axios from \"axios\"; // Import axios for HTTP requests\n\nconst confidenceColors = [\n  \"rgba(0, 255, 0, 0.5)\", // High Confidence (Green)\n  \"rgba(255, 165, 0, 0.5)\", // Medium Confidence (Orange)\n  \"rgba(255, 0, 0, 0.5)\", // Low Confidence (Red)\n];\n\nfunction WhiteboardLabelingPage() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [whiteboard, setWhiteboard] = useState(null);\n  const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n  const [annotations, setAnnotations] = useState([]);\n  const [newAnnotation, setNewAnnotation] = useState(null);\n  const [activeAnnotation, setActiveAnnotation] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n  const [panelWidth, setPanelWidth] = useState(70);\n  const transcriptionRef = useRef(null);\n\n  // Load whiteboard data and annotations from backend\n  useEffect(() => {\n    const fetchWhiteboardData = async () => {\n      try {\n        const whiteboardRes = await axios.get(\n          `http://localhost:5001/whiteboards/${id}`\n        );\n        setWhiteboard(whiteboardRes.data);\n\n        // Fetch and set annotations\n        const annotationsRes = await axios.get(\n          `http://localhost:5001/whiteboards/${id}/annotations`\n        );\n        setAnnotations(annotationsRes.data);\n      } catch (error) {\n        console.error(\"Error fetching whiteboard data:\", error);\n      }\n    };\n\n    fetchWhiteboardData();\n  }, [id]);\n\n  useEffect(() => {\n    if (activeAnnotation !== null && transcriptionRef.current) {\n      transcriptionRef.current.focus();\n    }\n  }, [activeAnnotation]);\n\n  const handleMouseDown = (e) => {\n    const { x, y } = e.target.getStage().getPointerPosition();\n    setNewAnnotation({\n      x,\n      y,\n      width: 0,\n      height: 0,\n      confidenceLevel: 0,\n      transcription: \"\",\n    });\n  };\n\n  const handleMouseMove = (e) => {\n    if (!newAnnotation) return;\n    const stage = e.target.getStage();\n    const pointerPosition = stage.getPointerPosition();\n    setNewAnnotation({\n      ...newAnnotation,\n      width: pointerPosition.x - newAnnotation.x,\n      height: pointerPosition.y - newAnnotation.y,\n    });\n  };\n\n  const handleMouseUp = () => {\n    if (newAnnotation) {\n      setAnnotations((prevAnnotations) => [...prevAnnotations, newAnnotation]);\n      setActiveAnnotation(annotations.length);\n      setTranscription(newAnnotation.transcription);\n\n      // Save new annotation to the backend\n      saveAnnotation(newAnnotation);\n      setNewAnnotation(null);\n    }\n  };\n\n  // Enum values for confidence levels\n  const confidenceLevels = [\"high\", \"medium\", \"low\"];\n\n  // Function to save a new annotation to the backend\n  const saveAnnotation = async (annotation) => {\n    try {\n      const response = await axios.post(\n        `/whiteboards/${id}/annotations`,\n        annotation\n      );\n\n      // Update the annotations state with the newly saved annotation, including its backend `_id`\n      setAnnotations((prevAnnotations) => [\n        ...prevAnnotations,\n        { ...annotation, _id: response.data._id },\n      ]);\n    } catch (error) {\n      console.error(\"Error saving annotation:\", error);\n    }\n  };\n\n  // Function to update an existing annotation in the backend and in the state\n  const updateAnnotation = async (index, updatedFields) => {\n    const annotation = annotations[index];\n\n    try {\n      const response = await axios.patch(\n        `/annotations/${annotation._id}`,\n        updatedFields\n      );\n\n      // Update the specific annotation in the state based on its index\n      setAnnotations((prevAnnotations) =>\n        prevAnnotations.map((a, i) => (i === index ? response.data : a))\n      );\n    } catch (error) {\n      console.error(\"Error updating annotation:\", error);\n    }\n  };\n\n  // Handler for clicking an annotation, cycles through confidence levels\n  const handleAnnotationClick = (index) => {\n    const updatedAnnotations = [...annotations];\n    const currentAnnotation = updatedAnnotations[index];\n\n    // Find the next confidence level using the enum values\n    const currentLevelIndex = confidenceLevels.indexOf(\n      currentAnnotation.confidenceLevel\n    );\n    const nextLevel =\n      confidenceLevels[(currentLevelIndex + 1) % confidenceLevels.length];\n\n    updatedAnnotations[index] = {\n      ...currentAnnotation,\n      confidenceLevel: nextLevel,\n    };\n\n    setAnnotations(updatedAnnotations);\n    setActiveAnnotation(index);\n    setTranscription(updatedAnnotations[index].transcription);\n\n    // Update confidence level in the backend\n    updateAnnotation(index, { confidenceLevel: nextLevel });\n  };\n\n  // Handler for transcription change, saves the change to the backend\n  const handleTranscriptionChange = (event) => {\n    const updatedTranscription = event.target.value;\n    setTranscription(updatedTranscription);\n\n    // Update the transcription in the state\n    setAnnotations((prevAnnotations) =>\n      prevAnnotations.map((annotation, i) =>\n        i === activeAnnotation\n          ? { ...annotation, transcription: updatedTranscription }\n          : annotation\n      )\n    );\n\n    // Auto-save transcription to backend\n    updateAnnotation(activeAnnotation, { transcription: updatedTranscription });\n  };\n\n  const handleResize = (e) => {\n    const newWidth = (e.clientX / window.innerWidth) * 100;\n    setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n  };\n\n  return (\n    <Container\n      maxWidth={false}\n      style={{ height: \"100vh\", display: \"flex\", padding: 0 }}\n    >\n      <div\n        style={{\n          width: `${panelWidth}%`,\n          overflowY: \"auto\",\n          position: \"relative\",\n        }}\n      >\n        <IconButton\n          onClick={() => navigate(\"/whiteboards\")}\n          style={{\n            position: \"absolute\",\n            top: \"20px\",\n            left: \"20px\",\n            zIndex: 1000,\n          }}\n        >\n          <ArrowBack fontSize=\"large\" />\n        </IconButton>\n        <Typography\n          variant=\"h6\"\n          style={{\n            position: \"absolute\",\n            top: \"20px\",\n            left: \"50%\",\n            transform: \"translateX(-50%)\",\n            zIndex: 1000,\n            opacity: 0.8,\n            backgroundColor: \"white\",\n            padding: \"5px 15px\",\n            borderRadius: \"4px\",\n          }}\n        >\n          Whiteboard ID: {id}\n        </Typography>\n        {whiteboard ? (\n          <Stage\n            width={1200}\n            height={800}\n            onMouseDown={handleMouseDown}\n            onMouseMove={handleMouseMove}\n            onMouseUp={handleMouseUp}\n            style={{ margin: \"0 auto\" }}\n          >\n            <Layer>\n              <KonvaImage image={image} width={1200} height={800} />\n              {annotations.map((rect, i) => (\n                <Rect\n                  key={i}\n                  x={rect.x}\n                  y={rect.y}\n                  width={rect.width}\n                  height={rect.height}\n                  fill={confidenceColors[rect.confidenceLevel]}\n                  onClick={() => handleAnnotationClick(i)}\n                />\n              ))}\n              {newAnnotation && (\n                <Rect\n                  x={newAnnotation.x}\n                  y={newAnnotation.y}\n                  width={newAnnotation.width}\n                  height={newAnnotation.height}\n                  fill=\"rgba(0,0,255,0.5)\"\n                />\n              )}\n            </Layer>\n          </Stage>\n        ) : (\n          <Typography color=\"error\">Whiteboard not found</Typography>\n        )}\n      </div>\n\n      {/* Divider for Resizing */}\n      <div\n        onMouseDown={(e) => {\n          document.addEventListener(\"mousemove\", handleResize);\n          document.addEventListener(\"mouseup\", () => {\n            document.removeEventListener(\"mousemove\", handleResize);\n          });\n        }}\n        style={{\n          width: \"5px\",\n          cursor: \"col-resize\",\n          backgroundColor: \"#ccc\",\n        }}\n      />\n\n      {/* Transcription Panel */}\n      {activeAnnotation !== null && (\n        <Paper\n          style={{\n            width: `${100 - panelWidth}%`,\n            padding: \"20px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n            overflowY: \"auto\",\n          }}\n          square\n        >\n          <Typography variant=\"h6\" gutterBottom>\n            Edit Transcription\n          </Typography>\n          <TextField\n            fullWidth\n            label=\"Transcription\"\n            value={annotations[activeAnnotation]?.transcription || \"\"}\n            onChange={handleTranscriptionChange}\n            multiline\n            rows={4}\n            variant=\"outlined\"\n            inputRef={transcriptionRef}\n            autoFocus\n          />\n        </Paper>\n      )}\n    </Container>\n  );\n}\n\nexport default WhiteboardLabelingPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}