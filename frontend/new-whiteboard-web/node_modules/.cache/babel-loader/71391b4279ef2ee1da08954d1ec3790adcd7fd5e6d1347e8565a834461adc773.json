{"ast":null,"code":"var _jsxFileName = \"/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/pages/WhiteboardSelectionPage.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Container, Card, CardContent, Typography, CardMedia, Button, Box } from \"@mui/material\";\nimport Grid2 from \"@mui/material/Grid2\";\nimport DownloadIcon from \"@mui/icons-material/Download\";\nimport { useWhiteboard } from \"../context/WhiteboardContext\"; // Import the context hook\nimport Papa from \"papaparse\";\nimport axios from \"axios\";\n\n// Function to fetch annotations and generate CSV\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst handleDownloadData = async () => {\n  try {\n    // Fetch all whiteboards and their annotations\n    const whiteboardsRes = await axios.get(\"http://localhost:5001/whiteboards\", {\n      withCredentials: true\n    });\n\n    // Collect annotation data for each whiteboard\n    const whiteboardChunks = await Promise.all(whiteboardsRes.data.map(async whiteboard => {\n      const annotationsRes = await axios.get(`http://localhost:5001/whiteboards/${whiteboard.id}/annotations`, {\n        withCredentials: true\n      });\n\n      // Map each annotation to the desired CSV format\n      return annotationsRes.data.map(chunk => ({\n        whiteboard_id: whiteboard.id,\n        image_url: whiteboard.imageUrl,\n        x: chunk.x,\n        y: chunk.y,\n        width: chunk.width,\n        height: chunk.height,\n        transcription: chunk.transcription,\n        confidence_level: chunk.confidenceLevel\n      }));\n    }));\n\n    // Flatten the array of arrays into a single array\n    const allChunks = whiteboardChunks.flat();\n\n    // Convert data to CSV format\n    const csv = Papa.unparse(allChunks);\n\n    // Create a blob from the CSV and trigger download\n    const blob = new Blob([csv], {\n      type: \"text/csv;charset=utf-8;\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.setAttribute(\"download\", \"labeled_whiteboards.csv\");\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error(\"Error downloading data:\", error);\n  }\n};\nfunction WhiteboardSelectionPage() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    whiteboards\n  } = useWhiteboard(); // Get whiteboards from context\n\n  const handleCardClick = id => {\n    navigate(`/label/${id}`);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    style: {\n      marginTop: \"20px\",\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mb: 2,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: \"Select a Whiteboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        startIcon: /*#__PURE__*/_jsxDEV(DownloadIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 22\n        }, this),\n        onClick: () => console.log(\"Download button clicked\"),\n        children: \"Download Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid2, {\n      container: true,\n      spacing: 4,\n      children: whiteboards.map(whiteboard => /*#__PURE__*/_jsxDEV(Grid2, {\n        xs: 12,\n        sm: 6,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          onClick: () => handleCardClick(whiteboard.id),\n          style: {\n            cursor: \"pointer\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n            component: \"img\",\n            height: \"140\",\n            image: whiteboard.imageUrl,\n            alt: `Whiteboard ${whiteboard.id}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: `Whiteboard ID: ${whiteboard.id}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              color: whiteboard.annotated ? \"primary\" : \"textSecondary\",\n              children: whiteboard.annotated ? \"Annotated\" : \"Not Annotated\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)\n      }, whiteboard.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(WhiteboardSelectionPage, \"mLrKwZypJfApcgLIejZAROtJZhs=\", false, function () {\n  return [useNavigate, useWhiteboard];\n});\n_c = WhiteboardSelectionPage;\nexport default WhiteboardSelectionPage;\nvar _c;\n$RefreshReg$(_c, \"WhiteboardSelectionPage\");","map":{"version":3,"names":["React","useNavigate","Container","Card","CardContent","Typography","CardMedia","Button","Box","Grid2","DownloadIcon","useWhiteboard","Papa","axios","jsxDEV","_jsxDEV","handleDownloadData","whiteboardsRes","get","withCredentials","whiteboardChunks","Promise","all","data","map","whiteboard","annotationsRes","id","chunk","whiteboard_id","image_url","imageUrl","x","y","width","height","transcription","confidence_level","confidenceLevel","allChunks","flat","csv","unparse","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","revokeObjectURL","error","console","WhiteboardSelectionPage","_s","navigate","whiteboards","handleCardClick","maxWidth","style","marginTop","position","children","display","alignItems","justifyContent","mb","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","startIcon","onClick","log","container","spacing","xs","sm","md","cursor","component","image","alt","annotated","_c","$RefreshReg$"],"sources":["/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/pages/WhiteboardSelectionPage.js"],"sourcesContent":["import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Container,\n  Card,\n  CardContent,\n  Typography,\n  CardMedia,\n  Button,\n  Box,\n} from \"@mui/material\";\nimport Grid2 from \"@mui/material/Grid2\";\nimport DownloadIcon from \"@mui/icons-material/Download\";\nimport { useWhiteboard } from \"../context/WhiteboardContext\"; // Import the context hook\nimport Papa from \"papaparse\";\nimport axios from \"axios\";\n\n// Function to fetch annotations and generate CSV\nconst handleDownloadData = async () => {\n  try {\n    // Fetch all whiteboards and their annotations\n    const whiteboardsRes = await axios.get(\n      \"http://localhost:5001/whiteboards\",\n      { withCredentials: true }\n    );\n\n    // Collect annotation data for each whiteboard\n    const whiteboardChunks = await Promise.all(\n      whiteboardsRes.data.map(async (whiteboard) => {\n        const annotationsRes = await axios.get(\n          `http://localhost:5001/whiteboards/${whiteboard.id}/annotations`,\n          { withCredentials: true }\n        );\n\n        // Map each annotation to the desired CSV format\n        return annotationsRes.data.map((chunk) => ({\n          whiteboard_id: whiteboard.id,\n          image_url: whiteboard.imageUrl,\n          x: chunk.x,\n          y: chunk.y,\n          width: chunk.width,\n          height: chunk.height,\n          transcription: chunk.transcription,\n          confidence_level: chunk.confidenceLevel,\n        }));\n      })\n    );\n\n    // Flatten the array of arrays into a single array\n    const allChunks = whiteboardChunks.flat();\n\n    // Convert data to CSV format\n    const csv = Papa.unparse(allChunks);\n\n    // Create a blob from the CSV and trigger download\n    const blob = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.setAttribute(\"download\", \"labeled_whiteboards.csv\");\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error(\"Error downloading data:\", error);\n  }\n};\n\nfunction WhiteboardSelectionPage() {\n  const navigate = useNavigate();\n  const { whiteboards } = useWhiteboard(); // Get whiteboards from context\n\n  const handleCardClick = (id) => {\n    navigate(`/label/${id}`);\n  };\n\n  return (\n    <Container\n      maxWidth=\"md\"\n      style={{ marginTop: \"20px\", position: \"relative\" }}\n    >\n      {/* Flex container to align title and button */}\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n        mb={2}\n      >\n        <Typography variant=\"h4\" gutterBottom>\n          Select a Whiteboard\n        </Typography>\n\n        {/* Download Data Button */}\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={<DownloadIcon />}\n          onClick={() => console.log(\"Download button clicked\")}\n        >\n          Download Data\n        </Button>\n      </Box>\n\n      <Grid2 container spacing={4}>\n        {whiteboards.map((whiteboard) => (\n          <Grid2 xs={12} sm={6} md={4} key={whiteboard.id}>\n            <Card\n              onClick={() => handleCardClick(whiteboard.id)}\n              style={{ cursor: \"pointer\" }}\n            >\n              <CardMedia\n                component=\"img\"\n                height=\"140\"\n                image={whiteboard.imageUrl}\n                alt={`Whiteboard ${whiteboard.id}`}\n              />\n              <CardContent>\n                <Typography variant=\"h6\">{`Whiteboard ID: ${whiteboard.id}`}</Typography>\n                <Typography\n                  color={whiteboard.annotated ? \"primary\" : \"textSecondary\"}\n                >\n                  {whiteboard.annotated ? \"Annotated\" : \"Not Annotated\"}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid2>\n        ))}\n      </Grid2>\n    </Container>\n  );\n}\n\nexport default WhiteboardSelectionPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SACEC,SAAS,EACTC,IAAI,EACJC,WAAW,EACXC,UAAU,EACVC,SAAS,EACTC,MAAM,EACNC,GAAG,QACE,eAAe;AACtB,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,YAAY,MAAM,8BAA8B;AACvD,SAASC,aAAa,QAAQ,8BAA8B,CAAC,CAAC;AAC9D,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF;IACA,MAAMC,cAAc,GAAG,MAAMJ,KAAK,CAACK,GAAG,CACpC,mCAAmC,EACnC;MAAEC,eAAe,EAAE;IAAK,CAC1B,CAAC;;IAED;IACA,MAAMC,gBAAgB,GAAG,MAAMC,OAAO,CAACC,GAAG,CACxCL,cAAc,CAACM,IAAI,CAACC,GAAG,CAAC,MAAOC,UAAU,IAAK;MAC5C,MAAMC,cAAc,GAAG,MAAMb,KAAK,CAACK,GAAG,CACpC,qCAAqCO,UAAU,CAACE,EAAE,cAAc,EAChE;QAAER,eAAe,EAAE;MAAK,CAC1B,CAAC;;MAED;MACA,OAAOO,cAAc,CAACH,IAAI,CAACC,GAAG,CAAEI,KAAK,KAAM;QACzCC,aAAa,EAAEJ,UAAU,CAACE,EAAE;QAC5BG,SAAS,EAAEL,UAAU,CAACM,QAAQ;QAC9BC,CAAC,EAAEJ,KAAK,CAACI,CAAC;QACVC,CAAC,EAAEL,KAAK,CAACK,CAAC;QACVC,KAAK,EAAEN,KAAK,CAACM,KAAK;QAClBC,MAAM,EAAEP,KAAK,CAACO,MAAM;QACpBC,aAAa,EAAER,KAAK,CAACQ,aAAa;QAClCC,gBAAgB,EAAET,KAAK,CAACU;MAC1B,CAAC,CAAC,CAAC;IACL,CAAC,CACH,CAAC;;IAED;IACA,MAAMC,SAAS,GAAGnB,gBAAgB,CAACoB,IAAI,CAAC,CAAC;;IAEzC;IACA,MAAMC,GAAG,GAAG7B,IAAI,CAAC8B,OAAO,CAACH,SAAS,CAAC;;IAEnC;IACA,MAAMI,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,GAAG,CAAC,EAAE;MAAEI,IAAI,EAAE;IAA0B,CAAC,CAAC;IACjE,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;IACrC,MAAMM,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGN,GAAG;IACfG,IAAI,CAACI,YAAY,CAAC,UAAU,EAAE,yBAAyB,CAAC;IACxDH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;IAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;IACZN,QAAQ,CAACI,IAAI,CAACG,WAAW,CAACR,IAAI,CAAC;IAC/BF,GAAG,CAACW,eAAe,CAACZ,GAAG,CAAC;EAC1B,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;EACjD;AACF,CAAC;AAED,SAASE,uBAAuBA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAG9D,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAE+D;EAAY,CAAC,GAAGrD,aAAa,CAAC,CAAC,CAAC,CAAC;;EAEzC,MAAMsD,eAAe,GAAItC,EAAE,IAAK;IAC9BoC,QAAQ,CAAC,UAAUpC,EAAE,EAAE,CAAC;EAC1B,CAAC;EAED,oBACEZ,OAAA,CAACb,SAAS;IACRgE,QAAQ,EAAC,IAAI;IACbC,KAAK,EAAE;MAAEC,SAAS,EAAE,MAAM;MAAEC,QAAQ,EAAE;IAAW,CAAE;IAAAC,QAAA,gBAGnDvD,OAAA,CAACP,GAAG;MACF+D,OAAO,EAAC,MAAM;MACdC,UAAU,EAAC,QAAQ;MACnBC,cAAc,EAAC,eAAe;MAC9BC,EAAE,EAAE,CAAE;MAAAJ,QAAA,gBAENvD,OAAA,CAACV,UAAU;QAACsE,OAAO,EAAC,IAAI;QAACC,YAAY;QAAAN,QAAA,EAAC;MAEtC;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eAGbjE,OAAA,CAACR,MAAM;QACLoE,OAAO,EAAC,WAAW;QACnBM,KAAK,EAAC,SAAS;QACfC,SAAS,eAAEnE,OAAA,CAACL,YAAY;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAE;QAC5BG,OAAO,EAAEA,CAAA,KAAMvB,OAAO,CAACwB,GAAG,CAAC,yBAAyB,CAAE;QAAAd,QAAA,EACvD;MAED;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAENjE,OAAA,CAACN,KAAK;MAAC4E,SAAS;MAACC,OAAO,EAAE,CAAE;MAAAhB,QAAA,EACzBN,WAAW,CAACxC,GAAG,CAAEC,UAAU,iBAC1BV,OAAA,CAACN,KAAK;QAAC8E,EAAE,EAAE,EAAG;QAACC,EAAE,EAAE,CAAE;QAACC,EAAE,EAAE,CAAE;QAAAnB,QAAA,eAC1BvD,OAAA,CAACZ,IAAI;UACHgF,OAAO,EAAEA,CAAA,KAAMlB,eAAe,CAACxC,UAAU,CAACE,EAAE,CAAE;UAC9CwC,KAAK,EAAE;YAAEuB,MAAM,EAAE;UAAU,CAAE;UAAApB,QAAA,gBAE7BvD,OAAA,CAACT,SAAS;YACRqF,SAAS,EAAC,KAAK;YACfxD,MAAM,EAAC,KAAK;YACZyD,KAAK,EAAEnE,UAAU,CAACM,QAAS;YAC3B8D,GAAG,EAAE,cAAcpE,UAAU,CAACE,EAAE;UAAG;YAAAkD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpC,CAAC,eACFjE,OAAA,CAACX,WAAW;YAAAkE,QAAA,gBACVvD,OAAA,CAACV,UAAU;cAACsE,OAAO,EAAC,IAAI;cAAAL,QAAA,EAAE,kBAAkB7C,UAAU,CAACE,EAAE;YAAE;cAAAkD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAa,CAAC,eACzEjE,OAAA,CAACV,UAAU;cACT4E,KAAK,EAAExD,UAAU,CAACqE,SAAS,GAAG,SAAS,GAAG,eAAgB;cAAAxB,QAAA,EAEzD7C,UAAU,CAACqE,SAAS,GAAG,WAAW,GAAG;YAAe;cAAAjB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3C,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV;MAAC,GAnByBvD,UAAU,CAACE,EAAE;QAAAkD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAoBxC,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEhB;AAAClB,EAAA,CA9DQD,uBAAuB;EAAA,QACb5D,WAAW,EACJU,aAAa;AAAA;AAAAoF,EAAA,GAF9BlC,uBAAuB;AAgEhC,eAAeA,uBAAuB;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}