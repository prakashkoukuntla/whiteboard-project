{"ast":null,"code":"var _jsxFileName = \"/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/pages/WhiteboardLabelingPage.js\",\n  _s = $RefreshSig$();\n// src/pages/WhiteboardLabelingPage.js\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Container, Typography, Button } from \"@mui/material\";\nimport { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\nimport useImage from \"use-image\"; // Custom hook for loading images asynchronously\n\n// Mock data representing whiteboards, to be replaced by actual data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst whiteboards = [{\n  id: \"wb_456\",\n  imageUrl: \"https://via.placeholder.com/400\",\n  annotated: true\n}, {\n  id: \"wb_457\",\n  imageUrl: \"https://via.placeholder.com/400\",\n  annotated: false\n}\n// Add more whiteboards if needed\n];\nfunction WhiteboardLabelingPage() {\n  _s();\n  const {\n    id\n  } = useParams(); // Get the whiteboard ID from the URL parameters\n  const whiteboard = whiteboards.find(wb => wb.id === id); // Find the selected whiteboard by ID\n  const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\"); // Load the whiteboard image\n\n  // State to store annotations and the current rectangle being drawn\n  const [annotations, setAnnotations] = useState([]);\n  const [newAnnotation, setNewAnnotation] = useState(null);\n\n  /**\n   * Start drawing a new annotation rectangle on mouse down.\n   * Capture the initial position where the user clicked.\n   */\n  const handleMouseDown = e => {\n    const {\n      x,\n      y\n    } = e.target.getStage().getPointerPosition(); // Get the position of the mouse click\n    setNewAnnotation({\n      x,\n      y,\n      width: 0,\n      height: 0\n    }); // Initialize the new rectangle with 0 width and height\n  };\n\n  /**\n   * Update the size of the new annotation rectangle as the mouse moves.\n   * Adjust width and height based on the current mouse position.\n   */\n  const handleMouseMove = e => {\n    if (!newAnnotation) return; // Only proceed if a new annotation is being drawn\n\n    const stage = e.target.getStage();\n    const pointerPosition = stage.getPointerPosition(); // Current mouse position\n    setNewAnnotation({\n      ...newAnnotation,\n      width: pointerPosition.x - newAnnotation.x,\n      // Calculate width based on the mouse movement\n      height: pointerPosition.y - newAnnotation.y // Calculate height based on the mouse movement\n    });\n  };\n\n  /**\n   * Finalize the annotation rectangle on mouse up.\n   * Save the completed rectangle to the annotations array.\n   */\n  const handleMouseUp = () => {\n    if (newAnnotation) {\n      setAnnotations([...annotations, newAnnotation]); // Add the completed rectangle to annotations\n      setNewAnnotation(null); // Reset the current rectangle being drawn\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: [\"Whiteboard ID: \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), whiteboard ?\n    /*#__PURE__*/\n    // Konva stage for drawing and interacting with annotations on the whiteboard\n    _jsxDEV(Stage, {\n      width: 500 // Set canvas width (adjustable)\n      ,\n      height: 400 // Set canvas height (adjustable)\n      ,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      children: /*#__PURE__*/_jsxDEV(Layer, {\n        children: [/*#__PURE__*/_jsxDEV(KonvaImage, {\n          image: image,\n          width: 500,\n          height: 400\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), annotations.map((rect, i) => /*#__PURE__*/_jsxDEV(Rect, {\n          x: rect.x,\n          y: rect.y,\n          width: rect.width,\n          height: rect.height,\n          fill: \"rgba(255,165,0,0.5)\" // Set color for annotated rectangles (semi-transparent orange)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this)), newAnnotation && /*#__PURE__*/_jsxDEV(Rect, {\n          x: newAnnotation.x,\n          y: newAnnotation.y,\n          width: newAnnotation.width,\n          height: newAnnotation.height,\n          fill: \"rgba(0,0,255,0.5)\" // Set color for the active rectangle (semi-transparent blue)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Display an error if the whiteboard ID is not found\n    _jsxDEV(Typography, {\n      color: \"error\",\n      children: \"Whiteboard not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      style: {\n        marginTop: \"20px\"\n      },\n      onClick: () => console.log(\"Annotations:\", annotations),\n      children: \"Save Annotations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(WhiteboardLabelingPage, \"JceomdAgdU3x9GOgfToW561xLIE=\", false, function () {\n  return [useParams, useImage];\n});\n_c = WhiteboardLabelingPage;\nexport default WhiteboardLabelingPage;\nvar _c;\n$RefreshReg$(_c, \"WhiteboardLabelingPage\");","map":{"version":3,"names":["React","useState","useParams","Container","Typography","Button","Stage","Layer","Image","KonvaImage","Rect","useImage","jsxDEV","_jsxDEV","whiteboards","id","imageUrl","annotated","WhiteboardLabelingPage","_s","whiteboard","find","wb","image","annotations","setAnnotations","newAnnotation","setNewAnnotation","handleMouseDown","e","x","y","target","getStage","getPointerPosition","width","height","handleMouseMove","stage","pointerPosition","handleMouseUp","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","onMouseDown","onMouseMove","onMouseUp","map","rect","i","fill","color","style","marginTop","onClick","console","log","_c","$RefreshReg$"],"sources":["/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/pages/WhiteboardLabelingPage.js"],"sourcesContent":["// src/pages/WhiteboardLabelingPage.js\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Container, Typography, Button } from \"@mui/material\";\nimport { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\nimport useImage from \"use-image\"; // Custom hook for loading images asynchronously\n\n// Mock data representing whiteboards, to be replaced by actual data\nconst whiteboards = [\n  {\n    id: \"wb_456\",\n    imageUrl: \"https://via.placeholder.com/400\",\n    annotated: true,\n  },\n  {\n    id: \"wb_457\",\n    imageUrl: \"https://via.placeholder.com/400\",\n    annotated: false,\n  },\n  // Add more whiteboards if needed\n];\n\nfunction WhiteboardLabelingPage() {\n  const { id } = useParams(); // Get the whiteboard ID from the URL parameters\n  const whiteboard = whiteboards.find((wb) => wb.id === id); // Find the selected whiteboard by ID\n  const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\"); // Load the whiteboard image\n\n  // State to store annotations and the current rectangle being drawn\n  const [annotations, setAnnotations] = useState([]);\n  const [newAnnotation, setNewAnnotation] = useState(null);\n\n  /**\n   * Start drawing a new annotation rectangle on mouse down.\n   * Capture the initial position where the user clicked.\n   */\n  const handleMouseDown = (e) => {\n    const { x, y } = e.target.getStage().getPointerPosition(); // Get the position of the mouse click\n    setNewAnnotation({ x, y, width: 0, height: 0 }); // Initialize the new rectangle with 0 width and height\n  };\n\n  /**\n   * Update the size of the new annotation rectangle as the mouse moves.\n   * Adjust width and height based on the current mouse position.\n   */\n  const handleMouseMove = (e) => {\n    if (!newAnnotation) return; // Only proceed if a new annotation is being drawn\n\n    const stage = e.target.getStage();\n    const pointerPosition = stage.getPointerPosition(); // Current mouse position\n    setNewAnnotation({\n      ...newAnnotation,\n      width: pointerPosition.x - newAnnotation.x, // Calculate width based on the mouse movement\n      height: pointerPosition.y - newAnnotation.y, // Calculate height based on the mouse movement\n    });\n  };\n\n  /**\n   * Finalize the annotation rectangle on mouse up.\n   * Save the completed rectangle to the annotations array.\n   */\n  const handleMouseUp = () => {\n    if (newAnnotation) {\n      setAnnotations([...annotations, newAnnotation]); // Add the completed rectangle to annotations\n      setNewAnnotation(null); // Reset the current rectangle being drawn\n    }\n  };\n\n  return (\n    <Container>\n      {/* Display the whiteboard ID as the title */}\n      <Typography variant=\"h4\" gutterBottom>\n        Whiteboard ID: {id}\n      </Typography>\n\n      {whiteboard ? (\n        // Konva stage for drawing and interacting with annotations on the whiteboard\n        <Stage\n          width={500} // Set canvas width (adjustable)\n          height={400} // Set canvas height (adjustable)\n          onMouseDown={handleMouseDown}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n        >\n          <Layer>\n            {/* Display the whiteboard image */}\n            <KonvaImage image={image} width={500} height={400} />\n\n            {/* Render all completed annotation rectangles */}\n            {annotations.map((rect, i) => (\n              <Rect\n                key={i}\n                x={rect.x}\n                y={rect.y}\n                width={rect.width}\n                height={rect.height}\n                fill=\"rgba(255,165,0,0.5)\" // Set color for annotated rectangles (semi-transparent orange)\n              />\n            ))}\n\n            {/* Render the current annotation rectangle being drawn */}\n            {newAnnotation && (\n              <Rect\n                x={newAnnotation.x}\n                y={newAnnotation.y}\n                width={newAnnotation.width}\n                height={newAnnotation.height}\n                fill=\"rgba(0,0,255,0.5)\" // Set color for the active rectangle (semi-transparent blue)\n              />\n            )}\n          </Layer>\n        </Stage>\n      ) : (\n        // Display an error if the whiteboard ID is not found\n        <Typography color=\"error\">Whiteboard not found</Typography>\n      )}\n\n      {/* Save button to handle annotation persistence (currently logs to console) */}\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        style={{ marginTop: \"20px\" }}\n        onClick={() => console.log(\"Annotations:\", annotations)}\n      >\n        Save Annotations\n      </Button>\n    </Container>\n  );\n}\n\nexport default WhiteboardLabelingPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}