{"ast":null,"code":"var _jsxFileName = \"/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/context/WhiteboardContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// // // src/context/WhiteboardContext.js\n// // import React, { createContext, useContext, useEffect, useState } from \"react\";\n// // import axios from \"axios\";\n\n// // // Create context\n// // const WhiteboardContext = createContext();\n\n// // // Create a provider component\n// // export const WhiteboardProvider = ({ children }) => {\n// //   const [whiteboards, setWhiteboards] = useState([]);\n\n// //   useEffect(() => {\n// //     // Function to fetch whiteboards and check for annotations\n// //     const fetchWhiteboardsWithAnnotations = async () => {\n// //       try {\n// //         // Fetch all whiteboards\n// //         const whiteboardsRes = await axios.get(\n// //           \"http://localhost:5001/whiteboards\",\n// //           { withCredentials: true }\n// //         );\n\n// //         // Check for annotations for each whiteboard\n// //         const whiteboardsWithStatus = await Promise.all(\n// //           whiteboardsRes.data.map(async (whiteboard) => {\n// //             const annotationsRes = await axios.get(\n// //               `http://localhost:5001/whiteboards/${whiteboard.id}/annotations`,\n// //               { withCredentials: true }\n// //             );\n// //             return {\n// //               ...whiteboard,\n// //               annotated: annotationsRes.data.length > 0, // True if there are annotations\n// //             };\n// //           })\n// //         );\n\n// //         setWhiteboards(whiteboardsWithStatus);\n// //       } catch (error) {\n// //         console.error(\"Error fetching whiteboards with annotations:\", error);\n// //       }\n// //     };\n\n// //     fetchWhiteboardsWithAnnotations();\n// //   }, []);\n\n// //   return (\n// //     <WhiteboardContext.Provider value={{ whiteboards, setWhiteboards }}>\n// //       {children}\n// //     </WhiteboardContext.Provider>\n// //   );\n// // };\n\n// // // Custom hook to use the whiteboard context\n// // export const useWhiteboard = () => {\n// //   return useContext(WhiteboardContext);\n// // };\n\n// // src/context/WhiteboardContext.js\n// import React, { createContext, useContext, useEffect, useState } from \"react\";\n// import axios from \"axios\";\n\n// // Create context\n// const WhiteboardContext = createContext();\n\n// // Create a provider component\n// export const WhiteboardProvider = ({ children }) => {\n//   const [whiteboards, setWhiteboards] = useState([]);\n\n//   useEffect(() => {\n//     // Function to fetch whiteboards and check for user-specific annotations\n//     const fetchWhiteboardsWithAnnotations = async () => {\n//       try {\n//         // Fetch all whiteboards for the logged-in user\n//         const whiteboardsRes = await axios.get(\n//           \"http://localhost:5001/whiteboards\",\n//           { withCredentials: true }\n//         );\n\n//         // Check for user-specific annotations for each whiteboard\n//         const whiteboardsWithStatus = await Promise.all(\n//           whiteboardsRes.data.map(async (whiteboard) => {\n//             // Fetch annotations specific to the logged-in user for this whiteboard\n//             const annotationsRes = await axios.get(\n//               `http://localhost:5001/whiteboards/${whiteboard.id}/annotations`,\n//               { withCredentials: true }\n//             );\n\n//             return {\n//               ...whiteboard,\n//               annotated: annotationsRes.data.length > 0, // True if user has annotations on this whiteboard\n//             };\n//           })\n//         );\n\n//         setWhiteboards(whiteboardsWithStatus);\n//       } catch (error) {\n//         console.error(\"Error fetching whiteboards with annotations:\", error);\n//       }\n//     };\n\n//     fetchWhiteboardsWithAnnotations();\n//   }, []);\n\n//   return (\n//     <WhiteboardContext.Provider value={{ whiteboards, setWhiteboards }}>\n//       {children}\n//     </WhiteboardContext.Provider>\n//   );\n// };\n\n// // Custom hook to use the whiteboard context\n// export const useWhiteboard = () => {\n//   return useContext(WhiteboardContext);\n// };\n\n// src/context/WhiteboardContext.js\n// import React, { createContext, useContext, useEffect, useState } from \"react\";\n// import axios from \"axios\";\n\n// // Create context\n// const WhiteboardContext = createContext();\n\n// // Create a provider component\n// export const WhiteboardProvider = ({ children }) => {\n//   const [whiteboards, setWhiteboards] = useState([]);\n\n//   // Function to fetch whiteboards with user-specific annotation status\n//   const refreshWhiteboards = async () => {\n//     try {\n//       const whiteboardsRes = await axios.get(\n//         \"http://localhost:5001/whiteboards\",\n//         {\n//           withCredentials: true,\n//         }\n//       );\n\n//       const whiteboardsWithStatus = await Promise.all(\n//         whiteboardsRes.data\n//           .filter((whiteboard) => whiteboard.id !== \"default_id\")\n//           .map(async (whiteboard) => {\n//             const annotationsRes = await axios.get(\n//               `http://localhost:5001/whiteboards/${whiteboard.id}/annotations`,\n//               { withCredentials: true }\n//             );\n//             return {\n//               ...whiteboard,\n//               annotated: annotationsRes.data.length > 0,\n//             };\n//           })\n//       );\n\n//       setWhiteboards(whiteboardsWithStatus);\n//     } catch (error) {\n//       console.error(\"Error fetching whiteboards with annotations:\", error);\n//     }\n//   };\n\n//   // Fetch whiteboards initially on context load\n//   useEffect(() => {\n//     refreshWhiteboards();\n//   }, []);\n\n//   return (\n//     <WhiteboardContext.Provider value={{ whiteboards, refreshWhiteboards }}>\n//       {children}\n//     </WhiteboardContext.Provider>\n//   );\n// };\n\n// // Custom hook to use the whiteboard context\n// export const useWhiteboard = () => {\n//   return useContext(WhiteboardContext);\n// };\n\n// src/context/WhiteboardContext.js\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhiteboardContext = /*#__PURE__*/createContext();\nexport const WhiteboardProvider = ({\n  children\n}) => {\n  _s();\n  const [whiteboards, setWhiteboards] = useState([]);\n  const [userId, setUserId] = useState(null);\n  useEffect(() => {\n    if (!userId) return; // Don't fetch if user is not logged in\n\n    const fetchWhiteboardsWithAnnotations = async () => {\n      try {\n        const whiteboardsRes = await axios.get(\"http://localhost:5001/whiteboards\", {\n          withCredentials: true\n        });\n        const whiteboardsWithStatus = await Promise.all(whiteboardsRes.data.filter(whiteboard => whiteboard.id !== \"defaultId\").map(async whiteboard => {\n          const annotationsRes = await axios.get(`http://localhost:5001/whiteboards/${whiteboard.id}/annotations`, {\n            withCredentials: true\n          });\n          return {\n            ...whiteboard,\n            annotated: annotationsRes.data.length > 0\n          };\n        }));\n        setWhiteboards(whiteboardsWithStatus);\n      } catch (error) {\n        console.error(\"Error fetching whiteboards with annotations:\", error);\n      }\n    };\n    fetchWhiteboardsWithAnnotations();\n  }, [userId]); // Refetch whiteboards whenever the user ID changes\n\n  return /*#__PURE__*/_jsxDEV(WhiteboardContext.Provider, {\n    value: {\n      whiteboards,\n      setWhiteboards,\n      setUserId\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n};\n_s(WhiteboardProvider, \"Sg2WYw3UbeLXweQs3f2kTlTne4U=\");\n_c = WhiteboardProvider;\nexport const useWhiteboard = () => {\n  _s2();\n  return useContext(WhiteboardContext);\n};\n_s2(useWhiteboard, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"WhiteboardProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","axios","jsxDEV","_jsxDEV","WhiteboardContext","WhiteboardProvider","children","_s","whiteboards","setWhiteboards","userId","setUserId","fetchWhiteboardsWithAnnotations","whiteboardsRes","get","withCredentials","whiteboardsWithStatus","Promise","all","data","filter","whiteboard","id","map","annotationsRes","annotated","length","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWhiteboard","_s2","$RefreshReg$"],"sources":["/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/context/WhiteboardContext.js"],"sourcesContent":["// // // src/context/WhiteboardContext.js\n// // import React, { createContext, useContext, useEffect, useState } from \"react\";\n// // import axios from \"axios\";\n\n// // // Create context\n// // const WhiteboardContext = createContext();\n\n// // // Create a provider component\n// // export const WhiteboardProvider = ({ children }) => {\n// //   const [whiteboards, setWhiteboards] = useState([]);\n\n// //   useEffect(() => {\n// //     // Function to fetch whiteboards and check for annotations\n// //     const fetchWhiteboardsWithAnnotations = async () => {\n// //       try {\n// //         // Fetch all whiteboards\n// //         const whiteboardsRes = await axios.get(\n// //           \"http://localhost:5001/whiteboards\",\n// //           { withCredentials: true }\n// //         );\n\n// //         // Check for annotations for each whiteboard\n// //         const whiteboardsWithStatus = await Promise.all(\n// //           whiteboardsRes.data.map(async (whiteboard) => {\n// //             const annotationsRes = await axios.get(\n// //               `http://localhost:5001/whiteboards/${whiteboard.id}/annotations`,\n// //               { withCredentials: true }\n// //             );\n// //             return {\n// //               ...whiteboard,\n// //               annotated: annotationsRes.data.length > 0, // True if there are annotations\n// //             };\n// //           })\n// //         );\n\n// //         setWhiteboards(whiteboardsWithStatus);\n// //       } catch (error) {\n// //         console.error(\"Error fetching whiteboards with annotations:\", error);\n// //       }\n// //     };\n\n// //     fetchWhiteboardsWithAnnotations();\n// //   }, []);\n\n// //   return (\n// //     <WhiteboardContext.Provider value={{ whiteboards, setWhiteboards }}>\n// //       {children}\n// //     </WhiteboardContext.Provider>\n// //   );\n// // };\n\n// // // Custom hook to use the whiteboard context\n// // export const useWhiteboard = () => {\n// //   return useContext(WhiteboardContext);\n// // };\n\n// // src/context/WhiteboardContext.js\n// import React, { createContext, useContext, useEffect, useState } from \"react\";\n// import axios from \"axios\";\n\n// // Create context\n// const WhiteboardContext = createContext();\n\n// // Create a provider component\n// export const WhiteboardProvider = ({ children }) => {\n//   const [whiteboards, setWhiteboards] = useState([]);\n\n//   useEffect(() => {\n//     // Function to fetch whiteboards and check for user-specific annotations\n//     const fetchWhiteboardsWithAnnotations = async () => {\n//       try {\n//         // Fetch all whiteboards for the logged-in user\n//         const whiteboardsRes = await axios.get(\n//           \"http://localhost:5001/whiteboards\",\n//           { withCredentials: true }\n//         );\n\n//         // Check for user-specific annotations for each whiteboard\n//         const whiteboardsWithStatus = await Promise.all(\n//           whiteboardsRes.data.map(async (whiteboard) => {\n//             // Fetch annotations specific to the logged-in user for this whiteboard\n//             const annotationsRes = await axios.get(\n//               `http://localhost:5001/whiteboards/${whiteboard.id}/annotations`,\n//               { withCredentials: true }\n//             );\n\n//             return {\n//               ...whiteboard,\n//               annotated: annotationsRes.data.length > 0, // True if user has annotations on this whiteboard\n//             };\n//           })\n//         );\n\n//         setWhiteboards(whiteboardsWithStatus);\n//       } catch (error) {\n//         console.error(\"Error fetching whiteboards with annotations:\", error);\n//       }\n//     };\n\n//     fetchWhiteboardsWithAnnotations();\n//   }, []);\n\n//   return (\n//     <WhiteboardContext.Provider value={{ whiteboards, setWhiteboards }}>\n//       {children}\n//     </WhiteboardContext.Provider>\n//   );\n// };\n\n// // Custom hook to use the whiteboard context\n// export const useWhiteboard = () => {\n//   return useContext(WhiteboardContext);\n// };\n\n// src/context/WhiteboardContext.js\n// import React, { createContext, useContext, useEffect, useState } from \"react\";\n// import axios from \"axios\";\n\n// // Create context\n// const WhiteboardContext = createContext();\n\n// // Create a provider component\n// export const WhiteboardProvider = ({ children }) => {\n//   const [whiteboards, setWhiteboards] = useState([]);\n\n//   // Function to fetch whiteboards with user-specific annotation status\n//   const refreshWhiteboards = async () => {\n//     try {\n//       const whiteboardsRes = await axios.get(\n//         \"http://localhost:5001/whiteboards\",\n//         {\n//           withCredentials: true,\n//         }\n//       );\n\n//       const whiteboardsWithStatus = await Promise.all(\n//         whiteboardsRes.data\n//           .filter((whiteboard) => whiteboard.id !== \"default_id\")\n//           .map(async (whiteboard) => {\n//             const annotationsRes = await axios.get(\n//               `http://localhost:5001/whiteboards/${whiteboard.id}/annotations`,\n//               { withCredentials: true }\n//             );\n//             return {\n//               ...whiteboard,\n//               annotated: annotationsRes.data.length > 0,\n//             };\n//           })\n//       );\n\n//       setWhiteboards(whiteboardsWithStatus);\n//     } catch (error) {\n//       console.error(\"Error fetching whiteboards with annotations:\", error);\n//     }\n//   };\n\n//   // Fetch whiteboards initially on context load\n//   useEffect(() => {\n//     refreshWhiteboards();\n//   }, []);\n\n//   return (\n//     <WhiteboardContext.Provider value={{ whiteboards, refreshWhiteboards }}>\n//       {children}\n//     </WhiteboardContext.Provider>\n//   );\n// };\n\n// // Custom hook to use the whiteboard context\n// export const useWhiteboard = () => {\n//   return useContext(WhiteboardContext);\n// };\n\n// src/context/WhiteboardContext.js\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst WhiteboardContext = createContext();\n\nexport const WhiteboardProvider = ({ children }) => {\n  const [whiteboards, setWhiteboards] = useState([]);\n  const [userId, setUserId] = useState(null);\n\n  useEffect(() => {\n    if (!userId) return; // Don't fetch if user is not logged in\n\n    const fetchWhiteboardsWithAnnotations = async () => {\n      try {\n        const whiteboardsRes = await axios.get(\n          \"http://localhost:5001/whiteboards\",\n          { withCredentials: true }\n        );\n\n        const whiteboardsWithStatus = await Promise.all(\n          whiteboardsRes.data\n            .filter((whiteboard) => whiteboard.id !== \"defaultId\")\n            .map(async (whiteboard) => {\n              const annotationsRes = await axios.get(\n                `http://localhost:5001/whiteboards/${whiteboard.id}/annotations`,\n                { withCredentials: true }\n              );\n              return {\n                ...whiteboard,\n                annotated: annotationsRes.data.length > 0,\n              };\n            })\n        );\n\n        setWhiteboards(whiteboardsWithStatus);\n      } catch (error) {\n        console.error(\"Error fetching whiteboards with annotations:\", error);\n      }\n    };\n\n    fetchWhiteboardsWithAnnotations();\n  }, [userId]); // Refetch whiteboards whenever the user ID changes\n\n  return (\n    <WhiteboardContext.Provider\n      value={{ whiteboards, setWhiteboards, setUserId }}\n    >\n      {children}\n    </WhiteboardContext.Provider>\n  );\n};\n\nexport const useWhiteboard = () => {\n  return useContext(WhiteboardContext);\n};\n"],"mappings":";;;AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,iBAAiB,gBAAGP,aAAa,CAAC,CAAC;AAEzC,OAAO,MAAMQ,kBAAkB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACd,IAAI,CAACW,MAAM,EAAE,OAAO,CAAC;;IAErB,MAAME,+BAA+B,GAAG,MAAAA,CAAA,KAAY;MAClD,IAAI;QACF,MAAMC,cAAc,GAAG,MAAMZ,KAAK,CAACa,GAAG,CACpC,mCAAmC,EACnC;UAAEC,eAAe,EAAE;QAAK,CAC1B,CAAC;QAED,MAAMC,qBAAqB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC7CL,cAAc,CAACM,IAAI,CAChBC,MAAM,CAAEC,UAAU,IAAKA,UAAU,CAACC,EAAE,KAAK,WAAW,CAAC,CACrDC,GAAG,CAAC,MAAOF,UAAU,IAAK;UACzB,MAAMG,cAAc,GAAG,MAAMvB,KAAK,CAACa,GAAG,CACpC,qCAAqCO,UAAU,CAACC,EAAE,cAAc,EAChE;YAAEP,eAAe,EAAE;UAAK,CAC1B,CAAC;UACD,OAAO;YACL,GAAGM,UAAU;YACbI,SAAS,EAAED,cAAc,CAACL,IAAI,CAACO,MAAM,GAAG;UAC1C,CAAC;QACH,CAAC,CACL,CAAC;QAEDjB,cAAc,CAACO,qBAAqB,CAAC;MACvC,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;MACtE;IACF,CAAC;IAEDf,+BAA+B,CAAC,CAAC;EACnC,CAAC,EAAE,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,oBACEP,OAAA,CAACC,iBAAiB,CAACyB,QAAQ;IACzBC,KAAK,EAAE;MAAEtB,WAAW;MAAEC,cAAc;MAAEE;IAAU,CAAE;IAAAL,QAAA,EAEjDA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAEjC,CAAC;AAAC3B,EAAA,CA7CWF,kBAAkB;AAAA8B,EAAA,GAAlB9B,kBAAkB;AA+C/B,OAAO,MAAM+B,aAAa,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACjC,OAAOvC,UAAU,CAACM,iBAAiB,CAAC;AACtC,CAAC;AAACiC,GAAA,CAFWD,aAAa;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}