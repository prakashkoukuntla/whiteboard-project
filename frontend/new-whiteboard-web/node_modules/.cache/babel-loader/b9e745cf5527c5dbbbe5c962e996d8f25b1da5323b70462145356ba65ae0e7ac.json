{"ast":null,"code":"var _jsxFileName = \"/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/pages/WhiteboardLabelingPage.js\",\n  _s = $RefreshSig$();\n// // src/pages/WhiteboardLabelingPage.js\n// import React, { useState, useRef, useEffect } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import {\n//   Container,\n//   Typography,\n//   IconButton,\n//   TextField,\n//   Paper,\n//   Button,\n// } from \"@mui/material\";\n// import { ArrowBack } from \"@mui/icons-material\";\n// import { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\n// import useImage from \"use-image\";\n\n// const whiteboards = [\n//   {\n//     id: \"wb_456\",\n//     imageUrl: \"https://via.placeholder.com/1200x800\",\n//     annotated: true,\n//   },\n//   {\n//     id: \"wb_457\",\n//     imageUrl: \"https://via.placeholder.com/1200x800\",\n//     annotated: false,\n//   },\n//   {\n//     id: \"wb_458\",\n//     imageUrl: \"https://via.placeholder.com/1200x800\",\n//     annotated: false,\n//   },\n// ];\n\n// const confidenceColors = [\n//   \"rgba(0, 255, 0, 0.5)\", // High Confidence (Green)\n//   \"rgba(255, 165, 0, 0.5)\", // Medium Confidence (Orange)\n//   \"rgba(255, 0, 0, 0.5)\", // Low Confidence (Red)\n// ];\n\n// function WhiteboardLabelingPage() {\n//   const { id } = useParams();\n//   const navigate = useNavigate();\n//   const whiteboard = whiteboards.find((wb) => wb.id === id);\n//   const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n\n//   const [annotations, setAnnotations] = useState([]);\n//   const [newAnnotation, setNewAnnotation] = useState(null);\n//   const [activeAnnotation, setActiveAnnotation] = useState(null);\n//   const [transcription, setTranscription] = useState(\"\");\n//   const [panelWidth, setPanelWidth] = useState(70);\n\n//   const transcriptionRef = useRef(null); // Reference for focusing the input\n\n//   useEffect(() => {\n//     if (activeAnnotation !== null && transcriptionRef.current) {\n//       transcriptionRef.current.focus(); // Focus the input when a new annotation is active\n//     }\n//   }, [activeAnnotation]); // Run when activeAnnotation changes\n\n//   const handleMouseDown = (e) => {\n//     const { x, y } = e.target.getStage().getPointerPosition();\n//     setNewAnnotation({\n//       x,\n//       y,\n//       width: 0,\n//       height: 0,\n//       confidenceLevel: 0,\n//       transcription: \"\",\n//     });\n//   };\n\n//   const handleMouseMove = (e) => {\n//     if (!newAnnotation) return;\n//     const stage = e.target.getStage();\n//     const pointerPosition = stage.getPointerPosition();\n//     setNewAnnotation({\n//       ...newAnnotation,\n//       width: pointerPosition.x - newAnnotation.x,\n//       height: pointerPosition.y - newAnnotation.y,\n//     });\n//   };\n\n//   const handleMouseUp = () => {\n//     if (newAnnotation) {\n//       // Add the new annotation to the list\n//       setAnnotations((prevAnnotations) => {\n//         const updatedAnnotations = [...prevAnnotations, newAnnotation];\n//         return updatedAnnotations;\n//       });\n\n//       // Set the new annotation as active and open the transcription editor\n//       setActiveAnnotation(annotations.length); // Use the new annotation as active\n//       setTranscription(newAnnotation.transcription); // Load its transcription\n//       setNewAnnotation(null); // Reset the drawing state\n//     }\n//   };\n\n//   const handleAnnotationClick = (index) => {\n//     // Cycle the confidence level color (0 -> 1 -> 2 -> 0)\n//     const updatedAnnotations = [...annotations];\n//     const currentAnnotation = updatedAnnotations[index];\n\n//     // Increment the confidence level (cycling through 0, 1, 2)\n//     const nextConfidenceLevel =\n//       (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n\n//     // Update the annotation's confidence level\n//     updatedAnnotations[index] = {\n//       ...currentAnnotation,\n//       confidenceLevel: nextConfidenceLevel,\n//     };\n//     setAnnotations(updatedAnnotations);\n\n//     // Set active annotation to open the transcription editor\n//     setActiveAnnotation(index);\n//     setTranscription(updatedAnnotations[index].transcription);\n//   };\n\n//   const handleTranscriptionChange = (event) => {\n//     const updatedTranscription = event.target.value;\n//     setTranscription(updatedTranscription);\n\n//     // Auto-save the transcription when it changes\n//     setAnnotations((prevAnnotations) =>\n//       prevAnnotations.map((annotation, i) =>\n//         i === activeAnnotation\n//           ? { ...annotation, transcription: updatedTranscription }\n//           : annotation\n//       )\n//     );\n//   };\n\n//   const handleResize = (e) => {\n//     const newWidth = (e.clientX / window.innerWidth) * 100;\n//     setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n//   };\n\n//   // Handlers for navigating whiteboards\n//   const handleNext = () => {\n//     const currentIndex = whiteboards.findIndex((wb) => wb.id === id);\n//     const nextIndex = (currentIndex + 1) % whiteboards.length;\n//     navigate(`/label/${whiteboards[nextIndex].id}`);\n//   };\n\n//   const handlePrevious = () => {\n//     const currentIndex = whiteboards.findIndex((wb) => wb.id === id);\n//     const prevIndex =\n//       (currentIndex - 1 + whiteboards.length) % whiteboards.length;\n//     navigate(`/label/${whiteboards[prevIndex].id}`);\n//   };\n\n//   return (\n//     <Container\n//       maxWidth={false}\n//       style={{ height: \"100vh\", display: \"flex\", padding: 0 }}\n//     >\n//       {/* Whiteboard Section */}\n//       <div\n//         style={{\n//           width: `${panelWidth}%`,\n//           overflowY: \"auto\",\n//           position: \"relative\",\n//         }}\n//       >\n//         <IconButton\n//           onClick={() => navigate(\"/whiteboards\")}\n//           style={{\n//             position: \"absolute\",\n//             top: \"20px\",\n//             left: \"20px\",\n//             zIndex: 1000,\n//           }}\n//         >\n//           <ArrowBack fontSize=\"large\" />\n//         </IconButton>\n//         <Typography\n//           variant=\"h6\"\n//           style={{\n//             position: \"absolute\",\n//             top: \"20px\",\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             zIndex: 1000,\n//             opacity: 0.8,\n//             backgroundColor: \"white\",\n//             padding: \"5px 15px\",\n//             borderRadius: \"4px\",\n//           }}\n//         >\n//           Whiteboard ID: {id}\n//         </Typography>\n//         {whiteboard ? (\n//           <Stage\n//             width={1200}\n//             height={800}\n//             onMouseDown={handleMouseDown}\n//             onMouseMove={handleMouseMove}\n//             onMouseUp={handleMouseUp}\n//             style={{ margin: \"0 auto\" }}\n//           >\n//             <Layer>\n//               <KonvaImage image={image} width={1200} height={800} />\n//               {annotations.map((rect, i) => (\n//                 <Rect\n//                   key={i}\n//                   x={rect.x}\n//                   y={rect.y}\n//                   width={rect.width}\n//                   height={rect.height}\n//                   fill={confidenceColors[rect.confidenceLevel]} // Set color based on confidence level\n//                   onClick={() => handleAnnotationClick(i)}\n//                 />\n//               ))}\n//               {newAnnotation && (\n//                 <Rect\n//                   x={newAnnotation.x}\n//                   y={newAnnotation.y}\n//                   width={newAnnotation.width}\n//                   height={newAnnotation.height}\n//                   fill=\"rgba(0,0,255,0.5)\"\n//                 />\n//               )}\n//             </Layer>\n//           </Stage>\n//         ) : (\n//           <Typography color=\"error\">Whiteboard not found</Typography>\n//         )}\n\n//         {/* Previous and Next Buttons */}\n//         <Button\n//           variant=\"contained\"\n//           color=\"secondary\"\n//           onClick={handlePrevious}\n//           style={{\n//             position: \"fixed\",\n//             bottom: \"20px\",\n//             left: \"20px\",\n//             opacity: 0.7,\n//           }}\n//         >\n//           Previous Whiteboard\n//         </Button>\n//         <Button\n//           variant=\"contained\"\n//           color=\"secondary\"\n//           onClick={handleNext}\n//           style={{\n//             position: \"fixed\",\n//             bottom: \"20px\",\n//             right: \"20px\",\n//             opacity: 0.7,\n//           }}\n//         >\n//           Next Whiteboard\n//         </Button>\n//       </div>\n\n//       {/* Divider for Resizing */}\n//       <div\n//         onMouseDown={(e) => {\n//           document.addEventListener(\"mousemove\", handleResize);\n//           document.addEventListener(\"mouseup\", () => {\n//             document.removeEventListener(\"mousemove\", handleResize);\n//           });\n//         }}\n//         style={{\n//           width: \"5px\",\n//           cursor: \"col-resize\",\n//           backgroundColor: \"#ccc\",\n//         }}\n//       />\n\n//       {/* Transcription Panel */}\n//       {activeAnnotation !== null && (\n//         <Paper\n//           style={{\n//             width: `${100 - panelWidth}%`,\n//             padding: \"20px\",\n//             display: \"flex\",\n//             flexDirection: \"column\",\n//             alignItems: \"flex-start\",\n//             boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n//             overflowY: \"auto\",\n//           }}\n//           square\n//         >\n//           <Typography variant=\"h6\" gutterBottom>\n//             Edit Transcription\n//           </Typography>\n//           <TextField\n//             fullWidth\n//             label=\"Transcription\"\n//             value={annotations[activeAnnotation]?.transcription || \"\"}\n//             onChange={handleTranscriptionChange}\n//             multiline\n//             rows={4}\n//             variant=\"outlined\"\n//             inputRef={transcriptionRef} // Automatically focuses when active annotation changes\n//             autoFocus // Automatically focuses the TextField\n//           />\n//         </Paper>\n//       )}\n//     </Container>\n//   );\n// }\n\n// export default WhiteboardLabelingPage;\n\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Container, Typography, IconButton, TextField, Paper, Button, CircularProgress, Snackbar } from \"@mui/material\";\nimport { ArrowBack } from \"@mui/icons-material\";\nimport { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\nimport useImage from \"use-image\";\nimport axios from \"axios\";\nimport { useWhiteboard } from \"../context/WhiteboardContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst confidenceColors = [\"rgba(0, 255, 0, 0.5)\", \"rgba(255, 165, 0, 0.5)\", \"rgba(255, 0, 0, 0.5)\"];\nfunction WhiteboardLabelingPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const {\n    whiteboards\n  } = useWhiteboard();\n  const whiteboard = whiteboards.find(wb => wb.id === id);\n  const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n  const [annotations, setAnnotations] = useState([]);\n  const [newAnnotation, setNewAnnotation] = useState(null);\n  const [activeAnnotation, setActiveAnnotation] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n  const [panelWidth, setPanelWidth] = useState(70);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const transcriptionRef = useRef(null);\n  useEffect(() => {\n    if (activeAnnotation !== null && transcriptionRef.current) {\n      transcriptionRef.current.focus();\n    }\n  }, [activeAnnotation]);\n  useEffect(() => {\n    async function fetchAnnotations() {\n      setLoading(true);\n      try {\n        const response = await axios.get(`/whiteboards/${id}/annotations`);\n        setAnnotations(response.data);\n      } catch (error) {\n        console.error(\"Error fetching annotations:\", error);\n        setError(\"Failed to load annotations. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    }\n    if (whiteboard) fetchAnnotations();\n  }, [id, whiteboard]);\n  const handleMouseDown = useCallback(e => {\n    const {\n      x,\n      y\n    } = e.target.getStage().getPointerPosition();\n    setNewAnnotation({\n      x,\n      y,\n      width: 0,\n      height: 0,\n      confidenceLevel: 0,\n      transcription: \"\"\n    });\n  }, []);\n  const handleMouseMove = useCallback(e => {\n    if (!newAnnotation) return;\n    const stage = e.target.getStage();\n    const pointerPosition = stage.getPointerPosition();\n    setNewAnnotation(prev => ({\n      ...prev,\n      width: pointerPosition.x - prev.x,\n      height: pointerPosition.y - prev.y\n    }));\n  }, [newAnnotation]);\n  const handleMouseUp = useCallback(async () => {\n    if (newAnnotation) {\n      try {\n        const response = await axios.post(`/whiteboards/${id}/annotations`, newAnnotation);\n        setAnnotations(prev => [...prev, response.data]);\n        setNewAnnotation(null);\n      } catch (error) {\n        console.error(\"Error saving annotation:\", error);\n        setError(\"Failed to save annotation. Please try again.\");\n      }\n    }\n  }, [newAnnotation, id]);\n  const handleAnnotationClick = useCallback(async index => {\n    const updatedAnnotations = [...annotations];\n    const currentAnnotation = updatedAnnotations[index];\n    const nextConfidenceLevel = (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n    try {\n      await axios.patch(`/annotations/${currentAnnotation._id}`, {\n        confidenceLevel: nextConfidenceLevel\n      });\n      updatedAnnotations[index] = {\n        ...currentAnnotation,\n        confidenceLevel: nextConfidenceLevel\n      };\n      setAnnotations(updatedAnnotations);\n      setActiveAnnotation(index);\n      setTranscription(updatedAnnotations[index].transcription);\n    } catch (error) {\n      console.error(\"Error updating confidence level:\", error);\n      setError(\"Failed to update confidence level. Please try again.\");\n    }\n  }, [annotations]);\n  const handleTranscriptionChange = useCallback(event => {\n    var _annotations$activeAn;\n    const updatedTranscription = event.target.value;\n    setTranscription(updatedTranscription);\n    setAnnotations(prevAnnotations => prevAnnotations.map((annotation, i) => i === activeAnnotation ? {\n      ...annotation,\n      transcription: updatedTranscription\n    } : annotation));\n    const annotationId = (_annotations$activeAn = annotations[activeAnnotation]) === null || _annotations$activeAn === void 0 ? void 0 : _annotations$activeAn._id;\n    if (annotationId) {\n      axios.patch(`/annotations/${annotationId}`, {\n        transcription: updatedTranscription\n      }).catch(error => {\n        console.error(\"Error updating transcription:\", error);\n        setError(\"Failed to update transcription. Please try again.\");\n      });\n    }\n  }, [activeAnnotation, annotations]);\n  const handleResize = useCallback(e => {\n    const newWidth = e.clientX / window.innerWidth * 100;\n    setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n  }, []);\n  const handleNext = useCallback(() => {\n    const currentIndex = whiteboards.findIndex(wb => wb.id === id);\n    const nextIndex = (currentIndex + 1) % whiteboards.length;\n    navigate(`/label/${whiteboards[nextIndex].id}`);\n  }, [id, whiteboards, navigate]);\n  const handlePrevious = useCallback(() => {\n    const currentIndex = whiteboards.findIndex(wb => wb.id === id);\n    const prevIndex = (currentIndex - 1 + whiteboards.length) % whiteboards.length;\n    navigate(`/label/${whiteboards[prevIndex].id}`);\n  }, [id, whiteboards, navigate]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: false,\n    style: {\n      height: \"100vh\",\n      display: \"flex\",\n      padding: 0\n    },\n    children: /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: !!error,\n      autoHideDuration: 6000,\n      onClose: () => setError(null),\n      message: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 492,\n    columnNumber: 5\n  }, this);\n}\n_s(WhiteboardLabelingPage, \"57PRluhu5Ec1H8Sda6iWKSOwAPA=\", false, function () {\n  return [useParams, useNavigate, useWhiteboard, useImage];\n});\n_c = WhiteboardLabelingPage;\nexport default WhiteboardLabelingPage;\nvar _c;\n$RefreshReg$(_c, \"WhiteboardLabelingPage\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","useParams","useNavigate","Container","Typography","IconButton","TextField","Paper","Button","CircularProgress","Snackbar","ArrowBack","Stage","Layer","Image","KonvaImage","Rect","useImage","axios","useWhiteboard","jsxDEV","_jsxDEV","confidenceColors","WhiteboardLabelingPage","_s","id","navigate","whiteboards","whiteboard","find","wb","image","imageUrl","annotations","setAnnotations","newAnnotation","setNewAnnotation","activeAnnotation","setActiveAnnotation","transcription","setTranscription","panelWidth","setPanelWidth","loading","setLoading","error","setError","transcriptionRef","current","focus","fetchAnnotations","response","get","data","console","handleMouseDown","e","x","y","target","getStage","getPointerPosition","width","height","confidenceLevel","handleMouseMove","stage","pointerPosition","prev","handleMouseUp","post","handleAnnotationClick","index","updatedAnnotations","currentAnnotation","nextConfidenceLevel","length","patch","_id","handleTranscriptionChange","event","_annotations$activeAn","updatedTranscription","value","prevAnnotations","map","annotation","i","annotationId","catch","handleResize","newWidth","clientX","window","innerWidth","Math","max","min","handleNext","currentIndex","findIndex","nextIndex","handlePrevious","prevIndex","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","style","display","padding","children","open","autoHideDuration","onClose","message","_c","$RefreshReg$"],"sources":["/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/pages/WhiteboardLabelingPage.js"],"sourcesContent":["// // src/pages/WhiteboardLabelingPage.js\n// import React, { useState, useRef, useEffect } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import {\n//   Container,\n//   Typography,\n//   IconButton,\n//   TextField,\n//   Paper,\n//   Button,\n// } from \"@mui/material\";\n// import { ArrowBack } from \"@mui/icons-material\";\n// import { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\n// import useImage from \"use-image\";\n\n// const whiteboards = [\n//   {\n//     id: \"wb_456\",\n//     imageUrl: \"https://via.placeholder.com/1200x800\",\n//     annotated: true,\n//   },\n//   {\n//     id: \"wb_457\",\n//     imageUrl: \"https://via.placeholder.com/1200x800\",\n//     annotated: false,\n//   },\n//   {\n//     id: \"wb_458\",\n//     imageUrl: \"https://via.placeholder.com/1200x800\",\n//     annotated: false,\n//   },\n// ];\n\n// const confidenceColors = [\n//   \"rgba(0, 255, 0, 0.5)\", // High Confidence (Green)\n//   \"rgba(255, 165, 0, 0.5)\", // Medium Confidence (Orange)\n//   \"rgba(255, 0, 0, 0.5)\", // Low Confidence (Red)\n// ];\n\n// function WhiteboardLabelingPage() {\n//   const { id } = useParams();\n//   const navigate = useNavigate();\n//   const whiteboard = whiteboards.find((wb) => wb.id === id);\n//   const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n\n//   const [annotations, setAnnotations] = useState([]);\n//   const [newAnnotation, setNewAnnotation] = useState(null);\n//   const [activeAnnotation, setActiveAnnotation] = useState(null);\n//   const [transcription, setTranscription] = useState(\"\");\n//   const [panelWidth, setPanelWidth] = useState(70);\n\n//   const transcriptionRef = useRef(null); // Reference for focusing the input\n\n//   useEffect(() => {\n//     if (activeAnnotation !== null && transcriptionRef.current) {\n//       transcriptionRef.current.focus(); // Focus the input when a new annotation is active\n//     }\n//   }, [activeAnnotation]); // Run when activeAnnotation changes\n\n//   const handleMouseDown = (e) => {\n//     const { x, y } = e.target.getStage().getPointerPosition();\n//     setNewAnnotation({\n//       x,\n//       y,\n//       width: 0,\n//       height: 0,\n//       confidenceLevel: 0,\n//       transcription: \"\",\n//     });\n//   };\n\n//   const handleMouseMove = (e) => {\n//     if (!newAnnotation) return;\n//     const stage = e.target.getStage();\n//     const pointerPosition = stage.getPointerPosition();\n//     setNewAnnotation({\n//       ...newAnnotation,\n//       width: pointerPosition.x - newAnnotation.x,\n//       height: pointerPosition.y - newAnnotation.y,\n//     });\n//   };\n\n//   const handleMouseUp = () => {\n//     if (newAnnotation) {\n//       // Add the new annotation to the list\n//       setAnnotations((prevAnnotations) => {\n//         const updatedAnnotations = [...prevAnnotations, newAnnotation];\n//         return updatedAnnotations;\n//       });\n\n//       // Set the new annotation as active and open the transcription editor\n//       setActiveAnnotation(annotations.length); // Use the new annotation as active\n//       setTranscription(newAnnotation.transcription); // Load its transcription\n//       setNewAnnotation(null); // Reset the drawing state\n//     }\n//   };\n\n//   const handleAnnotationClick = (index) => {\n//     // Cycle the confidence level color (0 -> 1 -> 2 -> 0)\n//     const updatedAnnotations = [...annotations];\n//     const currentAnnotation = updatedAnnotations[index];\n\n//     // Increment the confidence level (cycling through 0, 1, 2)\n//     const nextConfidenceLevel =\n//       (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n\n//     // Update the annotation's confidence level\n//     updatedAnnotations[index] = {\n//       ...currentAnnotation,\n//       confidenceLevel: nextConfidenceLevel,\n//     };\n//     setAnnotations(updatedAnnotations);\n\n//     // Set active annotation to open the transcription editor\n//     setActiveAnnotation(index);\n//     setTranscription(updatedAnnotations[index].transcription);\n//   };\n\n//   const handleTranscriptionChange = (event) => {\n//     const updatedTranscription = event.target.value;\n//     setTranscription(updatedTranscription);\n\n//     // Auto-save the transcription when it changes\n//     setAnnotations((prevAnnotations) =>\n//       prevAnnotations.map((annotation, i) =>\n//         i === activeAnnotation\n//           ? { ...annotation, transcription: updatedTranscription }\n//           : annotation\n//       )\n//     );\n//   };\n\n//   const handleResize = (e) => {\n//     const newWidth = (e.clientX / window.innerWidth) * 100;\n//     setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n//   };\n\n//   // Handlers for navigating whiteboards\n//   const handleNext = () => {\n//     const currentIndex = whiteboards.findIndex((wb) => wb.id === id);\n//     const nextIndex = (currentIndex + 1) % whiteboards.length;\n//     navigate(`/label/${whiteboards[nextIndex].id}`);\n//   };\n\n//   const handlePrevious = () => {\n//     const currentIndex = whiteboards.findIndex((wb) => wb.id === id);\n//     const prevIndex =\n//       (currentIndex - 1 + whiteboards.length) % whiteboards.length;\n//     navigate(`/label/${whiteboards[prevIndex].id}`);\n//   };\n\n//   return (\n//     <Container\n//       maxWidth={false}\n//       style={{ height: \"100vh\", display: \"flex\", padding: 0 }}\n//     >\n//       {/* Whiteboard Section */}\n//       <div\n//         style={{\n//           width: `${panelWidth}%`,\n//           overflowY: \"auto\",\n//           position: \"relative\",\n//         }}\n//       >\n//         <IconButton\n//           onClick={() => navigate(\"/whiteboards\")}\n//           style={{\n//             position: \"absolute\",\n//             top: \"20px\",\n//             left: \"20px\",\n//             zIndex: 1000,\n//           }}\n//         >\n//           <ArrowBack fontSize=\"large\" />\n//         </IconButton>\n//         <Typography\n//           variant=\"h6\"\n//           style={{\n//             position: \"absolute\",\n//             top: \"20px\",\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             zIndex: 1000,\n//             opacity: 0.8,\n//             backgroundColor: \"white\",\n//             padding: \"5px 15px\",\n//             borderRadius: \"4px\",\n//           }}\n//         >\n//           Whiteboard ID: {id}\n//         </Typography>\n//         {whiteboard ? (\n//           <Stage\n//             width={1200}\n//             height={800}\n//             onMouseDown={handleMouseDown}\n//             onMouseMove={handleMouseMove}\n//             onMouseUp={handleMouseUp}\n//             style={{ margin: \"0 auto\" }}\n//           >\n//             <Layer>\n//               <KonvaImage image={image} width={1200} height={800} />\n//               {annotations.map((rect, i) => (\n//                 <Rect\n//                   key={i}\n//                   x={rect.x}\n//                   y={rect.y}\n//                   width={rect.width}\n//                   height={rect.height}\n//                   fill={confidenceColors[rect.confidenceLevel]} // Set color based on confidence level\n//                   onClick={() => handleAnnotationClick(i)}\n//                 />\n//               ))}\n//               {newAnnotation && (\n//                 <Rect\n//                   x={newAnnotation.x}\n//                   y={newAnnotation.y}\n//                   width={newAnnotation.width}\n//                   height={newAnnotation.height}\n//                   fill=\"rgba(0,0,255,0.5)\"\n//                 />\n//               )}\n//             </Layer>\n//           </Stage>\n//         ) : (\n//           <Typography color=\"error\">Whiteboard not found</Typography>\n//         )}\n\n//         {/* Previous and Next Buttons */}\n//         <Button\n//           variant=\"contained\"\n//           color=\"secondary\"\n//           onClick={handlePrevious}\n//           style={{\n//             position: \"fixed\",\n//             bottom: \"20px\",\n//             left: \"20px\",\n//             opacity: 0.7,\n//           }}\n//         >\n//           Previous Whiteboard\n//         </Button>\n//         <Button\n//           variant=\"contained\"\n//           color=\"secondary\"\n//           onClick={handleNext}\n//           style={{\n//             position: \"fixed\",\n//             bottom: \"20px\",\n//             right: \"20px\",\n//             opacity: 0.7,\n//           }}\n//         >\n//           Next Whiteboard\n//         </Button>\n//       </div>\n\n//       {/* Divider for Resizing */}\n//       <div\n//         onMouseDown={(e) => {\n//           document.addEventListener(\"mousemove\", handleResize);\n//           document.addEventListener(\"mouseup\", () => {\n//             document.removeEventListener(\"mousemove\", handleResize);\n//           });\n//         }}\n//         style={{\n//           width: \"5px\",\n//           cursor: \"col-resize\",\n//           backgroundColor: \"#ccc\",\n//         }}\n//       />\n\n//       {/* Transcription Panel */}\n//       {activeAnnotation !== null && (\n//         <Paper\n//           style={{\n//             width: `${100 - panelWidth}%`,\n//             padding: \"20px\",\n//             display: \"flex\",\n//             flexDirection: \"column\",\n//             alignItems: \"flex-start\",\n//             boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n//             overflowY: \"auto\",\n//           }}\n//           square\n//         >\n//           <Typography variant=\"h6\" gutterBottom>\n//             Edit Transcription\n//           </Typography>\n//           <TextField\n//             fullWidth\n//             label=\"Transcription\"\n//             value={annotations[activeAnnotation]?.transcription || \"\"}\n//             onChange={handleTranscriptionChange}\n//             multiline\n//             rows={4}\n//             variant=\"outlined\"\n//             inputRef={transcriptionRef} // Automatically focuses when active annotation changes\n//             autoFocus // Automatically focuses the TextField\n//           />\n//         </Paper>\n//       )}\n//     </Container>\n//   );\n// }\n\n// export default WhiteboardLabelingPage;\n\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport {\n  Container,\n  Typography,\n  IconButton,\n  TextField,\n  Paper,\n  Button,\n  CircularProgress,\n  Snackbar,\n} from \"@mui/material\";\nimport { ArrowBack } from \"@mui/icons-material\";\nimport { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\nimport useImage from \"use-image\";\nimport axios from \"axios\";\nimport { useWhiteboard } from \"../context/WhiteboardContext\";\n\nconst confidenceColors = [\n  \"rgba(0, 255, 0, 0.5)\",\n  \"rgba(255, 165, 0, 0.5)\",\n  \"rgba(255, 0, 0, 0.5)\",\n];\n\nfunction WhiteboardLabelingPage() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const { whiteboards } = useWhiteboard();\n  const whiteboard = whiteboards.find((wb) => wb.id === id);\n  const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n\n  const [annotations, setAnnotations] = useState([]);\n  const [newAnnotation, setNewAnnotation] = useState(null);\n  const [activeAnnotation, setActiveAnnotation] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n  const [panelWidth, setPanelWidth] = useState(70);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const transcriptionRef = useRef(null);\n\n  useEffect(() => {\n    if (activeAnnotation !== null && transcriptionRef.current) {\n      transcriptionRef.current.focus();\n    }\n  }, [activeAnnotation]);\n\n  useEffect(() => {\n    async function fetchAnnotations() {\n      setLoading(true);\n      try {\n        const response = await axios.get(`/whiteboards/${id}/annotations`);\n        setAnnotations(response.data);\n      } catch (error) {\n        console.error(\"Error fetching annotations:\", error);\n        setError(\"Failed to load annotations. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    }\n    if (whiteboard) fetchAnnotations();\n  }, [id, whiteboard]);\n\n  const handleMouseDown = useCallback((e) => {\n    const { x, y } = e.target.getStage().getPointerPosition();\n    setNewAnnotation({\n      x,\n      y,\n      width: 0,\n      height: 0,\n      confidenceLevel: 0,\n      transcription: \"\",\n    });\n  }, []);\n\n  const handleMouseMove = useCallback(\n    (e) => {\n      if (!newAnnotation) return;\n      const stage = e.target.getStage();\n      const pointerPosition = stage.getPointerPosition();\n      setNewAnnotation((prev) => ({\n        ...prev,\n        width: pointerPosition.x - prev.x,\n        height: pointerPosition.y - prev.y,\n      }));\n    },\n    [newAnnotation]\n  );\n\n  const handleMouseUp = useCallback(async () => {\n    if (newAnnotation) {\n      try {\n        const response = await axios.post(\n          `/whiteboards/${id}/annotations`,\n          newAnnotation\n        );\n        setAnnotations((prev) => [...prev, response.data]);\n        setNewAnnotation(null);\n      } catch (error) {\n        console.error(\"Error saving annotation:\", error);\n        setError(\"Failed to save annotation. Please try again.\");\n      }\n    }\n  }, [newAnnotation, id]);\n\n  const handleAnnotationClick = useCallback(\n    async (index) => {\n      const updatedAnnotations = [...annotations];\n      const currentAnnotation = updatedAnnotations[index];\n      const nextConfidenceLevel =\n        (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n\n      try {\n        await axios.patch(`/annotations/${currentAnnotation._id}`, {\n          confidenceLevel: nextConfidenceLevel,\n        });\n\n        updatedAnnotations[index] = {\n          ...currentAnnotation,\n          confidenceLevel: nextConfidenceLevel,\n        };\n        setAnnotations(updatedAnnotations);\n        setActiveAnnotation(index);\n        setTranscription(updatedAnnotations[index].transcription);\n      } catch (error) {\n        console.error(\"Error updating confidence level:\", error);\n        setError(\"Failed to update confidence level. Please try again.\");\n      }\n    },\n    [annotations]\n  );\n\n  const handleTranscriptionChange = useCallback(\n    (event) => {\n      const updatedTranscription = event.target.value;\n      setTranscription(updatedTranscription);\n\n      setAnnotations((prevAnnotations) =>\n        prevAnnotations.map((annotation, i) =>\n          i === activeAnnotation\n            ? { ...annotation, transcription: updatedTranscription }\n            : annotation\n        )\n      );\n\n      const annotationId = annotations[activeAnnotation]?._id;\n      if (annotationId) {\n        axios\n          .patch(`/annotations/${annotationId}`, {\n            transcription: updatedTranscription,\n          })\n          .catch((error) => {\n            console.error(\"Error updating transcription:\", error);\n            setError(\"Failed to update transcription. Please try again.\");\n          });\n      }\n    },\n    [activeAnnotation, annotations]\n  );\n\n  const handleResize = useCallback((e) => {\n    const newWidth = (e.clientX / window.innerWidth) * 100;\n    setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n  }, []);\n\n  const handleNext = useCallback(() => {\n    const currentIndex = whiteboards.findIndex((wb) => wb.id === id);\n    const nextIndex = (currentIndex + 1) % whiteboards.length;\n    navigate(`/label/${whiteboards[nextIndex].id}`);\n  }, [id, whiteboards, navigate]);\n\n  const handlePrevious = useCallback(() => {\n    const currentIndex = whiteboards.findIndex((wb) => wb.id === id);\n    const prevIndex =\n      (currentIndex - 1 + whiteboards.length) % whiteboards.length;\n    navigate(`/label/${whiteboards[prevIndex].id}`);\n  }, [id, whiteboards, navigate]);\n\n  if (loading) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <Container\n      maxWidth={false}\n      style={{ height: \"100vh\", display: \"flex\", padding: 0 }}\n    >\n      {/* ... Rest of your JSX remains the same ... */}\n      <Snackbar\n        open={!!error}\n        autoHideDuration={6000}\n        onClose={() => setError(null)}\n        message={error}\n      />\n    </Container>\n  );\n}\n\nexport default WhiteboardLabelingPage;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}