{"ast":null,"code":"import React,{useEffect}from\"react\";import{useNavigate}from\"react-router-dom\";import{Container,Card,CardContent,Typography,CardMedia,Button,Box}from\"@mui/material\";import Grid2 from\"@mui/material/Grid2\";import DownloadIcon from\"@mui/icons-material/Download\";import{useWhiteboard}from\"../context/WhiteboardContext\";// Import the context hook\nimport Papa from\"papaparse\";import axios from\"axios\";// Function to fetch annotations and generate CSV\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const handleDownloadData=async()=>{try{// Fetch all whiteboards and their annotations\nconst whiteboardsRes=await axios.get(\"http://localhost:5001/whiteboards\",{withCredentials:true});// Collect annotation data for each whiteboard\nconst whiteboardChunks=await Promise.all(whiteboardsRes.data.map(async whiteboard=>{const annotationsRes=await axios.get(`http://localhost:5001/whiteboards/${whiteboard.id}/annotations`,{withCredentials:true});// Map each annotation to the desired CSV format\nreturn annotationsRes.data.map(chunk=>({whiteboard_id:whiteboard.id,image_url:whiteboard.imageUrl,x:chunk.x,y:chunk.y,width:chunk.width,height:chunk.height,transcription:chunk.transcription,confidence_level:chunk.confidenceLevel}));}));// Flatten the array of arrays into a single array\nconst allChunks=whiteboardChunks.flat();// Convert data to CSV format\nconst csv=Papa.unparse(allChunks);// Create a blob from the CSV and trigger download\nconst blob=new Blob([csv],{type:\"text/csv;charset=utf-8;\"});const url=URL.createObjectURL(blob);const link=document.createElement(\"a\");link.href=url;link.setAttribute(\"download\",\"labeled_whiteboards.csv\");document.body.appendChild(link);link.click();document.body.removeChild(link);URL.revokeObjectURL(url);}catch(error){console.error(\"Error downloading data:\",error);}};function WhiteboardSelectionPage(){const navigate=useNavigate();const{whiteboards,refreshWhiteboards}=useWhiteboard();useEffect(()=>{refreshWhiteboards();},[refreshWhiteboards]);const handleCardClick=id=>{navigate(`/label/${id}`);};return/*#__PURE__*/_jsxs(Container,{maxWidth:\"md\",style:{marginTop:\"20px\",position:\"relative\"},children:[/*#__PURE__*/_jsxs(Box,{display:\"flex\",alignItems:\"center\",justifyContent:\"space-between\",mb:2,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h4\",gutterBottom:true,children:\"Select a Whiteboard\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",startIcon:/*#__PURE__*/_jsx(DownloadIcon,{}),onClick:handleDownloadData,children:\"Download Data\"})]}),/*#__PURE__*/_jsx(Grid2,{container:true,spacing:4,children:whiteboards.map(whiteboard=>/*#__PURE__*/_jsx(Grid2,{xs:12,sm:6,md:4,children:/*#__PURE__*/_jsxs(Card,{onClick:()=>handleCardClick(whiteboard.id),style:{cursor:\"pointer\",maxWidth:250},children:[/*#__PURE__*/_jsx(CardMedia,{component:\"img\",height:\"100\",image:whiteboard.imageUrl,alt:`Whiteboard ${whiteboard.id}`}),/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:`Whiteboard ID: ${whiteboard.id}`}),/*#__PURE__*/_jsx(Typography,{color:whiteboard.annotated?\"primary\":\"textSecondary\",children:whiteboard.annotated?\"Annotated\":\"Not Annotated\"})]})]})},whiteboard.id))})]});}export default WhiteboardSelectionPage;","map":{"version":3,"names":["React","useEffect","useNavigate","Container","Card","CardContent","Typography","CardMedia","Button","Box","Grid2","DownloadIcon","useWhiteboard","Papa","axios","jsx","_jsx","jsxs","_jsxs","handleDownloadData","whiteboardsRes","get","withCredentials","whiteboardChunks","Promise","all","data","map","whiteboard","annotationsRes","id","chunk","whiteboard_id","image_url","imageUrl","x","y","width","height","transcription","confidence_level","confidenceLevel","allChunks","flat","csv","unparse","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","revokeObjectURL","error","console","WhiteboardSelectionPage","navigate","whiteboards","refreshWhiteboards","handleCardClick","maxWidth","style","marginTop","position","children","display","alignItems","justifyContent","mb","variant","gutterBottom","color","startIcon","onClick","container","spacing","xs","sm","md","cursor","component","image","alt","annotated"],"sources":["/Users/prakashkoukuntla/Whiteboard-Project/frontend/new-whiteboard-web/src/pages/WhiteboardSelectionPage.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Container,\n  Card,\n  CardContent,\n  Typography,\n  CardMedia,\n  Button,\n  Box,\n} from \"@mui/material\";\nimport Grid2 from \"@mui/material/Grid2\";\nimport DownloadIcon from \"@mui/icons-material/Download\";\nimport { useWhiteboard } from \"../context/WhiteboardContext\"; // Import the context hook\nimport Papa from \"papaparse\";\nimport axios from \"axios\";\n\n// Function to fetch annotations and generate CSV\nconst handleDownloadData = async () => {\n  try {\n    // Fetch all whiteboards and their annotations\n    const whiteboardsRes = await axios.get(\n      \"http://localhost:5001/whiteboards\",\n      { withCredentials: true }\n    );\n\n    // Collect annotation data for each whiteboard\n    const whiteboardChunks = await Promise.all(\n      whiteboardsRes.data.map(async (whiteboard) => {\n        const annotationsRes = await axios.get(\n          `http://localhost:5001/whiteboards/${whiteboard.id}/annotations`,\n          { withCredentials: true }\n        );\n\n        // Map each annotation to the desired CSV format\n        return annotationsRes.data.map((chunk) => ({\n          whiteboard_id: whiteboard.id,\n          image_url: whiteboard.imageUrl,\n          x: chunk.x,\n          y: chunk.y,\n          width: chunk.width,\n          height: chunk.height,\n          transcription: chunk.transcription,\n          confidence_level: chunk.confidenceLevel,\n        }));\n      })\n    );\n\n    // Flatten the array of arrays into a single array\n    const allChunks = whiteboardChunks.flat();\n\n    // Convert data to CSV format\n    const csv = Papa.unparse(allChunks);\n\n    // Create a blob from the CSV and trigger download\n    const blob = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.setAttribute(\"download\", \"labeled_whiteboards.csv\");\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error(\"Error downloading data:\", error);\n  }\n};\n\nfunction WhiteboardSelectionPage() {\n  const navigate = useNavigate();\n  const { whiteboards, refreshWhiteboards } = useWhiteboard();\n\n  useEffect(() => {\n    refreshWhiteboards();\n  }, [refreshWhiteboards]);\n\n  const handleCardClick = (id) => {\n    navigate(`/label/${id}`);\n  };\n\n  return (\n    <Container\n      maxWidth=\"md\"\n      style={{ marginTop: \"20px\", position: \"relative\" }}\n    >\n      {/* Flex container to align title and button */}\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n        mb={2}\n      >\n        <Typography variant=\"h4\" gutterBottom>\n          Select a Whiteboard\n        </Typography>\n\n        {/* Download Data Button */}\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={<DownloadIcon />}\n          onClick={handleDownloadData}\n        >\n          Download Data\n        </Button>\n      </Box>\n\n      <Grid2 container spacing={4}>\n        {whiteboards.map((whiteboard) => (\n          <Grid2 xs={12} sm={6} md={4} key={whiteboard.id}>\n            <Card\n              onClick={() => handleCardClick(whiteboard.id)}\n              style={{ cursor: \"pointer\", maxWidth: 250 }}\n            >\n              <CardMedia\n                component=\"img\"\n                height=\"100\"\n                image={whiteboard.imageUrl}\n                alt={`Whiteboard ${whiteboard.id}`}\n              />\n              <CardContent>\n                <Typography variant=\"h6\">{`Whiteboard ID: ${whiteboard.id}`}</Typography>\n                <Typography\n                  color={whiteboard.annotated ? \"primary\" : \"textSecondary\"}\n                >\n                  {whiteboard.annotated ? \"Annotated\" : \"Not Annotated\"}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid2>\n        ))}\n      </Grid2>\n    </Container>\n  );\n}\n\nexport default WhiteboardSelectionPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}