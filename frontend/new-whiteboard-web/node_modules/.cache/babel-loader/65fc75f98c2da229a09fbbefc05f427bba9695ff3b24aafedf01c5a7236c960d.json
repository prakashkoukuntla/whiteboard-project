{"ast":null,"code":"'use strict';\n\nconst {\n  Transform\n} = require('stream');\nconst JSON2CSVStreamParser = require('./JSON2CSVStreamParser');\nconst {\n  fakeInherit\n} = require('./utils');\nclass JSON2CSVTransform extends Transform {\n  constructor(opts, transformOpts = {}, asyncOptions = {}) {\n    super(transformOpts);\n    fakeInherit(this, JSON2CSVStreamParser);\n    // To don't override the stream end method.\n    this.endUnderlayingParser = JSON2CSVStreamParser.prototype.end;\n    this.opts = this.preprocessOpts(opts);\n    this.initTokenizer(opts, {\n      ...asyncOptions,\n      objectMode: transformOpts.objectMode || transformOpts.readableObjectMode\n    });\n    if (this.opts.fields) this.preprocessFieldsInfo(this.opts.fields);\n  }\n  onHeader(header) {\n    this.emit('header', header);\n  }\n  onLine(line) {\n    this.emit('line', line);\n  }\n  onData(data) {\n    this.push(data);\n  }\n  onError(err) {\n    throw err;\n  }\n  onEnd() {\n    if (!this.writableEnded) this.end();\n  }\n\n  /**\n   * Main function that send data to the parse to be processed.\n   *\n   * @param {Buffer} chunk Incoming data\n   * @param {String} encoding Encoding of the incoming data. Defaults to 'utf8'\n   * @param {Function} done Called when the proceesing of the supplied chunk is done\n   */\n  _transform(chunk, encoding, done) {\n    try {\n      this.tokenizer.write(chunk);\n      done();\n    } catch (err) {\n      done(err);\n    }\n  }\n  _final(done) {\n    try {\n      this.endUnderlayingParser();\n      done();\n    } catch (err) {\n      done(err);\n    }\n  }\n  promise() {\n    return new Promise((resolve, reject) => {\n      const csvBuffer = [];\n      this.on('data', chunk => csvBuffer.push(chunk.toString())).on('finish', () => resolve(csvBuffer.join(''))).on('error', err => reject(err));\n    });\n  }\n}\nmodule.exports = JSON2CSVTransform;","map":{"version":3,"names":["Transform","require","JSON2CSVStreamParser","fakeInherit","JSON2CSVTransform","constructor","opts","transformOpts","asyncOptions","endUnderlayingParser","prototype","end","preprocessOpts","initTokenizer","objectMode","readableObjectMode","fields","preprocessFieldsInfo","onHeader","header","emit","onLine","line","onData","data","push","onError","err","onEnd","writableEnded","_transform","chunk","encoding","done","tokenizer","write","_final","promise","Promise","resolve","reject","csvBuffer","on","toString","join","module","exports"],"sources":["/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/node_modules/json2csv/lib/JSON2CSVTransform.js"],"sourcesContent":["'use strict';\n\nconst { Transform } = require('stream');\nconst JSON2CSVStreamParser = require('./JSON2CSVStreamParser');\nconst { fakeInherit } = require('./utils');\n\nclass JSON2CSVTransform extends Transform {\n  constructor(opts, transformOpts = {}, asyncOptions = {}) {\n    super(transformOpts);\n    fakeInherit(this, JSON2CSVStreamParser);\n    // To don't override the stream end method.\n    this.endUnderlayingParser = JSON2CSVStreamParser.prototype.end;\n    this.opts = this.preprocessOpts(opts);\n    this.initTokenizer(opts, { ...asyncOptions, objectMode: transformOpts.objectMode || transformOpts.readableObjectMode });\n    if (this.opts.fields) this.preprocessFieldsInfo(this.opts.fields);\n  }\n\n  onHeader(header) {\n    this.emit('header', header);\n  }\n\n  onLine(line) {\n    this.emit('line', line);\n  }\n\n  onData(data) {\n    this.push(data);\n  }\n\n  onError(err) {\n    throw err;\n  }\n\n  onEnd() {\n    if (!this.writableEnded) this.end();\n  }\n\n  /**\n   * Main function that send data to the parse to be processed.\n   *\n   * @param {Buffer} chunk Incoming data\n   * @param {String} encoding Encoding of the incoming data. Defaults to 'utf8'\n   * @param {Function} done Called when the proceesing of the supplied chunk is done\n   */\n  _transform(chunk, encoding, done) {\n    try {\n      this.tokenizer.write(chunk);\n      done();\n    } catch (err) {\n      done(err);\n    }\n  }\n\n  _final(done) {\n    try {\n      this.endUnderlayingParser();\n      done();\n    } catch (err) {\n      done(err);\n    }\n  }\n\n  promise() {\n    return new Promise((resolve, reject) => {\n      const csvBuffer = [];\n      this\n        .on('data', chunk => csvBuffer.push(chunk.toString()))\n        .on('finish', () => resolve(csvBuffer.join('')))\n        .on('error', err => reject(err));\n    });\n  }\n}\n\nmodule.exports = JSON2CSVTransform;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACvC,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAC9D,MAAM;EAAEE;AAAY,CAAC,GAAGF,OAAO,CAAC,SAAS,CAAC;AAE1C,MAAMG,iBAAiB,SAASJ,SAAS,CAAC;EACxCK,WAAWA,CAACC,IAAI,EAAEC,aAAa,GAAG,CAAC,CAAC,EAAEC,YAAY,GAAG,CAAC,CAAC,EAAE;IACvD,KAAK,CAACD,aAAa,CAAC;IACpBJ,WAAW,CAAC,IAAI,EAAED,oBAAoB,CAAC;IACvC;IACA,IAAI,CAACO,oBAAoB,GAAGP,oBAAoB,CAACQ,SAAS,CAACC,GAAG;IAC9D,IAAI,CAACL,IAAI,GAAG,IAAI,CAACM,cAAc,CAACN,IAAI,CAAC;IACrC,IAAI,CAACO,aAAa,CAACP,IAAI,EAAE;MAAE,GAAGE,YAAY;MAAEM,UAAU,EAAEP,aAAa,CAACO,UAAU,IAAIP,aAAa,CAACQ;IAAmB,CAAC,CAAC;IACvH,IAAI,IAAI,CAACT,IAAI,CAACU,MAAM,EAAE,IAAI,CAACC,oBAAoB,CAAC,IAAI,CAACX,IAAI,CAACU,MAAM,CAAC;EACnE;EAEAE,QAAQA,CAACC,MAAM,EAAE;IACf,IAAI,CAACC,IAAI,CAAC,QAAQ,EAAED,MAAM,CAAC;EAC7B;EAEAE,MAAMA,CAACC,IAAI,EAAE;IACX,IAAI,CAACF,IAAI,CAAC,MAAM,EAAEE,IAAI,CAAC;EACzB;EAEAC,MAAMA,CAACC,IAAI,EAAE;IACX,IAAI,CAACC,IAAI,CAACD,IAAI,CAAC;EACjB;EAEAE,OAAOA,CAACC,GAAG,EAAE;IACX,MAAMA,GAAG;EACX;EAEAC,KAAKA,CAAA,EAAG;IACN,IAAI,CAAC,IAAI,CAACC,aAAa,EAAE,IAAI,CAAClB,GAAG,CAAC,CAAC;EACrC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEmB,UAAUA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAE;IAChC,IAAI;MACF,IAAI,CAACC,SAAS,CAACC,KAAK,CAACJ,KAAK,CAAC;MAC3BE,IAAI,CAAC,CAAC;IACR,CAAC,CAAC,OAAON,GAAG,EAAE;MACZM,IAAI,CAACN,GAAG,CAAC;IACX;EACF;EAEAS,MAAMA,CAACH,IAAI,EAAE;IACX,IAAI;MACF,IAAI,CAACxB,oBAAoB,CAAC,CAAC;MAC3BwB,IAAI,CAAC,CAAC;IACR,CAAC,CAAC,OAAON,GAAG,EAAE;MACZM,IAAI,CAACN,GAAG,CAAC;IACX;EACF;EAEAU,OAAOA,CAAA,EAAG;IACR,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,SAAS,GAAG,EAAE;MACpB,IAAI,CACDC,EAAE,CAAC,MAAM,EAAEX,KAAK,IAAIU,SAAS,CAAChB,IAAI,CAACM,KAAK,CAACY,QAAQ,CAAC,CAAC,CAAC,CAAC,CACrDD,EAAE,CAAC,QAAQ,EAAE,MAAMH,OAAO,CAACE,SAAS,CAACG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAC/CF,EAAE,CAAC,OAAO,EAAEf,GAAG,IAAIa,MAAM,CAACb,GAAG,CAAC,CAAC;IACpC,CAAC,CAAC;EACJ;AACF;AAEAkB,MAAM,CAACC,OAAO,GAAG1C,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}