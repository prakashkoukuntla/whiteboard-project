{"ast":null,"code":"'use strict';\n\nconst {\n  Readable\n} = require('stream');\nconst JSON2CSVTransform = require('./JSON2CSVTransform');\nclass JSON2CSVAsyncParser {\n  constructor(opts, transformOpts) {\n    this.opts = opts;\n    this.transformOpts = transformOpts;\n  }\n\n  /**\n   * Main function that converts json to csv.\n   *\n   * @param {Stream|Array|Object} data Array of JSON objects to be converted to CSV\n   * @returns {Stream} A stream producing the CSV formated data as a string\n   */\n  parse(data) {\n    if (typeof data === 'string' || ArrayBuffer.isView(data)) {\n      data = Readable.from(data, {\n        objectMode: false\n      });\n    } else if (Array.isArray(data)) {\n      data = Readable.from(data.filter(item => item !== null));\n    } else if (typeof data === 'object' && !(data instanceof Readable)) {\n      data = Readable.from([data]);\n    }\n    if (!(data instanceof Readable)) {\n      throw new Error('Data should be a JSON object, JSON array, typed array, string or stream');\n    }\n    return data.pipe(new JSON2CSVTransform(this.opts, {\n      objectMode: data.readableObjectMode,\n      ...this.transformOpts\n    }));\n  }\n}\nmodule.exports = JSON2CSVAsyncParser;","map":{"version":3,"names":["Readable","require","JSON2CSVTransform","JSON2CSVAsyncParser","constructor","opts","transformOpts","parse","data","ArrayBuffer","isView","from","objectMode","Array","isArray","filter","item","Error","pipe","readableObjectMode","module","exports"],"sources":["/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/node_modules/json2csv/lib/JSON2CSVAsyncParser.js"],"sourcesContent":["'use strict';\n\nconst { Readable } = require('stream');\nconst JSON2CSVTransform = require('./JSON2CSVTransform');\n\nclass JSON2CSVAsyncParser {\n  constructor(opts, transformOpts) {\n    this.opts = opts;\n    this.transformOpts = transformOpts;\n  }\n\n  /**\n   * Main function that converts json to csv.\n   *\n   * @param {Stream|Array|Object} data Array of JSON objects to be converted to CSV\n   * @returns {Stream} A stream producing the CSV formated data as a string\n   */\n  parse(data) {\n    if (typeof data === 'string' || ArrayBuffer.isView(data)) {\n      data = Readable.from(data, { objectMode: false });\n    } else if (Array.isArray(data)) {\n      data = Readable.from(data.filter(item => item !== null));\n    } else if (typeof data === 'object' && !(data instanceof Readable)) {\n      data = Readable.from([data]);\n    }\n    \n    if (!(data instanceof Readable)) {\n      throw new Error('Data should be a JSON object, JSON array, typed array, string or stream');\n    }\n\n    return data.pipe(new JSON2CSVTransform(this.opts, { objectMode: data.readableObjectMode, ...this.transformOpts }));\n  }\n}\n\nmodule.exports = JSON2CSVAsyncParser;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAS,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACtC,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAExD,MAAME,mBAAmB,CAAC;EACxBC,WAAWA,CAACC,IAAI,EAAEC,aAAa,EAAE;IAC/B,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,aAAa,GAAGA,aAAa;EACpC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,KAAKA,CAACC,IAAI,EAAE;IACV,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIC,WAAW,CAACC,MAAM,CAACF,IAAI,CAAC,EAAE;MACxDA,IAAI,GAAGR,QAAQ,CAACW,IAAI,CAACH,IAAI,EAAE;QAAEI,UAAU,EAAE;MAAM,CAAC,CAAC;IACnD,CAAC,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACN,IAAI,CAAC,EAAE;MAC9BA,IAAI,GAAGR,QAAQ,CAACW,IAAI,CAACH,IAAI,CAACO,MAAM,CAACC,IAAI,IAAIA,IAAI,KAAK,IAAI,CAAC,CAAC;IAC1D,CAAC,MAAM,IAAI,OAAOR,IAAI,KAAK,QAAQ,IAAI,EAAEA,IAAI,YAAYR,QAAQ,CAAC,EAAE;MAClEQ,IAAI,GAAGR,QAAQ,CAACW,IAAI,CAAC,CAACH,IAAI,CAAC,CAAC;IAC9B;IAEA,IAAI,EAAEA,IAAI,YAAYR,QAAQ,CAAC,EAAE;MAC/B,MAAM,IAAIiB,KAAK,CAAC,yEAAyE,CAAC;IAC5F;IAEA,OAAOT,IAAI,CAACU,IAAI,CAAC,IAAIhB,iBAAiB,CAAC,IAAI,CAACG,IAAI,EAAE;MAAEO,UAAU,EAAEJ,IAAI,CAACW,kBAAkB;MAAE,GAAG,IAAI,CAACb;IAAc,CAAC,CAAC,CAAC;EACpH;AACF;AAEAc,MAAM,CAACC,OAAO,GAAGlB,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}