{"ast":null,"code":"'use strict';\n\nconst JSON2CSVBase = require('./JSON2CSVBase');\nclass JSON2CSVParser extends JSON2CSVBase {\n  constructor(opts) {\n    super(opts);\n  }\n  /**\n   * Main function that converts json to csv.\n   *\n   * @param {Array|Object} data Array of JSON objects to be converted to CSV\n   * @returns {String} The CSV formated data as a string\n   */\n  parse(data) {\n    const processedData = this.preprocessData(data, this.opts.fields);\n    const fields = this.opts.fields || this.preprocessFieldsInfo(processedData.reduce((fields, item) => {\n      Object.keys(item).forEach(field => {\n        if (!fields.includes(field)) {\n          fields.push(field);\n        }\n      });\n      return fields;\n    }, []));\n    const header = this.opts.header ? this.getHeader(fields) : '';\n    const rows = this.processData(processedData, fields);\n    const csv = (this.opts.withBOM ? '\\ufeff' : '') + header + (header && rows ? this.opts.eol : '') + rows;\n    return csv;\n  }\n\n  /**\n   * Preprocess the data according to the give opts (unwind, flatten, etc.)\n    and calculate the fields and field names if they are not provided.\n   *\n   * @param {Array|Object} data Array or object to be converted to CSV\n   */\n  preprocessData(data, fields) {\n    const processedData = Array.isArray(data) ? data : [data];\n    if (!fields && (processedData.length === 0 || typeof processedData[0] !== 'object')) {\n      throw new Error('Data should not be empty or the \"fields\" option should be included');\n    }\n    if (this.opts.transforms.length === 0) return processedData;\n    return processedData.flatMap(row => this.preprocessRow(row));\n  }\n\n  /**\n   * Create the content row by row below the header\n   *\n   * @param {Array} data Array of JSON objects to be converted to CSV\n   * @returns {String} CSV string (body)\n   */\n  processData(data, fields) {\n    return data.map(row => this.processRow(row, fields)).filter(row => row) // Filter empty rows\n    .join(this.opts.eol);\n  }\n}\nmodule.exports = JSON2CSVParser;","map":{"version":3,"names":["JSON2CSVBase","require","JSON2CSVParser","constructor","opts","parse","data","processedData","preprocessData","fields","preprocessFieldsInfo","reduce","item","Object","keys","forEach","field","includes","push","header","getHeader","rows","processData","csv","withBOM","eol","Array","isArray","length","Error","transforms","flatMap","row","preprocessRow","map","processRow","filter","join","module","exports"],"sources":["/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/node_modules/json2csv/lib/JSON2CSVParser.js"],"sourcesContent":["'use strict';\n\nconst JSON2CSVBase = require('./JSON2CSVBase');\n\nclass JSON2CSVParser extends JSON2CSVBase {\n  constructor(opts) {\n    super(opts);\n  }\n  /**\n   * Main function that converts json to csv.\n   *\n   * @param {Array|Object} data Array of JSON objects to be converted to CSV\n   * @returns {String} The CSV formated data as a string\n   */\n  parse(data) {\n    const processedData = this.preprocessData(data, this.opts.fields);\n\n    const fields = this.opts.fields || this.preprocessFieldsInfo(processedData\n      .reduce((fields, item) => {\n        Object.keys(item).forEach((field) => {\n          if (!fields.includes(field)) {\n            fields.push(field)\n          }\n        });\n\n        return fields\n      }, []));\n\n    const header = this.opts.header ? this.getHeader(fields) : '';\n    const rows = this.processData(processedData, fields);\n    const csv = (this.opts.withBOM ? '\\ufeff' : '')\n      + header\n      + ((header && rows) ? this.opts.eol : '')\n      + rows;\n\n    return csv;\n  }\n\n  /**\n   * Preprocess the data according to the give opts (unwind, flatten, etc.)\n    and calculate the fields and field names if they are not provided.\n   *\n   * @param {Array|Object} data Array or object to be converted to CSV\n   */\n  preprocessData(data, fields) {\n    const processedData = Array.isArray(data) ? data : [data];\n\n    if (!fields && (processedData.length === 0 || typeof processedData[0] !== 'object')) {\n      throw new Error('Data should not be empty or the \"fields\" option should be included');\n    }\n\n    if (this.opts.transforms.length === 0) return processedData;\n\n    return processedData\n      .flatMap(row => this.preprocessRow(row));\n  }\n\n  /**\n   * Create the content row by row below the header\n   *\n   * @param {Array} data Array of JSON objects to be converted to CSV\n   * @returns {String} CSV string (body)\n   */\n  processData(data, fields) {\n    return data\n      .map(row => this.processRow(row, fields))\n      .filter(row => row) // Filter empty rows\n      .join(this.opts.eol);\n  }\n}\n\nmodule.exports = JSON2CSVParser;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAE9C,MAAMC,cAAc,SAASF,YAAY,CAAC;EACxCG,WAAWA,CAACC,IAAI,EAAE;IAChB,KAAK,CAACA,IAAI,CAAC;EACb;EACA;AACF;AACA;AACA;AACA;AACA;EACEC,KAAKA,CAACC,IAAI,EAAE;IACV,MAAMC,aAAa,GAAG,IAAI,CAACC,cAAc,CAACF,IAAI,EAAE,IAAI,CAACF,IAAI,CAACK,MAAM,CAAC;IAEjE,MAAMA,MAAM,GAAG,IAAI,CAACL,IAAI,CAACK,MAAM,IAAI,IAAI,CAACC,oBAAoB,CAACH,aAAa,CACvEI,MAAM,CAAC,CAACF,MAAM,EAAEG,IAAI,KAAK;MACxBC,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAACG,OAAO,CAAEC,KAAK,IAAK;QACnC,IAAI,CAACP,MAAM,CAACQ,QAAQ,CAACD,KAAK,CAAC,EAAE;UAC3BP,MAAM,CAACS,IAAI,CAACF,KAAK,CAAC;QACpB;MACF,CAAC,CAAC;MAEF,OAAOP,MAAM;IACf,CAAC,EAAE,EAAE,CAAC,CAAC;IAET,MAAMU,MAAM,GAAG,IAAI,CAACf,IAAI,CAACe,MAAM,GAAG,IAAI,CAACC,SAAS,CAACX,MAAM,CAAC,GAAG,EAAE;IAC7D,MAAMY,IAAI,GAAG,IAAI,CAACC,WAAW,CAACf,aAAa,EAAEE,MAAM,CAAC;IACpD,MAAMc,GAAG,GAAG,CAAC,IAAI,CAACnB,IAAI,CAACoB,OAAO,GAAG,QAAQ,GAAG,EAAE,IAC1CL,MAAM,IACJA,MAAM,IAAIE,IAAI,GAAI,IAAI,CAACjB,IAAI,CAACqB,GAAG,GAAG,EAAE,CAAC,GACvCJ,IAAI;IAER,OAAOE,GAAG;EACZ;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEf,cAAcA,CAACF,IAAI,EAAEG,MAAM,EAAE;IAC3B,MAAMF,aAAa,GAAGmB,KAAK,CAACC,OAAO,CAACrB,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC;IAEzD,IAAI,CAACG,MAAM,KAAKF,aAAa,CAACqB,MAAM,KAAK,CAAC,IAAI,OAAOrB,aAAa,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,EAAE;MACnF,MAAM,IAAIsB,KAAK,CAAC,oEAAoE,CAAC;IACvF;IAEA,IAAI,IAAI,CAACzB,IAAI,CAAC0B,UAAU,CAACF,MAAM,KAAK,CAAC,EAAE,OAAOrB,aAAa;IAE3D,OAAOA,aAAa,CACjBwB,OAAO,CAACC,GAAG,IAAI,IAAI,CAACC,aAAa,CAACD,GAAG,CAAC,CAAC;EAC5C;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEV,WAAWA,CAAChB,IAAI,EAAEG,MAAM,EAAE;IACxB,OAAOH,IAAI,CACR4B,GAAG,CAACF,GAAG,IAAI,IAAI,CAACG,UAAU,CAACH,GAAG,EAAEvB,MAAM,CAAC,CAAC,CACxC2B,MAAM,CAACJ,GAAG,IAAIA,GAAG,CAAC,CAAC;IAAA,CACnBK,IAAI,CAAC,IAAI,CAACjC,IAAI,CAACqB,GAAG,CAAC;EACxB;AACF;AAEAa,MAAM,CAACC,OAAO,GAAGrC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}