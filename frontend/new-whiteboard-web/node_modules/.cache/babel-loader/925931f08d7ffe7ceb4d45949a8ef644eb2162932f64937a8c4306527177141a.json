{"ast":null,"code":"var _jsxFileName = \"/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/context/WhiteboardContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhiteboardContext = /*#__PURE__*/createContext();\n\n// Create a provider component\nexport const WhiteboardProvider = ({\n  children\n}) => {\n  _s();\n  const [whiteboards, setWhiteboards] = useState([]);\n\n  // Function to fetch whiteboards with user-specific annotation status\n  const refreshWhiteboards = async () => {\n    try {\n      const whiteboardsRes = await axios.get(\"http://localhost:5001/whiteboards\", {\n        withCredentials: true\n      });\n      const whiteboardsWithStatus = await Promise.all(whiteboardsRes.data.filter(whiteboard => whiteboard.id !== \"default_id\").map(async whiteboard => {\n        const annotationsRes = await axios.get(`http://localhost:5001/whiteboards/${whiteboard.id}/annotations`, {\n          withCredentials: true\n        });\n        return {\n          ...whiteboard,\n          annotated: annotationsRes.data.length > 0\n        };\n      }));\n      setWhiteboards(whiteboardsWithStatus);\n    } catch (error) {\n      console.error(\"Error fetching whiteboards with annotations:\", error);\n    }\n  };\n\n  // Fetch whiteboards initially on context load\n  useEffect(() => {\n    refreshWhiteboards();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WhiteboardContext.Provider, {\n    value: {\n      whiteboards,\n      refreshWhiteboards\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the whiteboard context\n_s(WhiteboardProvider, \"eXqwD/3DEwFoGwQfjOTQLTqm5Mw=\");\n_c = WhiteboardProvider;\nexport const useWhiteboard = () => {\n  _s2();\n  return useContext(WhiteboardContext);\n};\n_s2(useWhiteboard, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"WhiteboardProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","axios","jsxDEV","_jsxDEV","WhiteboardContext","WhiteboardProvider","children","_s","whiteboards","setWhiteboards","refreshWhiteboards","whiteboardsRes","get","withCredentials","whiteboardsWithStatus","Promise","all","data","filter","whiteboard","id","map","annotationsRes","annotated","length","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWhiteboard","_s2","$RefreshReg$"],"sources":["/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/context/WhiteboardContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\n// Create context\nconst WhiteboardContext = createContext();\n\n// Create a provider component\nexport const WhiteboardProvider = ({ children }) => {\n  const [whiteboards, setWhiteboards] = useState([]);\n\n  // Function to fetch whiteboards with user-specific annotation status\n  const refreshWhiteboards = async () => {\n    try {\n      const whiteboardsRes = await axios.get(\n        \"http://localhost:5001/whiteboards\",\n        {\n          withCredentials: true,\n        }\n      );\n\n      const whiteboardsWithStatus = await Promise.all(\n        whiteboardsRes.data\n          .filter((whiteboard) => whiteboard.id !== \"default_id\")\n          .map(async (whiteboard) => {\n            const annotationsRes = await axios.get(\n              `http://localhost:5001/whiteboards/${whiteboard.id}/annotations`,\n              { withCredentials: true }\n            );\n            return {\n              ...whiteboard,\n              annotated: annotationsRes.data.length > 0,\n            };\n          })\n      );\n\n      setWhiteboards(whiteboardsWithStatus);\n    } catch (error) {\n      console.error(\"Error fetching whiteboards with annotations:\", error);\n    }\n  };\n\n  // Fetch whiteboards initially on context load\n  useEffect(() => {\n    refreshWhiteboards();\n  }, []);\n\n  return (\n    <WhiteboardContext.Provider value={{ whiteboards, refreshWhiteboards }}>\n      {children}\n    </WhiteboardContext.Provider>\n  );\n};\n\n// Custom hook to use the whiteboard context\nexport const useWhiteboard = () => {\n  return useContext(WhiteboardContext);\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,iBAAiB,gBAAGP,aAAa,CAAC,CAAC;;AAEzC;AACA,OAAO,MAAMQ,kBAAkB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACA,MAAMU,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,MAAMC,cAAc,GAAG,MAAMV,KAAK,CAACW,GAAG,CACpC,mCAAmC,EACnC;QACEC,eAAe,EAAE;MACnB,CACF,CAAC;MAED,MAAMC,qBAAqB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC7CL,cAAc,CAACM,IAAI,CAChBC,MAAM,CAAEC,UAAU,IAAKA,UAAU,CAACC,EAAE,KAAK,YAAY,CAAC,CACtDC,GAAG,CAAC,MAAOF,UAAU,IAAK;QACzB,MAAMG,cAAc,GAAG,MAAMrB,KAAK,CAACW,GAAG,CACpC,qCAAqCO,UAAU,CAACC,EAAE,cAAc,EAChE;UAAEP,eAAe,EAAE;QAAK,CAC1B,CAAC;QACD,OAAO;UACL,GAAGM,UAAU;UACbI,SAAS,EAAED,cAAc,CAACL,IAAI,CAACO,MAAM,GAAG;QAC1C,CAAC;MACH,CAAC,CACL,CAAC;MAEDf,cAAc,CAACK,qBAAqB,CAAC;IACvC,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;IACtE;EACF,CAAC;;EAED;EACA1B,SAAS,CAAC,MAAM;IACdW,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA,CAACC,iBAAiB,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAEpB,WAAW;MAAEE;IAAmB,CAAE;IAAAJ,QAAA,EACpEA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAEjC,CAAC;;AAED;AAAAzB,EAAA,CA9CaF,kBAAkB;AAAA4B,EAAA,GAAlB5B,kBAAkB;AA+C/B,OAAO,MAAM6B,aAAa,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACjC,OAAOrC,UAAU,CAACM,iBAAiB,CAAC;AACtC,CAAC;AAAC+B,GAAA,CAFWD,aAAa;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}