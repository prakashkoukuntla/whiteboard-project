{"ast":null,"code":"var _jsxFileName = \"/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/pages/WhiteboardLabelingPage.js\",\n  _s = $RefreshSig$();\n// src/pages/WhiteboardLabelingPage.js\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Container, Typography, IconButton, TextField, Paper, Button } from \"@mui/material\";\nimport { ArrowBack } from \"@mui/icons-material\";\nimport { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\nimport useImage from \"use-image\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst whiteboards = [{\n  id: \"wb_456\",\n  imageUrl: \"https://via.placeholder.com/1200x800\",\n  annotated: true\n}, {\n  id: \"wb_457\",\n  imageUrl: \"https://via.placeholder.com/1200x800\",\n  annotated: false\n}, {\n  id: \"wb_458\",\n  imageUrl: \"https://via.placeholder.com/1200x800\",\n  annotated: false\n}];\nconst confidenceColors = [\"rgba(0, 255, 0, 0.5)\",\n// High Confidence (Green)\n\"rgba(255, 165, 0, 0.5)\",\n// Medium Confidence (Orange)\n\"rgba(255, 0, 0, 0.5)\" // Low Confidence (Red)\n];\nfunction WhiteboardLabelingPage() {\n  _s();\n  var _annotations$activeAn;\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const whiteboard = whiteboards.find(wb => wb.id === id);\n  const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n  const [annotations, setAnnotations] = useState([]);\n  const [newAnnotation, setNewAnnotation] = useState(null);\n  const [activeAnnotation, setActiveAnnotation] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n  const [panelWidth, setPanelWidth] = useState(70);\n  const transcriptionRef = useRef(null); // Reference for focusing the input\n\n  useEffect(() => {\n    if (activeAnnotation !== null && transcriptionRef.current) {\n      transcriptionRef.current.focus(); // Focus the input when a new annotation is active\n    }\n  }, [activeAnnotation]); // Run when activeAnnotation changes\n\n  const handleMouseDown = e => {\n    const {\n      x,\n      y\n    } = e.target.getStage().getPointerPosition();\n    setNewAnnotation({\n      x,\n      y,\n      width: 0,\n      height: 0,\n      confidenceLevel: 0,\n      transcription: \"\"\n    });\n  };\n  const handleMouseMove = e => {\n    if (!newAnnotation) return;\n    const stage = e.target.getStage();\n    const pointerPosition = stage.getPointerPosition();\n    setNewAnnotation({\n      ...newAnnotation,\n      width: pointerPosition.x - newAnnotation.x,\n      height: pointerPosition.y - newAnnotation.y\n    });\n  };\n  const handleMouseUp = () => {\n    if (newAnnotation) {\n      // Add the new annotation to the list\n      setAnnotations(prevAnnotations => {\n        const updatedAnnotations = [...prevAnnotations, newAnnotation];\n        return updatedAnnotations;\n      });\n\n      // Set the new annotation as active and open the transcription editor\n      setActiveAnnotation(annotations.length); // Use the new annotation as active\n      setTranscription(newAnnotation.transcription); // Load its transcription\n      setNewAnnotation(null); // Reset the drawing state\n    }\n  };\n  const handleAnnotationClick = index => {\n    // Cycle the confidence level color (0 -> 1 -> 2 -> 0)\n    const updatedAnnotations = [...annotations];\n    const currentAnnotation = updatedAnnotations[index];\n\n    // Increment the confidence level (cycling through 0, 1, 2)\n    const nextConfidenceLevel = (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n\n    // Update the annotation's confidence level\n    updatedAnnotations[index] = {\n      ...currentAnnotation,\n      confidenceLevel: nextConfidenceLevel\n    };\n    setAnnotations(updatedAnnotations);\n\n    // Set active annotation to open the transcription editor\n    setActiveAnnotation(index);\n    setTranscription(updatedAnnotations[index].transcription);\n  };\n  const handleTranscriptionChange = event => {\n    const updatedTranscription = event.target.value;\n    setTranscription(updatedTranscription);\n\n    // Auto-save the transcription when it changes\n    setAnnotations(prevAnnotations => prevAnnotations.map((annotation, i) => i === activeAnnotation ? {\n      ...annotation,\n      transcription: updatedTranscription\n    } : annotation));\n  };\n  const handleResize = e => {\n    const newWidth = e.clientX / window.innerWidth * 100;\n    setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n  };\n\n  // Handlers for navigating whiteboards\n  const handleNext = () => {\n    const currentIndex = whiteboards.findIndex(wb => wb.id === id);\n    const nextIndex = (currentIndex + 1) % whiteboards.length;\n    navigate(`/label/${whiteboards[nextIndex].id}`);\n  };\n  const handlePrevious = () => {\n    const currentIndex = whiteboards.findIndex(wb => wb.id === id);\n    const prevIndex = (currentIndex - 1 + whiteboards.length) % whiteboards.length;\n    navigate(`/label/${whiteboards[prevIndex].id}`);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: false,\n    style: {\n      height: \"100vh\",\n      display: \"flex\",\n      padding: 0\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: `${panelWidth}%`,\n        overflowY: \"auto\",\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => navigate(\"/whiteboards\"),\n        style: {\n          position: \"absolute\",\n          top: \"20px\",\n          left: \"20px\",\n          zIndex: 1000\n        },\n        children: /*#__PURE__*/_jsxDEV(ArrowBack, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        style: {\n          position: \"absolute\",\n          top: \"20px\",\n          left: \"50%\",\n          transform: \"translateX(-50%)\",\n          zIndex: 1000,\n          opacity: 0.8,\n          backgroundColor: \"white\",\n          padding: \"5px 15px\",\n          borderRadius: \"4px\"\n        },\n        children: [\"Whiteboard ID: \", id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), whiteboard ? /*#__PURE__*/_jsxDEV(Stage, {\n        width: 1200,\n        height: 800,\n        onMouseDown: handleMouseDown,\n        onMouseMove: handleMouseMove,\n        onMouseUp: handleMouseUp,\n        style: {\n          margin: \"0 auto\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Layer, {\n          children: [/*#__PURE__*/_jsxDEV(KonvaImage, {\n            image: image,\n            width: 1200,\n            height: 800\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this), annotations.map((rect, i) => /*#__PURE__*/_jsxDEV(Rect, {\n            x: rect.x,\n            y: rect.y,\n            width: rect.width,\n            height: rect.height,\n            fill: confidenceColors[rect.confidenceLevel] // Set color based on confidence level\n            ,\n            onClick: () => handleAnnotationClick(i)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 17\n          }, this)), newAnnotation && /*#__PURE__*/_jsxDEV(Rect, {\n            x: newAnnotation.x,\n            y: newAnnotation.y,\n            width: newAnnotation.width,\n            height: newAnnotation.height,\n            fill: \"rgba(0,0,255,0.5)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        children: \"Whiteboard not found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: handlePrevious,\n        style: {\n          position: \"fixed\",\n          bottom: \"20px\",\n          left: \"20px\",\n          opacity: 0.7\n        },\n        children: \"Previous Whiteboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: handleNext,\n        style: {\n          position: \"fixed\",\n          bottom: \"20px\",\n          right: \"20px\",\n          opacity: 0.7\n        },\n        children: \"Next Whiteboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onMouseDown: e => {\n        document.addEventListener(\"mousemove\", handleResize);\n        document.addEventListener(\"mouseup\", () => {\n          document.removeEventListener(\"mousemove\", handleResize);\n        });\n      },\n      style: {\n        width: \"5px\",\n        cursor: \"col-resize\",\n        backgroundColor: \"#ccc\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), activeAnnotation !== null && /*#__PURE__*/_jsxDEV(Paper, {\n      style: {\n        width: `${100 - panelWidth}%`,\n        padding: \"20px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\",\n        boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n        overflowY: \"auto\"\n      },\n      square: true,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Edit Transcription\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"Transcription\",\n        value: ((_annotations$activeAn = annotations[activeAnnotation]) === null || _annotations$activeAn === void 0 ? void 0 : _annotations$activeAn.transcription) || \"\",\n        onChange: handleTranscriptionChange,\n        multiline: true,\n        rows: 4,\n        variant: \"outlined\",\n        inputRef: transcriptionRef // Automatically focuses when active annotation changes\n        ,\n        autoFocus: true // Automatically focuses the TextField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n_s(WhiteboardLabelingPage, \"Jh49yrQxw2QCq0Ewq1bDcmyPBXw=\", false, function () {\n  return [useParams, useNavigate, useImage];\n});\n_c = WhiteboardLabelingPage;\nexport default WhiteboardLabelingPage;\nvar _c;\n$RefreshReg$(_c, \"WhiteboardLabelingPage\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useParams","useNavigate","Container","Typography","IconButton","TextField","Paper","Button","ArrowBack","Stage","Layer","Image","KonvaImage","Rect","useImage","jsxDEV","_jsxDEV","whiteboards","id","imageUrl","annotated","confidenceColors","WhiteboardLabelingPage","_s","_annotations$activeAn","navigate","whiteboard","find","wb","image","annotations","setAnnotations","newAnnotation","setNewAnnotation","activeAnnotation","setActiveAnnotation","transcription","setTranscription","panelWidth","setPanelWidth","transcriptionRef","current","focus","handleMouseDown","e","x","y","target","getStage","getPointerPosition","width","height","confidenceLevel","handleMouseMove","stage","pointerPosition","handleMouseUp","prevAnnotations","updatedAnnotations","length","handleAnnotationClick","index","currentAnnotation","nextConfidenceLevel","handleTranscriptionChange","event","updatedTranscription","value","map","annotation","i","handleResize","newWidth","clientX","window","innerWidth","Math","max","min","handleNext","currentIndex","findIndex","nextIndex","handlePrevious","prevIndex","maxWidth","style","display","padding","children","overflowY","position","onClick","top","left","zIndex","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","variant","transform","opacity","backgroundColor","borderRadius","onMouseDown","onMouseMove","onMouseUp","margin","rect","fill","color","bottom","right","document","addEventListener","removeEventListener","cursor","flexDirection","alignItems","boxShadow","square","gutterBottom","fullWidth","label","onChange","multiline","rows","inputRef","autoFocus","_c","$RefreshReg$"],"sources":["/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/pages/WhiteboardLabelingPage.js"],"sourcesContent":["// src/pages/WhiteboardLabelingPage.js\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport {\n  Container,\n  Typography,\n  IconButton,\n  TextField,\n  Paper,\n  Button,\n} from \"@mui/material\";\nimport { ArrowBack } from \"@mui/icons-material\";\nimport { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\nimport useImage from \"use-image\";\n\nconst whiteboards = [\n  {\n    id: \"wb_456\",\n    imageUrl: \"https://via.placeholder.com/1200x800\",\n    annotated: true,\n  },\n  {\n    id: \"wb_457\",\n    imageUrl: \"https://via.placeholder.com/1200x800\",\n    annotated: false,\n  },\n  {\n    id: \"wb_458\",\n    imageUrl: \"https://via.placeholder.com/1200x800\",\n    annotated: false,\n  },\n];\n\nconst confidenceColors = [\n  \"rgba(0, 255, 0, 0.5)\", // High Confidence (Green)\n  \"rgba(255, 165, 0, 0.5)\", // Medium Confidence (Orange)\n  \"rgba(255, 0, 0, 0.5)\", // Low Confidence (Red)\n];\n\nfunction WhiteboardLabelingPage() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const whiteboard = whiteboards.find((wb) => wb.id === id);\n  const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n\n  const [annotations, setAnnotations] = useState([]);\n  const [newAnnotation, setNewAnnotation] = useState(null);\n  const [activeAnnotation, setActiveAnnotation] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n  const [panelWidth, setPanelWidth] = useState(70);\n\n  const transcriptionRef = useRef(null); // Reference for focusing the input\n\n  useEffect(() => {\n    if (activeAnnotation !== null && transcriptionRef.current) {\n      transcriptionRef.current.focus(); // Focus the input when a new annotation is active\n    }\n  }, [activeAnnotation]); // Run when activeAnnotation changes\n\n  const handleMouseDown = (e) => {\n    const { x, y } = e.target.getStage().getPointerPosition();\n    setNewAnnotation({\n      x,\n      y,\n      width: 0,\n      height: 0,\n      confidenceLevel: 0,\n      transcription: \"\",\n    });\n  };\n\n  const handleMouseMove = (e) => {\n    if (!newAnnotation) return;\n    const stage = e.target.getStage();\n    const pointerPosition = stage.getPointerPosition();\n    setNewAnnotation({\n      ...newAnnotation,\n      width: pointerPosition.x - newAnnotation.x,\n      height: pointerPosition.y - newAnnotation.y,\n    });\n  };\n\n  const handleMouseUp = () => {\n    if (newAnnotation) {\n      // Add the new annotation to the list\n      setAnnotations((prevAnnotations) => {\n        const updatedAnnotations = [...prevAnnotations, newAnnotation];\n        return updatedAnnotations;\n      });\n\n      // Set the new annotation as active and open the transcription editor\n      setActiveAnnotation(annotations.length); // Use the new annotation as active\n      setTranscription(newAnnotation.transcription); // Load its transcription\n      setNewAnnotation(null); // Reset the drawing state\n    }\n  };\n\n  const handleAnnotationClick = (index) => {\n    // Cycle the confidence level color (0 -> 1 -> 2 -> 0)\n    const updatedAnnotations = [...annotations];\n    const currentAnnotation = updatedAnnotations[index];\n\n    // Increment the confidence level (cycling through 0, 1, 2)\n    const nextConfidenceLevel =\n      (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n\n    // Update the annotation's confidence level\n    updatedAnnotations[index] = {\n      ...currentAnnotation,\n      confidenceLevel: nextConfidenceLevel,\n    };\n    setAnnotations(updatedAnnotations);\n\n    // Set active annotation to open the transcription editor\n    setActiveAnnotation(index);\n    setTranscription(updatedAnnotations[index].transcription);\n  };\n\n  const handleTranscriptionChange = (event) => {\n    const updatedTranscription = event.target.value;\n    setTranscription(updatedTranscription);\n\n    // Auto-save the transcription when it changes\n    setAnnotations((prevAnnotations) =>\n      prevAnnotations.map((annotation, i) =>\n        i === activeAnnotation\n          ? { ...annotation, transcription: updatedTranscription }\n          : annotation\n      )\n    );\n  };\n\n  const handleResize = (e) => {\n    const newWidth = (e.clientX / window.innerWidth) * 100;\n    setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n  };\n\n  // Handlers for navigating whiteboards\n  const handleNext = () => {\n    const currentIndex = whiteboards.findIndex((wb) => wb.id === id);\n    const nextIndex = (currentIndex + 1) % whiteboards.length;\n    navigate(`/label/${whiteboards[nextIndex].id}`);\n  };\n\n  const handlePrevious = () => {\n    const currentIndex = whiteboards.findIndex((wb) => wb.id === id);\n    const prevIndex =\n      (currentIndex - 1 + whiteboards.length) % whiteboards.length;\n    navigate(`/label/${whiteboards[prevIndex].id}`);\n  };\n\n  return (\n    <Container\n      maxWidth={false}\n      style={{ height: \"100vh\", display: \"flex\", padding: 0 }}\n    >\n      {/* Whiteboard Section */}\n      <div\n        style={{\n          width: `${panelWidth}%`,\n          overflowY: \"auto\",\n          position: \"relative\",\n        }}\n      >\n        <IconButton\n          onClick={() => navigate(\"/whiteboards\")}\n          style={{\n            position: \"absolute\",\n            top: \"20px\",\n            left: \"20px\",\n            zIndex: 1000,\n          }}\n        >\n          <ArrowBack fontSize=\"large\" />\n        </IconButton>\n        <Typography\n          variant=\"h6\"\n          style={{\n            position: \"absolute\",\n            top: \"20px\",\n            left: \"50%\",\n            transform: \"translateX(-50%)\",\n            zIndex: 1000,\n            opacity: 0.8,\n            backgroundColor: \"white\",\n            padding: \"5px 15px\",\n            borderRadius: \"4px\",\n          }}\n        >\n          Whiteboard ID: {id}\n        </Typography>\n        {whiteboard ? (\n          <Stage\n            width={1200}\n            height={800}\n            onMouseDown={handleMouseDown}\n            onMouseMove={handleMouseMove}\n            onMouseUp={handleMouseUp}\n            style={{ margin: \"0 auto\" }}\n          >\n            <Layer>\n              <KonvaImage image={image} width={1200} height={800} />\n              {annotations.map((rect, i) => (\n                <Rect\n                  key={i}\n                  x={rect.x}\n                  y={rect.y}\n                  width={rect.width}\n                  height={rect.height}\n                  fill={confidenceColors[rect.confidenceLevel]} // Set color based on confidence level\n                  onClick={() => handleAnnotationClick(i)}\n                />\n              ))}\n              {newAnnotation && (\n                <Rect\n                  x={newAnnotation.x}\n                  y={newAnnotation.y}\n                  width={newAnnotation.width}\n                  height={newAnnotation.height}\n                  fill=\"rgba(0,0,255,0.5)\"\n                />\n              )}\n            </Layer>\n          </Stage>\n        ) : (\n          <Typography color=\"error\">Whiteboard not found</Typography>\n        )}\n\n        {/* Previous and Next Buttons */}\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={handlePrevious}\n          style={{\n            position: \"fixed\",\n            bottom: \"20px\",\n            left: \"20px\",\n            opacity: 0.7,\n          }}\n        >\n          Previous Whiteboard\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={handleNext}\n          style={{\n            position: \"fixed\",\n            bottom: \"20px\",\n            right: \"20px\",\n            opacity: 0.7,\n          }}\n        >\n          Next Whiteboard\n        </Button>\n      </div>\n\n      {/* Divider for Resizing */}\n      <div\n        onMouseDown={(e) => {\n          document.addEventListener(\"mousemove\", handleResize);\n          document.addEventListener(\"mouseup\", () => {\n            document.removeEventListener(\"mousemove\", handleResize);\n          });\n        }}\n        style={{\n          width: \"5px\",\n          cursor: \"col-resize\",\n          backgroundColor: \"#ccc\",\n        }}\n      />\n\n      {/* Transcription Panel */}\n      {activeAnnotation !== null && (\n        <Paper\n          style={{\n            width: `${100 - panelWidth}%`,\n            padding: \"20px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n            overflowY: \"auto\",\n          }}\n          square\n        >\n          <Typography variant=\"h6\" gutterBottom>\n            Edit Transcription\n          </Typography>\n          <TextField\n            fullWidth\n            label=\"Transcription\"\n            value={annotations[activeAnnotation]?.transcription || \"\"}\n            onChange={handleTranscriptionChange}\n            multiline\n            rows={4}\n            variant=\"outlined\"\n            inputRef={transcriptionRef} // Automatically focuses when active annotation changes\n            autoFocus // Automatically focuses the TextField\n          />\n        </Paper>\n      )}\n    </Container>\n  );\n}\n\nexport default WhiteboardLabelingPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}