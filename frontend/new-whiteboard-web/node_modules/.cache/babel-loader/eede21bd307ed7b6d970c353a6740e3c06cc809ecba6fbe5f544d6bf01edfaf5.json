{"ast":null,"code":"var _jsxFileName = \"/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/pages/WhiteboardLabelingPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef, useEffect } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import {\n//   Container,\n//   Typography,\n//   IconButton,\n//   TextField,\n//   Paper,\n//   Button,\n// } from \"@mui/material\";\n// import { ArrowBack } from \"@mui/icons-material\";\n// import { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\n// import useImage from \"use-image\";\n// import axios from \"axios\"; // Import axios for HTTP requests\n\n// const confidenceColors = [\n//   \"rgba(0, 255, 0, 0.5)\", // High Confidence (Green)\n//   \"rgba(255, 165, 0, 0.5)\", // Medium Confidence (Orange)\n//   \"rgba(255, 0, 0, 0.5)\", // Low Confidence (Red)\n// ];\n\n// function WhiteboardLabelingPage() {\n//   const { id } = useParams();\n//   const navigate = useNavigate();\n//   const [whiteboard, setWhiteboard] = useState(null);\n//   const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n//   const [annotations, setAnnotations] = useState([]);\n//   const [newAnnotation, setNewAnnotation] = useState(null);\n//   const [activeAnnotation, setActiveAnnotation] = useState(null);\n//   const [transcription, setTranscription] = useState(\"\");\n//   const [panelWidth, setPanelWidth] = useState(70);\n//   const transcriptionRef = useRef(null);\n//   const [pendingTranscription, setPendingTranscription] = useState(\"\");\n\n//   // Load whiteboard data and annotations from backend\n//   useEffect(() => {\n//     const fetchWhiteboardData = async () => {\n//       try {\n//         const whiteboardRes = await axios.get(\n//           `http://localhost:5001/whiteboards/${id}`,\n//           { withCredentials: true }\n//         );\n//         setWhiteboard(whiteboardRes.data);\n\n//         // Fetch and set annotations\n//         const annotationsRes = await axios.get(\n//           `http://localhost:5001/whiteboards/${id}/annotations`,\n//           { withCredentials: true }\n//         );\n//         setAnnotations(annotationsRes.data);\n//         console.log(\"IT GOT HERE\");\n//         console.log(annotationsRes.data);\n//       } catch (error) {\n//         console.error(\"Error fetching whiteboard data:\", error);\n//       }\n//     };\n\n//     fetchWhiteboardData();\n//   }, [id]);\n\n//   useEffect(() => {\n//     if (activeAnnotation !== null && transcriptionRef.current) {\n//       transcriptionRef.current.focus();\n//     }\n//   }, [activeAnnotation]);\n\n//   const handleMouseDown = (e) => {\n//     const { x, y } = e.target.getStage().getPointerPosition();\n//     setNewAnnotation({\n//       x,\n//       y,\n//       width: 0,\n//       height: 0,\n//       confidenceLevel: 0,\n//       transcription: \"\",\n//     });\n//   };\n\n//   const handleMouseMove = (e) => {\n//     if (!newAnnotation) return;\n//     const stage = e.target.getStage();\n//     const pointerPosition = stage.getPointerPosition();\n//     setNewAnnotation({\n//       ...newAnnotation,\n//       width: pointerPosition.x - newAnnotation.x,\n//       height: pointerPosition.y - newAnnotation.y,\n//     });\n//   };\n\n//   const handleMouseUp = () => {\n//     if (newAnnotation) {\n//       setAnnotations((prevAnnotations) => [...prevAnnotations, newAnnotation]);\n//       setActiveAnnotation(annotations.length);\n//       setTranscription(newAnnotation.transcription);\n\n//       // Save new annotation to the backend\n//       saveAnnotation(newAnnotation);\n//       setNewAnnotation(null);\n//     }\n//   };\n\n//   // Function to save a new annotation to the backend\n//   const saveAnnotation = async (annotation) => {\n//     console.log(annotation);\n//     console.log(`/whiteboards/${id}/annotations`);\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5001/whiteboards/${id}/annotations`,\n//         annotation,\n//         { withCredentials: true }\n//       );\n\n//       console.log(\"it got here\");\n\n//       // Update the annotations state with the newly saved annotation, including its backend `_id`\n//       setAnnotations((prevAnnotations) => [\n//         ...prevAnnotations,\n//         { ...annotation, _id: response.data._id },\n//       ]);\n//     } catch (error) {\n//       console.error(\"Error saving annotation:\", error);\n//     }\n//   };\n\n//   // Function to update an existing annotation in the backend and in the state\n//   const updateAnnotation = async (index, updatedFields) => {\n//     const annotation = annotations[index];\n\n//     try {\n//       const response = await axios.patch(\n//         `http://localhost:5001/annotations/${annotation._id}`,\n//         updatedFields,\n//         { withCredentials: true }\n//       );\n\n//       // Update the specific annotation in the state based on its index\n//       setAnnotations((prevAnnotations) =>\n//         prevAnnotations.map((a, i) => (i === index ? response.data : a))\n//       );\n//     } catch (error) {\n//       console.error(\"Error updating annotation:\", error);\n//     }\n//   };\n\n//   const handleAnnotationClick = (index) => {\n//     // Save current transcription if there's an active annotation and it has changed\n//     if (activeAnnotation !== null) {\n//       saveTranscription();\n//     }\n\n//     // Cycle confidence level (color) of the clicked annotation\n//     const updatedAnnotations = [...annotations];\n//     const currentAnnotation = updatedAnnotations[index];\n//     const nextConfidenceLevel =\n//       (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n\n//     updatedAnnotations[index] = {\n//       ...currentAnnotation,\n//       confidenceLevel: nextConfidenceLevel,\n//     };\n\n//     setAnnotations(updatedAnnotations);\n//     setActiveAnnotation(index);\n//     setPendingTranscription(currentAnnotation.transcription || \"\");\n\n//     // Update confidence level in the backend\n//     updateAnnotation(index, { confidenceLevel: nextConfidenceLevel });\n//   };\n\n//   const saveTranscription = () => {\n//     if (\n//       activeAnnotation !== null &&\n//       pendingTranscription !== annotations[activeAnnotation]?.transcription\n//     ) {\n//       updateAnnotation(activeAnnotation, {\n//         transcription: pendingTranscription,\n//       });\n//     }\n//   };\n\n//   const handleTranscriptionChange = (event) => {\n//     const updatedTranscription = event.target.value;\n//     setPendingTranscription(updatedTranscription);\n//   };\n\n//   // Set pending transcription when active annotation changes\n//   useEffect(() => {\n//     if (activeAnnotation !== null) {\n//       setPendingTranscription(\n//         annotations[activeAnnotation]?.transcription || \"\"\n//       );\n//     }\n//   }, [activeAnnotation, annotations]);\n\n//   const handleResize = (e) => {\n//     const newWidth = (e.clientX / window.innerWidth) * 100;\n//     setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n//   };\n\n//   return (\n//     <Container\n//       maxWidth={false}\n//       style={{ height: \"100vh\", display: \"flex\", padding: 0 }}\n//     >\n//       <div\n//         style={{\n//           width: `${panelWidth}%`,\n//           overflowY: \"auto\",\n//           position: \"relative\",\n//         }}\n//       >\n//         <IconButton\n//           onClick={async () => {\n//             try {\n//               await saveTranscription(); // Save transcription before navigating\n//               navigate(\"/whiteboards\"); // Navigate only after save completes\n//             } catch (error) {\n//               console.error(\n//                 \"Failed to save transcription before navigating:\",\n//                 error\n//               );\n//             }\n//           }}\n//           style={{\n//             position: \"absolute\",\n//             top: \"20px\",\n//             left: \"20px\",\n//             zIndex: 1000,\n//           }}\n//         >\n//           <ArrowBack fontSize=\"large\" />\n//         </IconButton>\n\n//         <Typography\n//           variant=\"h6\"\n//           style={{\n//             position: \"absolute\",\n//             top: \"20px\",\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             zIndex: 1000,\n//             opacity: 0.8,\n//             backgroundColor: \"white\",\n//             padding: \"5px 15px\",\n//             borderRadius: \"4px\",\n//           }}\n//         >\n//           Whiteboard ID: {id}\n//         </Typography>\n//         {whiteboard ? (\n//           <Stage\n//             width={1200}\n//             height={800}\n//             onMouseDown={handleMouseDown}\n//             onMouseMove={handleMouseMove}\n//             onMouseUp={handleMouseUp}\n//             style={{ margin: \"0 auto\" }}\n//           >\n//             <Layer>\n//               <KonvaImage image={image} width={1200} height={800} />\n//               {annotations.map((rect, i) => (\n//                 <Rect\n//                   key={i}\n//                   x={rect.x}\n//                   y={rect.y}\n//                   width={rect.width}\n//                   height={rect.height}\n//                   fill={confidenceColors[rect.confidenceLevel]}\n//                   onClick={() => handleAnnotationClick(i)}\n//                 />\n//               ))}\n//               {newAnnotation && (\n//                 <Rect\n//                   x={newAnnotation.x}\n//                   y={newAnnotation.y}\n//                   width={newAnnotation.width}\n//                   height={newAnnotation.height}\n//                   fill=\"rgba(0,0,255,0.5)\"\n//                 />\n//               )}\n//             </Layer>\n//           </Stage>\n//         ) : (\n//           <Typography color=\"error\">Whiteboard not found</Typography>\n//         )}\n//       </div>\n\n//       {/* Divider for Resizing */}\n//       <div\n//         onMouseDown={(e) => {\n//           document.addEventListener(\"mousemove\", handleResize);\n//           document.addEventListener(\"mouseup\", () => {\n//             document.removeEventListener(\"mousemove\", handleResize);\n//           });\n//         }}\n//         style={{\n//           width: \"5px\",\n//           cursor: \"col-resize\",\n//           backgroundColor: \"#ccc\",\n//         }}\n//       />\n\n//       {/* Transcription Panel */}\n//       {activeAnnotation !== null && (\n//         <Paper\n//           style={{\n//             width: `${100 - panelWidth}%`,\n//             padding: \"20px\",\n//             display: \"flex\",\n//             flexDirection: \"column\",\n//             alignItems: \"flex-start\",\n//             boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n//             overflowY: \"auto\",\n//           }}\n//           square\n//         >\n//           <Typography variant=\"h6\" gutterBottom>\n//             Edit Transcription\n//           </Typography>\n//           <TextField\n//             fullWidth\n//             label=\"Transcription\"\n//             value={pendingTranscription}\n//             onChange={handleTranscriptionChange}\n//             onBlur={saveTranscription}\n//             multiline\n//             rows={4}\n//             variant=\"outlined\"\n//             inputRef={transcriptionRef}\n//             autoFocus\n//           />\n//         </Paper>\n//       )}\n//     </Container>\n//   );\n// }\n\n// export default WhiteboardLabelingPage;\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Container, Typography, IconButton, TextField, Paper, Button } from \"@mui/material\";\nimport { ArrowBack } from \"@mui/icons-material\";\nimport { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\nimport useImage from \"use-image\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst confidenceColors = [\"rgba(0, 255, 0, 0.5)\",\n// High Confidence (Green)\n\"rgba(255, 165, 0, 0.5)\",\n// Medium Confidence (Orange)\n\"rgba(255, 0, 0, 0.5)\" // Low Confidence (Red)\n];\nfunction WhiteboardLabelingPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [whiteboard, setWhiteboard] = useState(null);\n  const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n  const [annotations, setAnnotations] = useState([]);\n  const [newAnnotation, setNewAnnotation] = useState(null);\n  const [activeAnnotation, setActiveAnnotation] = useState(null);\n  const [pendingTranscription, setPendingTranscription] = useState(\"\");\n  const [panelWidth, setPanelWidth] = useState(70); // Set default panel width\n\n  const transcriptionRef = useRef(null);\n  useEffect(() => {\n    const fetchWhiteboardData = async () => {\n      try {\n        const whiteboardRes = await axios.get(`http://localhost:5001/whiteboards/${id}`, {\n          withCredentials: true\n        });\n        setWhiteboard(whiteboardRes.data);\n        const annotationsRes = await axios.get(`http://localhost:5001/whiteboards/${id}/annotations`, {\n          withCredentials: true\n        });\n        setAnnotations(annotationsRes.data);\n      } catch (error) {\n        console.error(\"Error fetching whiteboard data:\", error);\n      }\n    };\n    fetchWhiteboardData();\n  }, [id]);\n  useEffect(() => {\n    if (activeAnnotation !== null && transcriptionRef.current) {\n      transcriptionRef.current.focus();\n    }\n  }, [activeAnnotation]);\n  const handleMouseDown = e => {\n    const {\n      x,\n      y\n    } = e.target.getStage().getPointerPosition();\n    setNewAnnotation({\n      x,\n      y,\n      width: 0,\n      height: 0,\n      confidenceLevel: 0,\n      transcription: \"\"\n    });\n  };\n  const handleMouseMove = e => {\n    if (!newAnnotation) return;\n    const stage = e.target.getStage();\n    const pointerPosition = stage.getPointerPosition();\n    setNewAnnotation({\n      ...newAnnotation,\n      width: pointerPosition.x - newAnnotation.x,\n      height: pointerPosition.y - newAnnotation.y\n    });\n  };\n  const handleMouseUp = () => {\n    if (newAnnotation) {\n      setAnnotations(prevAnnotations => [...prevAnnotations, newAnnotation]);\n      setActiveAnnotation(annotations.length);\n      setPendingTranscription(newAnnotation.transcription);\n      saveAnnotation(newAnnotation);\n      setNewAnnotation(null);\n    }\n  };\n  const saveAnnotation = async annotation => {\n    try {\n      const response = await axios.post(`http://localhost:5001/whiteboards/${id}/annotations`, annotation, {\n        withCredentials: true\n      });\n      setAnnotations(prevAnnotations => [...prevAnnotations, {\n        ...annotation,\n        _id: response.data._id\n      }]);\n    } catch (error) {\n      console.error(\"Error saving annotation:\", error);\n    }\n  };\n  const updateAnnotation = async (index, updatedFields) => {\n    const annotation = annotations[index];\n    try {\n      const response = await axios.patch(`http://localhost:5001/annotations/${annotation._id}`, updatedFields, {\n        withCredentials: true\n      });\n      setAnnotations(prevAnnotations => prevAnnotations.map((a, i) => i === index ? response.data : a));\n    } catch (error) {\n      console.error(\"Error updating annotation:\", error);\n    }\n  };\n  const handleAnnotationClick = index => {\n    if (activeAnnotation !== null) {\n      saveTranscription();\n    }\n    const updatedAnnotations = [...annotations];\n    const currentAnnotation = updatedAnnotations[index];\n    const nextConfidenceLevel = (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n    updatedAnnotations[index] = {\n      ...currentAnnotation,\n      confidenceLevel: nextConfidenceLevel\n    };\n    setAnnotations(updatedAnnotations);\n    setActiveAnnotation(index);\n    setPendingTranscription(currentAnnotation.transcription || \"\");\n    updateAnnotation(index, {\n      confidenceLevel: nextConfidenceLevel\n    });\n  };\n  const saveTranscription = () => {\n    if (activeAnnotation !== null) {\n      updateAnnotation(activeAnnotation, {\n        transcription: pendingTranscription\n      });\n    }\n  };\n  const handleTranscriptionChange = event => {\n    setPendingTranscription(event.target.value);\n  };\n  useEffect(() => {\n    if (activeAnnotation !== null) {\n      var _annotations$activeAn;\n      setPendingTranscription(((_annotations$activeAn = annotations[activeAnnotation]) === null || _annotations$activeAn === void 0 ? void 0 : _annotations$activeAn.transcription) || \"\");\n    }\n  }, [activeAnnotation, annotations]);\n  const handleResize = e => {\n    const newWidth = e.clientX / window.innerWidth * 100;\n    setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: false,\n    style: {\n      height: \"100vh\",\n      display: \"flex\",\n      padding: 0\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: `${panelWidth}%`,\n        overflowY: \"auto\",\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: async () => {\n          try {\n            await saveTranscription();\n            navigate(\"/whiteboards\");\n          } catch (error) {\n            console.error(\"Failed to save transcription before navigating:\", error);\n          }\n        },\n        style: {\n          position: \"absolute\",\n          top: \"20px\",\n          left: \"20px\",\n          zIndex: 1000\n        },\n        children: /*#__PURE__*/_jsxDEV(ArrowBack, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        style: {\n          position: \"absolute\",\n          top: \"20px\",\n          left: \"50%\",\n          transform: \"translateX(-50%)\",\n          zIndex: 1000,\n          opacity: 0.8,\n          backgroundColor: \"white\",\n          padding: \"5px 15px\",\n          borderRadius: \"4px\"\n        },\n        children: [\"Whiteboard ID: \", id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 9\n      }, this), whiteboard ? /*#__PURE__*/_jsxDEV(Stage, {\n        width: 1200,\n        height: 800,\n        onMouseDown: handleMouseDown,\n        onMouseMove: handleMouseMove,\n        onMouseUp: handleMouseUp,\n        style: {\n          margin: \"0 auto\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Layer, {\n          children: [/*#__PURE__*/_jsxDEV(KonvaImage, {\n            image: image,\n            width: 1200,\n            height: 800\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 15\n          }, this), annotations.map((rect, i) => /*#__PURE__*/_jsxDEV(Rect, {\n            x: rect.x,\n            y: rect.y,\n            width: rect.width,\n            height: rect.height,\n            fill: confidenceColors[rect.confidenceLevel],\n            onClick: () => handleAnnotationClick(i)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 17\n          }, this)), newAnnotation && /*#__PURE__*/_jsxDEV(Rect, {\n            x: newAnnotation.x,\n            y: newAnnotation.y,\n            width: newAnnotation.width,\n            height: newAnnotation.height,\n            fill: \"rgba(0,0,255,0.5)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        children: \"Whiteboard not found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 7\n    }, this), activeAnnotation !== null && /*#__PURE__*/_jsxDEV(Paper, {\n      style: {\n        width: `${100 - panelWidth}%`,\n        padding: \"20px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\",\n        boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n        overflowY: \"auto\"\n      },\n      square: true,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Edit Transcription\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"Transcription\",\n        value: pendingTranscription,\n        onChange: handleTranscriptionChange,\n        multiline: true,\n        rows: 4,\n        variant: \"outlined\",\n        inputRef: transcriptionRef,\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: saveTranscription,\n        style: {\n          marginTop: \"10px\"\n        },\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 516,\n    columnNumber: 5\n  }, this);\n}\n_s(WhiteboardLabelingPage, \"mPCjcZIOKegRGwiJ4jNLMs1vdwk=\", false, function () {\n  return [useParams, useNavigate, useImage];\n});\n_c = WhiteboardLabelingPage;\nexport default WhiteboardLabelingPage;\nvar _c;\n$RefreshReg$(_c, \"WhiteboardLabelingPage\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useParams","useNavigate","Container","Typography","IconButton","TextField","Paper","Button","ArrowBack","Stage","Layer","Image","KonvaImage","Rect","useImage","axios","jsxDEV","_jsxDEV","confidenceColors","WhiteboardLabelingPage","_s","id","navigate","whiteboard","setWhiteboard","image","imageUrl","annotations","setAnnotations","newAnnotation","setNewAnnotation","activeAnnotation","setActiveAnnotation","pendingTranscription","setPendingTranscription","panelWidth","setPanelWidth","transcriptionRef","fetchWhiteboardData","whiteboardRes","get","withCredentials","data","annotationsRes","error","console","current","focus","handleMouseDown","e","x","y","target","getStage","getPointerPosition","width","height","confidenceLevel","transcription","handleMouseMove","stage","pointerPosition","handleMouseUp","prevAnnotations","length","saveAnnotation","annotation","response","post","_id","updateAnnotation","index","updatedFields","patch","map","a","i","handleAnnotationClick","saveTranscription","updatedAnnotations","currentAnnotation","nextConfidenceLevel","handleTranscriptionChange","event","value","_annotations$activeAn","handleResize","newWidth","clientX","window","innerWidth","Math","max","min","maxWidth","style","display","padding","children","overflowY","position","onClick","top","left","zIndex","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","variant","transform","opacity","backgroundColor","borderRadius","onMouseDown","onMouseMove","onMouseUp","margin","rect","fill","color","flexDirection","alignItems","boxShadow","square","gutterBottom","fullWidth","label","onChange","multiline","rows","inputRef","autoFocus","marginTop","_c","$RefreshReg$"],"sources":["/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/pages/WhiteboardLabelingPage.js"],"sourcesContent":["// import React, { useState, useRef, useEffect } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import {\n//   Container,\n//   Typography,\n//   IconButton,\n//   TextField,\n//   Paper,\n//   Button,\n// } from \"@mui/material\";\n// import { ArrowBack } from \"@mui/icons-material\";\n// import { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\n// import useImage from \"use-image\";\n// import axios from \"axios\"; // Import axios for HTTP requests\n\n// const confidenceColors = [\n//   \"rgba(0, 255, 0, 0.5)\", // High Confidence (Green)\n//   \"rgba(255, 165, 0, 0.5)\", // Medium Confidence (Orange)\n//   \"rgba(255, 0, 0, 0.5)\", // Low Confidence (Red)\n// ];\n\n// function WhiteboardLabelingPage() {\n//   const { id } = useParams();\n//   const navigate = useNavigate();\n//   const [whiteboard, setWhiteboard] = useState(null);\n//   const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n//   const [annotations, setAnnotations] = useState([]);\n//   const [newAnnotation, setNewAnnotation] = useState(null);\n//   const [activeAnnotation, setActiveAnnotation] = useState(null);\n//   const [transcription, setTranscription] = useState(\"\");\n//   const [panelWidth, setPanelWidth] = useState(70);\n//   const transcriptionRef = useRef(null);\n//   const [pendingTranscription, setPendingTranscription] = useState(\"\");\n\n//   // Load whiteboard data and annotations from backend\n//   useEffect(() => {\n//     const fetchWhiteboardData = async () => {\n//       try {\n//         const whiteboardRes = await axios.get(\n//           `http://localhost:5001/whiteboards/${id}`,\n//           { withCredentials: true }\n//         );\n//         setWhiteboard(whiteboardRes.data);\n\n//         // Fetch and set annotations\n//         const annotationsRes = await axios.get(\n//           `http://localhost:5001/whiteboards/${id}/annotations`,\n//           { withCredentials: true }\n//         );\n//         setAnnotations(annotationsRes.data);\n//         console.log(\"IT GOT HERE\");\n//         console.log(annotationsRes.data);\n//       } catch (error) {\n//         console.error(\"Error fetching whiteboard data:\", error);\n//       }\n//     };\n\n//     fetchWhiteboardData();\n//   }, [id]);\n\n//   useEffect(() => {\n//     if (activeAnnotation !== null && transcriptionRef.current) {\n//       transcriptionRef.current.focus();\n//     }\n//   }, [activeAnnotation]);\n\n//   const handleMouseDown = (e) => {\n//     const { x, y } = e.target.getStage().getPointerPosition();\n//     setNewAnnotation({\n//       x,\n//       y,\n//       width: 0,\n//       height: 0,\n//       confidenceLevel: 0,\n//       transcription: \"\",\n//     });\n//   };\n\n//   const handleMouseMove = (e) => {\n//     if (!newAnnotation) return;\n//     const stage = e.target.getStage();\n//     const pointerPosition = stage.getPointerPosition();\n//     setNewAnnotation({\n//       ...newAnnotation,\n//       width: pointerPosition.x - newAnnotation.x,\n//       height: pointerPosition.y - newAnnotation.y,\n//     });\n//   };\n\n//   const handleMouseUp = () => {\n//     if (newAnnotation) {\n//       setAnnotations((prevAnnotations) => [...prevAnnotations, newAnnotation]);\n//       setActiveAnnotation(annotations.length);\n//       setTranscription(newAnnotation.transcription);\n\n//       // Save new annotation to the backend\n//       saveAnnotation(newAnnotation);\n//       setNewAnnotation(null);\n//     }\n//   };\n\n//   // Function to save a new annotation to the backend\n//   const saveAnnotation = async (annotation) => {\n//     console.log(annotation);\n//     console.log(`/whiteboards/${id}/annotations`);\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5001/whiteboards/${id}/annotations`,\n//         annotation,\n//         { withCredentials: true }\n//       );\n\n//       console.log(\"it got here\");\n\n//       // Update the annotations state with the newly saved annotation, including its backend `_id`\n//       setAnnotations((prevAnnotations) => [\n//         ...prevAnnotations,\n//         { ...annotation, _id: response.data._id },\n//       ]);\n//     } catch (error) {\n//       console.error(\"Error saving annotation:\", error);\n//     }\n//   };\n\n//   // Function to update an existing annotation in the backend and in the state\n//   const updateAnnotation = async (index, updatedFields) => {\n//     const annotation = annotations[index];\n\n//     try {\n//       const response = await axios.patch(\n//         `http://localhost:5001/annotations/${annotation._id}`,\n//         updatedFields,\n//         { withCredentials: true }\n//       );\n\n//       // Update the specific annotation in the state based on its index\n//       setAnnotations((prevAnnotations) =>\n//         prevAnnotations.map((a, i) => (i === index ? response.data : a))\n//       );\n//     } catch (error) {\n//       console.error(\"Error updating annotation:\", error);\n//     }\n//   };\n\n//   const handleAnnotationClick = (index) => {\n//     // Save current transcription if there's an active annotation and it has changed\n//     if (activeAnnotation !== null) {\n//       saveTranscription();\n//     }\n\n//     // Cycle confidence level (color) of the clicked annotation\n//     const updatedAnnotations = [...annotations];\n//     const currentAnnotation = updatedAnnotations[index];\n//     const nextConfidenceLevel =\n//       (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n\n//     updatedAnnotations[index] = {\n//       ...currentAnnotation,\n//       confidenceLevel: nextConfidenceLevel,\n//     };\n\n//     setAnnotations(updatedAnnotations);\n//     setActiveAnnotation(index);\n//     setPendingTranscription(currentAnnotation.transcription || \"\");\n\n//     // Update confidence level in the backend\n//     updateAnnotation(index, { confidenceLevel: nextConfidenceLevel });\n//   };\n\n//   const saveTranscription = () => {\n//     if (\n//       activeAnnotation !== null &&\n//       pendingTranscription !== annotations[activeAnnotation]?.transcription\n//     ) {\n//       updateAnnotation(activeAnnotation, {\n//         transcription: pendingTranscription,\n//       });\n//     }\n//   };\n\n//   const handleTranscriptionChange = (event) => {\n//     const updatedTranscription = event.target.value;\n//     setPendingTranscription(updatedTranscription);\n//   };\n\n//   // Set pending transcription when active annotation changes\n//   useEffect(() => {\n//     if (activeAnnotation !== null) {\n//       setPendingTranscription(\n//         annotations[activeAnnotation]?.transcription || \"\"\n//       );\n//     }\n//   }, [activeAnnotation, annotations]);\n\n//   const handleResize = (e) => {\n//     const newWidth = (e.clientX / window.innerWidth) * 100;\n//     setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n//   };\n\n//   return (\n//     <Container\n//       maxWidth={false}\n//       style={{ height: \"100vh\", display: \"flex\", padding: 0 }}\n//     >\n//       <div\n//         style={{\n//           width: `${panelWidth}%`,\n//           overflowY: \"auto\",\n//           position: \"relative\",\n//         }}\n//       >\n//         <IconButton\n//           onClick={async () => {\n//             try {\n//               await saveTranscription(); // Save transcription before navigating\n//               navigate(\"/whiteboards\"); // Navigate only after save completes\n//             } catch (error) {\n//               console.error(\n//                 \"Failed to save transcription before navigating:\",\n//                 error\n//               );\n//             }\n//           }}\n//           style={{\n//             position: \"absolute\",\n//             top: \"20px\",\n//             left: \"20px\",\n//             zIndex: 1000,\n//           }}\n//         >\n//           <ArrowBack fontSize=\"large\" />\n//         </IconButton>\n\n//         <Typography\n//           variant=\"h6\"\n//           style={{\n//             position: \"absolute\",\n//             top: \"20px\",\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             zIndex: 1000,\n//             opacity: 0.8,\n//             backgroundColor: \"white\",\n//             padding: \"5px 15px\",\n//             borderRadius: \"4px\",\n//           }}\n//         >\n//           Whiteboard ID: {id}\n//         </Typography>\n//         {whiteboard ? (\n//           <Stage\n//             width={1200}\n//             height={800}\n//             onMouseDown={handleMouseDown}\n//             onMouseMove={handleMouseMove}\n//             onMouseUp={handleMouseUp}\n//             style={{ margin: \"0 auto\" }}\n//           >\n//             <Layer>\n//               <KonvaImage image={image} width={1200} height={800} />\n//               {annotations.map((rect, i) => (\n//                 <Rect\n//                   key={i}\n//                   x={rect.x}\n//                   y={rect.y}\n//                   width={rect.width}\n//                   height={rect.height}\n//                   fill={confidenceColors[rect.confidenceLevel]}\n//                   onClick={() => handleAnnotationClick(i)}\n//                 />\n//               ))}\n//               {newAnnotation && (\n//                 <Rect\n//                   x={newAnnotation.x}\n//                   y={newAnnotation.y}\n//                   width={newAnnotation.width}\n//                   height={newAnnotation.height}\n//                   fill=\"rgba(0,0,255,0.5)\"\n//                 />\n//               )}\n//             </Layer>\n//           </Stage>\n//         ) : (\n//           <Typography color=\"error\">Whiteboard not found</Typography>\n//         )}\n//       </div>\n\n//       {/* Divider for Resizing */}\n//       <div\n//         onMouseDown={(e) => {\n//           document.addEventListener(\"mousemove\", handleResize);\n//           document.addEventListener(\"mouseup\", () => {\n//             document.removeEventListener(\"mousemove\", handleResize);\n//           });\n//         }}\n//         style={{\n//           width: \"5px\",\n//           cursor: \"col-resize\",\n//           backgroundColor: \"#ccc\",\n//         }}\n//       />\n\n//       {/* Transcription Panel */}\n//       {activeAnnotation !== null && (\n//         <Paper\n//           style={{\n//             width: `${100 - panelWidth}%`,\n//             padding: \"20px\",\n//             display: \"flex\",\n//             flexDirection: \"column\",\n//             alignItems: \"flex-start\",\n//             boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n//             overflowY: \"auto\",\n//           }}\n//           square\n//         >\n//           <Typography variant=\"h6\" gutterBottom>\n//             Edit Transcription\n//           </Typography>\n//           <TextField\n//             fullWidth\n//             label=\"Transcription\"\n//             value={pendingTranscription}\n//             onChange={handleTranscriptionChange}\n//             onBlur={saveTranscription}\n//             multiline\n//             rows={4}\n//             variant=\"outlined\"\n//             inputRef={transcriptionRef}\n//             autoFocus\n//           />\n//         </Paper>\n//       )}\n//     </Container>\n//   );\n// }\n\n// export default WhiteboardLabelingPage;\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport {\n  Container,\n  Typography,\n  IconButton,\n  TextField,\n  Paper,\n  Button,\n} from \"@mui/material\";\nimport { ArrowBack } from \"@mui/icons-material\";\nimport { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\nimport useImage from \"use-image\";\nimport axios from \"axios\";\n\nconst confidenceColors = [\n  \"rgba(0, 255, 0, 0.5)\", // High Confidence (Green)\n  \"rgba(255, 165, 0, 0.5)\", // Medium Confidence (Orange)\n  \"rgba(255, 0, 0, 0.5)\", // Low Confidence (Red)\n];\n\nfunction WhiteboardLabelingPage() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [whiteboard, setWhiteboard] = useState(null);\n  const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n  const [annotations, setAnnotations] = useState([]);\n  const [newAnnotation, setNewAnnotation] = useState(null);\n  const [activeAnnotation, setActiveAnnotation] = useState(null);\n  const [pendingTranscription, setPendingTranscription] = useState(\"\");\n  const [panelWidth, setPanelWidth] = useState(70); // Set default panel width\n\n  const transcriptionRef = useRef(null);\n\n  useEffect(() => {\n    const fetchWhiteboardData = async () => {\n      try {\n        const whiteboardRes = await axios.get(\n          `http://localhost:5001/whiteboards/${id}`,\n          { withCredentials: true }\n        );\n        setWhiteboard(whiteboardRes.data);\n\n        const annotationsRes = await axios.get(\n          `http://localhost:5001/whiteboards/${id}/annotations`,\n          { withCredentials: true }\n        );\n        setAnnotations(annotationsRes.data);\n      } catch (error) {\n        console.error(\"Error fetching whiteboard data:\", error);\n      }\n    };\n\n    fetchWhiteboardData();\n  }, [id]);\n\n  useEffect(() => {\n    if (activeAnnotation !== null && transcriptionRef.current) {\n      transcriptionRef.current.focus();\n    }\n  }, [activeAnnotation]);\n\n  const handleMouseDown = (e) => {\n    const { x, y } = e.target.getStage().getPointerPosition();\n    setNewAnnotation({\n      x,\n      y,\n      width: 0,\n      height: 0,\n      confidenceLevel: 0,\n      transcription: \"\",\n    });\n  };\n\n  const handleMouseMove = (e) => {\n    if (!newAnnotation) return;\n    const stage = e.target.getStage();\n    const pointerPosition = stage.getPointerPosition();\n    setNewAnnotation({\n      ...newAnnotation,\n      width: pointerPosition.x - newAnnotation.x,\n      height: pointerPosition.y - newAnnotation.y,\n    });\n  };\n\n  const handleMouseUp = () => {\n    if (newAnnotation) {\n      setAnnotations((prevAnnotations) => [...prevAnnotations, newAnnotation]);\n      setActiveAnnotation(annotations.length);\n      setPendingTranscription(newAnnotation.transcription);\n\n      saveAnnotation(newAnnotation);\n      setNewAnnotation(null);\n    }\n  };\n\n  const saveAnnotation = async (annotation) => {\n    try {\n      const response = await axios.post(\n        `http://localhost:5001/whiteboards/${id}/annotations`,\n        annotation,\n        { withCredentials: true }\n      );\n      setAnnotations((prevAnnotations) => [\n        ...prevAnnotations,\n        { ...annotation, _id: response.data._id },\n      ]);\n    } catch (error) {\n      console.error(\"Error saving annotation:\", error);\n    }\n  };\n\n  const updateAnnotation = async (index, updatedFields) => {\n    const annotation = annotations[index];\n    try {\n      const response = await axios.patch(\n        `http://localhost:5001/annotations/${annotation._id}`,\n        updatedFields,\n        { withCredentials: true }\n      );\n      setAnnotations((prevAnnotations) =>\n        prevAnnotations.map((a, i) => (i === index ? response.data : a))\n      );\n    } catch (error) {\n      console.error(\"Error updating annotation:\", error);\n    }\n  };\n\n  const handleAnnotationClick = (index) => {\n    if (activeAnnotation !== null) {\n      saveTranscription();\n    }\n\n    const updatedAnnotations = [...annotations];\n    const currentAnnotation = updatedAnnotations[index];\n    const nextConfidenceLevel =\n      (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n\n    updatedAnnotations[index] = {\n      ...currentAnnotation,\n      confidenceLevel: nextConfidenceLevel,\n    };\n\n    setAnnotations(updatedAnnotations);\n    setActiveAnnotation(index);\n    setPendingTranscription(currentAnnotation.transcription || \"\");\n\n    updateAnnotation(index, { confidenceLevel: nextConfidenceLevel });\n  };\n\n  const saveTranscription = () => {\n    if (activeAnnotation !== null) {\n      updateAnnotation(activeAnnotation, {\n        transcription: pendingTranscription,\n      });\n    }\n  };\n\n  const handleTranscriptionChange = (event) => {\n    setPendingTranscription(event.target.value);\n  };\n\n  useEffect(() => {\n    if (activeAnnotation !== null) {\n      setPendingTranscription(\n        annotations[activeAnnotation]?.transcription || \"\"\n      );\n    }\n  }, [activeAnnotation, annotations]);\n\n  const handleResize = (e) => {\n    const newWidth = (e.clientX / window.innerWidth) * 100;\n    setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n  };\n\n  return (\n    <Container\n      maxWidth={false}\n      style={{ height: \"100vh\", display: \"flex\", padding: 0 }}\n    >\n      <div\n        style={{\n          width: `${panelWidth}%`,\n          overflowY: \"auto\",\n          position: \"relative\",\n        }}\n      >\n        <IconButton\n          onClick={async () => {\n            try {\n              await saveTranscription();\n              navigate(\"/whiteboards\");\n            } catch (error) {\n              console.error(\n                \"Failed to save transcription before navigating:\",\n                error\n              );\n            }\n          }}\n          style={{\n            position: \"absolute\",\n            top: \"20px\",\n            left: \"20px\",\n            zIndex: 1000,\n          }}\n        >\n          <ArrowBack fontSize=\"large\" />\n        </IconButton>\n\n        <Typography\n          variant=\"h6\"\n          style={{\n            position: \"absolute\",\n            top: \"20px\",\n            left: \"50%\",\n            transform: \"translateX(-50%)\",\n            zIndex: 1000,\n            opacity: 0.8,\n            backgroundColor: \"white\",\n            padding: \"5px 15px\",\n            borderRadius: \"4px\",\n          }}\n        >\n          Whiteboard ID: {id}\n        </Typography>\n\n        {whiteboard ? (\n          <Stage\n            width={1200}\n            height={800}\n            onMouseDown={handleMouseDown}\n            onMouseMove={handleMouseMove}\n            onMouseUp={handleMouseUp}\n            style={{ margin: \"0 auto\" }}\n          >\n            <Layer>\n              <KonvaImage image={image} width={1200} height={800} />\n              {annotations.map((rect, i) => (\n                <Rect\n                  key={i}\n                  x={rect.x}\n                  y={rect.y}\n                  width={rect.width}\n                  height={rect.height}\n                  fill={confidenceColors[rect.confidenceLevel]}\n                  onClick={() => handleAnnotationClick(i)}\n                />\n              ))}\n              {newAnnotation && (\n                <Rect\n                  x={newAnnotation.x}\n                  y={newAnnotation.y}\n                  width={newAnnotation.width}\n                  height={newAnnotation.height}\n                  fill=\"rgba(0,0,255,0.5)\"\n                />\n              )}\n            </Layer>\n          </Stage>\n        ) : (\n          <Typography color=\"error\">Whiteboard not found</Typography>\n        )}\n      </div>\n\n      {activeAnnotation !== null && (\n        <Paper\n          style={{\n            width: `${100 - panelWidth}%`,\n            padding: \"20px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n            overflowY: \"auto\",\n          }}\n          square\n        >\n          <Typography variant=\"h6\" gutterBottom>\n            Edit Transcription\n          </Typography>\n          <TextField\n            fullWidth\n            label=\"Transcription\"\n            value={pendingTranscription}\n            onChange={handleTranscriptionChange}\n            multiline\n            rows={4}\n            variant=\"outlined\"\n            inputRef={transcriptionRef}\n            autoFocus\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={saveTranscription}\n            style={{ marginTop: \"10px\" }}\n          >\n            Save\n          </Button>\n        </Paper>\n      )}\n    </Container>\n  );\n}\n\nexport default WhiteboardLabelingPage;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}