{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.jsonparse = {}));\n})(this, function (exports) {\n  'use strict';\n\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation.\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n  purpose with or without fee is hereby granted.\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n  PERFORMANCE OF THIS SOFTWARE.\r\n  ***************************************************************************** */\n  /* global Reflect, Promise */\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  function __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  }\n  var __assign = function () {\n    __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n    };\n    return __assign.apply(this, arguments);\n  };\n  var _a;\n  var charset;\n  (function (charset) {\n    charset[charset[\"BACKSPACE\"] = 8] = \"BACKSPACE\";\n    charset[charset[\"FORM_FEED\"] = 12] = \"FORM_FEED\";\n    charset[charset[\"NEWLINE\"] = 10] = \"NEWLINE\";\n    charset[charset[\"CARRIAGE_RETURN\"] = 13] = \"CARRIAGE_RETURN\";\n    charset[charset[\"TAB\"] = 9] = \"TAB\";\n    charset[charset[\"SPACE\"] = 32] = \"SPACE\";\n    charset[charset[\"EXCLAMATION_MARK\"] = 33] = \"EXCLAMATION_MARK\";\n    charset[charset[\"QUOTATION_MARK\"] = 34] = \"QUOTATION_MARK\";\n    charset[charset[\"NUMBER_SIGN\"] = 35] = \"NUMBER_SIGN\";\n    charset[charset[\"DOLLAR_SIGN\"] = 36] = \"DOLLAR_SIGN\";\n    charset[charset[\"PERCENT_SIGN\"] = 37] = \"PERCENT_SIGN\";\n    charset[charset[\"AMPERSAND\"] = 38] = \"AMPERSAND\";\n    charset[charset[\"APOSTROPHE\"] = 39] = \"APOSTROPHE\";\n    charset[charset[\"LEFT_PARENTHESIS\"] = 40] = \"LEFT_PARENTHESIS\";\n    charset[charset[\"RIGHT_PARENTHESIS\"] = 41] = \"RIGHT_PARENTHESIS\";\n    charset[charset[\"ASTERISK\"] = 42] = \"ASTERISK\";\n    charset[charset[\"PLUS_SIGN\"] = 43] = \"PLUS_SIGN\";\n    charset[charset[\"COMMA\"] = 44] = \"COMMA\";\n    charset[charset[\"HYPHEN_MINUS\"] = 45] = \"HYPHEN_MINUS\";\n    charset[charset[\"FULL_STOP\"] = 46] = \"FULL_STOP\";\n    charset[charset[\"SOLIDUS\"] = 47] = \"SOLIDUS\";\n    charset[charset[\"DIGIT_ZERO\"] = 48] = \"DIGIT_ZERO\";\n    charset[charset[\"DIGIT_ONE\"] = 49] = \"DIGIT_ONE\";\n    charset[charset[\"DIGIT_TWO\"] = 50] = \"DIGIT_TWO\";\n    charset[charset[\"DIGIT_THREE\"] = 51] = \"DIGIT_THREE\";\n    charset[charset[\"DIGIT_FOUR\"] = 52] = \"DIGIT_FOUR\";\n    charset[charset[\"DIGIT_FIVE\"] = 53] = \"DIGIT_FIVE\";\n    charset[charset[\"DIGIT_SIX\"] = 54] = \"DIGIT_SIX\";\n    charset[charset[\"DIGIT_SEVEN\"] = 55] = \"DIGIT_SEVEN\";\n    charset[charset[\"DIGIT_EIGHT\"] = 56] = \"DIGIT_EIGHT\";\n    charset[charset[\"DIGIT_NINE\"] = 57] = \"DIGIT_NINE\";\n    charset[charset[\"COLON\"] = 58] = \"COLON\";\n    charset[charset[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    charset[charset[\"LESS_THAN_SIGN\"] = 60] = \"LESS_THAN_SIGN\";\n    charset[charset[\"EQUALS_SIGN\"] = 61] = \"EQUALS_SIGN\";\n    charset[charset[\"GREATER_THAN_SIGN\"] = 62] = \"GREATER_THAN_SIGN\";\n    charset[charset[\"QUESTION_MARK\"] = 63] = \"QUESTION_MARK\";\n    charset[charset[\"COMMERCIAL_AT\"] = 64] = \"COMMERCIAL_AT\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_A\"] = 65] = \"LATIN_CAPITAL_LETTER_A\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_B\"] = 66] = \"LATIN_CAPITAL_LETTER_B\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_C\"] = 67] = \"LATIN_CAPITAL_LETTER_C\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_D\"] = 68] = \"LATIN_CAPITAL_LETTER_D\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_E\"] = 69] = \"LATIN_CAPITAL_LETTER_E\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_F\"] = 70] = \"LATIN_CAPITAL_LETTER_F\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_G\"] = 71] = \"LATIN_CAPITAL_LETTER_G\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_H\"] = 72] = \"LATIN_CAPITAL_LETTER_H\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_I\"] = 73] = \"LATIN_CAPITAL_LETTER_I\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_J\"] = 74] = \"LATIN_CAPITAL_LETTER_J\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_K\"] = 75] = \"LATIN_CAPITAL_LETTER_K\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_L\"] = 76] = \"LATIN_CAPITAL_LETTER_L\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_M\"] = 77] = \"LATIN_CAPITAL_LETTER_M\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_N\"] = 78] = \"LATIN_CAPITAL_LETTER_N\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_O\"] = 79] = \"LATIN_CAPITAL_LETTER_O\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_P\"] = 80] = \"LATIN_CAPITAL_LETTER_P\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_Q\"] = 81] = \"LATIN_CAPITAL_LETTER_Q\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_R\"] = 82] = \"LATIN_CAPITAL_LETTER_R\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_S\"] = 83] = \"LATIN_CAPITAL_LETTER_S\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_T\"] = 84] = \"LATIN_CAPITAL_LETTER_T\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_U\"] = 85] = \"LATIN_CAPITAL_LETTER_U\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_V\"] = 86] = \"LATIN_CAPITAL_LETTER_V\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_W\"] = 87] = \"LATIN_CAPITAL_LETTER_W\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_X\"] = 88] = \"LATIN_CAPITAL_LETTER_X\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_Y\"] = 89] = \"LATIN_CAPITAL_LETTER_Y\";\n    charset[charset[\"LATIN_CAPITAL_LETTER_Z\"] = 90] = \"LATIN_CAPITAL_LETTER_Z\";\n    charset[charset[\"LEFT_SQUARE_BRACKET\"] = 91] = \"LEFT_SQUARE_BRACKET\";\n    charset[charset[\"REVERSE_SOLIDUS\"] = 92] = \"REVERSE_SOLIDUS\";\n    charset[charset[\"RIGHT_SQUARE_BRACKET\"] = 93] = \"RIGHT_SQUARE_BRACKET\";\n    charset[charset[\"CIRCUMFLEX_ACCENT\"] = 94] = \"CIRCUMFLEX_ACCENT\";\n    charset[charset[\"LOW_LINE\"] = 95] = \"LOW_LINE\";\n    charset[charset[\"GRAVE_ACCENT\"] = 96] = \"GRAVE_ACCENT\";\n    charset[charset[\"LATIN_SMALL_LETTER_A\"] = 97] = \"LATIN_SMALL_LETTER_A\";\n    charset[charset[\"LATIN_SMALL_LETTER_B\"] = 98] = \"LATIN_SMALL_LETTER_B\";\n    charset[charset[\"LATIN_SMALL_LETTER_C\"] = 99] = \"LATIN_SMALL_LETTER_C\";\n    charset[charset[\"LATIN_SMALL_LETTER_D\"] = 100] = \"LATIN_SMALL_LETTER_D\";\n    charset[charset[\"LATIN_SMALL_LETTER_E\"] = 101] = \"LATIN_SMALL_LETTER_E\";\n    charset[charset[\"LATIN_SMALL_LETTER_F\"] = 102] = \"LATIN_SMALL_LETTER_F\";\n    charset[charset[\"LATIN_SMALL_LETTER_G\"] = 103] = \"LATIN_SMALL_LETTER_G\";\n    charset[charset[\"LATIN_SMALL_LETTER_H\"] = 104] = \"LATIN_SMALL_LETTER_H\";\n    charset[charset[\"LATIN_SMALL_LETTER_I\"] = 105] = \"LATIN_SMALL_LETTER_I\";\n    charset[charset[\"LATIN_SMALL_LETTER_J\"] = 106] = \"LATIN_SMALL_LETTER_J\";\n    charset[charset[\"LATIN_SMALL_LETTER_K\"] = 107] = \"LATIN_SMALL_LETTER_K\";\n    charset[charset[\"LATIN_SMALL_LETTER_L\"] = 108] = \"LATIN_SMALL_LETTER_L\";\n    charset[charset[\"LATIN_SMALL_LETTER_M\"] = 109] = \"LATIN_SMALL_LETTER_M\";\n    charset[charset[\"LATIN_SMALL_LETTER_N\"] = 110] = \"LATIN_SMALL_LETTER_N\";\n    charset[charset[\"LATIN_SMALL_LETTER_O\"] = 111] = \"LATIN_SMALL_LETTER_O\";\n    charset[charset[\"LATIN_SMALL_LETTER_P\"] = 112] = \"LATIN_SMALL_LETTER_P\";\n    charset[charset[\"LATIN_SMALL_LETTER_Q\"] = 113] = \"LATIN_SMALL_LETTER_Q\";\n    charset[charset[\"LATIN_SMALL_LETTER_R\"] = 114] = \"LATIN_SMALL_LETTER_R\";\n    charset[charset[\"LATIN_SMALL_LETTER_S\"] = 115] = \"LATIN_SMALL_LETTER_S\";\n    charset[charset[\"LATIN_SMALL_LETTER_T\"] = 116] = \"LATIN_SMALL_LETTER_T\";\n    charset[charset[\"LATIN_SMALL_LETTER_U\"] = 117] = \"LATIN_SMALL_LETTER_U\";\n    charset[charset[\"LATIN_SMALL_LETTER_V\"] = 118] = \"LATIN_SMALL_LETTER_V\";\n    charset[charset[\"LATIN_SMALL_LETTER_W\"] = 119] = \"LATIN_SMALL_LETTER_W\";\n    charset[charset[\"LATIN_SMALL_LETTER_X\"] = 120] = \"LATIN_SMALL_LETTER_X\";\n    charset[charset[\"LATIN_SMALL_LETTER_Y\"] = 121] = \"LATIN_SMALL_LETTER_Y\";\n    charset[charset[\"LATIN_SMALL_LETTER_Z\"] = 122] = \"LATIN_SMALL_LETTER_Z\";\n    charset[charset[\"LEFT_CURLY_BRACKET\"] = 123] = \"LEFT_CURLY_BRACKET\";\n    charset[charset[\"VERTICAL_LINE\"] = 124] = \"VERTICAL_LINE\";\n    charset[charset[\"RIGHT_CURLY_BRACKET\"] = 125] = \"RIGHT_CURLY_BRACKET\";\n    charset[charset[\"TILDE\"] = 126] = \"TILDE\";\n  })(charset || (charset = {}));\n  var escapedSequences = (_a = {}, _a[charset.QUOTATION_MARK] = charset.QUOTATION_MARK, _a[charset.REVERSE_SOLIDUS] = charset.REVERSE_SOLIDUS, _a[charset.SOLIDUS] = charset.SOLIDUS, _a[charset.LATIN_SMALL_LETTER_B] = charset.BACKSPACE, _a[charset.LATIN_SMALL_LETTER_F] = charset.FORM_FEED, _a[charset.LATIN_SMALL_LETTER_N] = charset.NEWLINE, _a[charset.LATIN_SMALL_LETTER_R] = charset.CARRIAGE_RETURN, _a[charset.LATIN_SMALL_LETTER_T] = charset.TAB, _a);\n  var utf8 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    get charset() {\n      return charset;\n    },\n    escapedSequences: escapedSequences\n  });\n  var NonBufferedString = /** @class */function () {\n    function NonBufferedString() {\n      this.decoder = new TextDecoder(\"utf-8\");\n      this.string = \"\";\n      this.byteLength = 0;\n    }\n    NonBufferedString.prototype.appendChar = function (char) {\n      this.string += String.fromCharCode(char);\n      this.byteLength += 1;\n    };\n    NonBufferedString.prototype.appendBuf = function (buf, start, end) {\n      if (start === void 0) {\n        start = 0;\n      }\n      if (end === void 0) {\n        end = buf.length;\n      }\n      this.string += this.decoder.decode(buf.subarray(start, end));\n      this.byteLength += end - start;\n    };\n    NonBufferedString.prototype.reset = function () {\n      this.string = \"\";\n      this.byteLength = 0;\n    };\n    NonBufferedString.prototype.toString = function () {\n      return this.string;\n    };\n    return NonBufferedString;\n  }();\n  var BufferedString = /** @class */function () {\n    function BufferedString(bufferSize) {\n      this.decoder = new TextDecoder(\"utf-8\");\n      this.bufferOffset = 0;\n      this.string = \"\";\n      this.byteLength = 0;\n      this.buffer = new Uint8Array(bufferSize);\n    }\n    BufferedString.prototype.appendChar = function (char) {\n      if (this.bufferOffset >= this.buffer.length) this.flushStringBuffer();\n      this.buffer[this.bufferOffset++] = char;\n      this.byteLength += 1;\n    };\n    BufferedString.prototype.appendBuf = function (buf, start, end) {\n      if (start === void 0) {\n        start = 0;\n      }\n      if (end === void 0) {\n        end = buf.length;\n      }\n      var size = end - start;\n      if (this.bufferOffset + size > this.buffer.length) this.flushStringBuffer();\n      this.buffer.set(buf.subarray(start, end), this.bufferOffset);\n      this.bufferOffset += size;\n      this.byteLength += size;\n    };\n    BufferedString.prototype.flushStringBuffer = function () {\n      this.string += this.decoder.decode(this.buffer.subarray(0, this.bufferOffset));\n      this.bufferOffset = 0;\n    };\n    BufferedString.prototype.reset = function () {\n      this.string = \"\";\n      this.bufferOffset = 0;\n      this.byteLength = 0;\n    };\n    BufferedString.prototype.toString = function () {\n      this.flushStringBuffer();\n      return this.string;\n    };\n    return BufferedString;\n  }();\n  exports.TokenType = void 0;\n  (function (TokenType) {\n    TokenType[TokenType[\"LEFT_BRACE\"] = 1] = \"LEFT_BRACE\";\n    TokenType[TokenType[\"RIGHT_BRACE\"] = 2] = \"RIGHT_BRACE\";\n    TokenType[TokenType[\"LEFT_BRACKET\"] = 3] = \"LEFT_BRACKET\";\n    TokenType[TokenType[\"RIGHT_BRACKET\"] = 4] = \"RIGHT_BRACKET\";\n    TokenType[TokenType[\"COLON\"] = 5] = \"COLON\";\n    TokenType[TokenType[\"COMMA\"] = 6] = \"COMMA\";\n    TokenType[TokenType[\"TRUE\"] = 7] = \"TRUE\";\n    TokenType[TokenType[\"FALSE\"] = 8] = \"FALSE\";\n    TokenType[TokenType[\"NULL\"] = 9] = \"NULL\";\n    TokenType[TokenType[\"STRING\"] = 10] = \"STRING\";\n    TokenType[TokenType[\"NUMBER\"] = 11] = \"NUMBER\";\n    TokenType[TokenType[\"SEPARATOR\"] = 12] = \"SEPARATOR\";\n  })(exports.TokenType || (exports.TokenType = {}));\n  var LEFT_BRACE$1 = exports.TokenType.LEFT_BRACE,\n    RIGHT_BRACE$1 = exports.TokenType.RIGHT_BRACE,\n    LEFT_BRACKET$1 = exports.TokenType.LEFT_BRACKET,\n    RIGHT_BRACKET$1 = exports.TokenType.RIGHT_BRACKET,\n    COLON$1 = exports.TokenType.COLON,\n    COMMA$1 = exports.TokenType.COMMA,\n    TRUE$1 = exports.TokenType.TRUE,\n    FALSE$1 = exports.TokenType.FALSE,\n    NULL$1 = exports.TokenType.NULL,\n    STRING$1 = exports.TokenType.STRING,\n    NUMBER$1 = exports.TokenType.NUMBER;\n  // Tokenizer States\n  var TokenizerStates;\n  (function (TokenizerStates) {\n    TokenizerStates[TokenizerStates[\"START\"] = 0] = \"START\";\n    TokenizerStates[TokenizerStates[\"ENDED\"] = 1] = \"ENDED\";\n    TokenizerStates[TokenizerStates[\"ERROR\"] = 2] = \"ERROR\";\n    TokenizerStates[TokenizerStates[\"TRUE1\"] = 3] = \"TRUE1\";\n    TokenizerStates[TokenizerStates[\"TRUE2\"] = 4] = \"TRUE2\";\n    TokenizerStates[TokenizerStates[\"TRUE3\"] = 5] = \"TRUE3\";\n    TokenizerStates[TokenizerStates[\"FALSE1\"] = 6] = \"FALSE1\";\n    TokenizerStates[TokenizerStates[\"FALSE2\"] = 7] = \"FALSE2\";\n    TokenizerStates[TokenizerStates[\"FALSE3\"] = 8] = \"FALSE3\";\n    TokenizerStates[TokenizerStates[\"FALSE4\"] = 9] = \"FALSE4\";\n    TokenizerStates[TokenizerStates[\"NULL1\"] = 10] = \"NULL1\";\n    TokenizerStates[TokenizerStates[\"NULL2\"] = 11] = \"NULL2\";\n    TokenizerStates[TokenizerStates[\"NULL3\"] = 12] = \"NULL3\";\n    TokenizerStates[TokenizerStates[\"STRING_DEFAULT\"] = 13] = \"STRING_DEFAULT\";\n    TokenizerStates[TokenizerStates[\"STRING_AFTER_BACKSLASH\"] = 14] = \"STRING_AFTER_BACKSLASH\";\n    TokenizerStates[TokenizerStates[\"STRING_UNICODE_DIGIT_1\"] = 15] = \"STRING_UNICODE_DIGIT_1\";\n    TokenizerStates[TokenizerStates[\"STRING_UNICODE_DIGIT_2\"] = 16] = \"STRING_UNICODE_DIGIT_2\";\n    TokenizerStates[TokenizerStates[\"STRING_UNICODE_DIGIT_3\"] = 17] = \"STRING_UNICODE_DIGIT_3\";\n    TokenizerStates[TokenizerStates[\"STRING_UNICODE_DIGIT_4\"] = 18] = \"STRING_UNICODE_DIGIT_4\";\n    TokenizerStates[TokenizerStates[\"STRING_INCOMPLETE_CHAR\"] = 19] = \"STRING_INCOMPLETE_CHAR\";\n    TokenizerStates[TokenizerStates[\"NUMBER_AFTER_INITIAL_MINUS\"] = 20] = \"NUMBER_AFTER_INITIAL_MINUS\";\n    TokenizerStates[TokenizerStates[\"NUMBER_AFTER_INITIAL_ZERO\"] = 21] = \"NUMBER_AFTER_INITIAL_ZERO\";\n    TokenizerStates[TokenizerStates[\"NUMBER_AFTER_INITIAL_NON_ZERO\"] = 22] = \"NUMBER_AFTER_INITIAL_NON_ZERO\";\n    TokenizerStates[TokenizerStates[\"NUMBER_AFTER_FULL_STOP\"] = 23] = \"NUMBER_AFTER_FULL_STOP\";\n    TokenizerStates[TokenizerStates[\"NUMBER_AFTER_DECIMAL\"] = 24] = \"NUMBER_AFTER_DECIMAL\";\n    TokenizerStates[TokenizerStates[\"NUMBER_AFTER_E\"] = 25] = \"NUMBER_AFTER_E\";\n    TokenizerStates[TokenizerStates[\"NUMBER_AFTER_E_AND_SIGN\"] = 26] = \"NUMBER_AFTER_E_AND_SIGN\";\n    TokenizerStates[TokenizerStates[\"NUMBER_AFTER_E_AND_DIGIT\"] = 27] = \"NUMBER_AFTER_E_AND_DIGIT\";\n    TokenizerStates[TokenizerStates[\"SEPARATOR\"] = 28] = \"SEPARATOR\";\n  })(TokenizerStates || (TokenizerStates = {}));\n  var defaultOpts$1 = {\n    stringBufferSize: 0,\n    numberBufferSize: 0,\n    separator: undefined\n  };\n  var TokenizerError = /** @class */function (_super) {\n    __extends(TokenizerError, _super);\n    function TokenizerError(message) {\n      var _this = _super.call(this, message) || this;\n      // Typescript is broken. This is a workaround\n      Object.setPrototypeOf(_this, TokenizerError.prototype);\n      return _this;\n    }\n    return TokenizerError;\n  }(Error);\n  var Tokenizer = /** @class */function () {\n    function Tokenizer(opts) {\n      this.state = TokenizerStates.START;\n      this.separatorIndex = 0;\n      this.unicode = undefined; // unicode escapes\n      this.highSurrogate = undefined;\n      this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary\n      this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read\n      this.char_split_buffer = new Uint8Array(4); // for rebuilding chars split before boundary is reached\n      this.encoder = new TextEncoder();\n      this.offset = -1;\n      opts = __assign(__assign({}, defaultOpts$1), opts);\n      this.bufferedString = opts.stringBufferSize && opts.stringBufferSize > 4 ? new BufferedString(opts.stringBufferSize) : new NonBufferedString();\n      this.bufferedNumber = opts.numberBufferSize && opts.numberBufferSize > 0 ? new BufferedString(opts.numberBufferSize) : new NonBufferedString();\n      this.separator = opts.separator;\n      this.separatorBytes = opts.separator ? this.encoder.encode(opts.separator) : undefined;\n    }\n    Object.defineProperty(Tokenizer.prototype, \"isEnded\", {\n      get: function () {\n        return this.state === TokenizerStates.ENDED;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Tokenizer.prototype.write = function (input) {\n      var buffer;\n      if (input instanceof Uint8Array) {\n        buffer = input;\n      } else if (typeof input === \"string\") {\n        buffer = this.encoder.encode(input);\n      } else if (typeof input === \"object\" && \"buffer\" in input || Array.isArray(input)) {\n        buffer = Uint8Array.from(input);\n      } else {\n        this.error(new TypeError(\"Unexpected type. The `write` function only accepts Arrays, TypedArrays and Strings.\"));\n        return;\n      }\n      for (var i = 0; i < buffer.length; i += 1) {\n        var n = buffer[i]; // get current byte from buffer\n        switch (this.state) {\n          case TokenizerStates.START:\n            this.offset += 1;\n            if (this.separatorBytes && n === this.separatorBytes[0]) {\n              if (this.separatorBytes.length === 1) {\n                this.state = TokenizerStates.START;\n                this.onToken(exports.TokenType.SEPARATOR, this.separator, this.offset + this.separatorBytes.length - 1);\n                continue;\n              }\n              this.state = TokenizerStates.SEPARATOR;\n              continue;\n            }\n            if (n === charset.SPACE || n === charset.NEWLINE || n === charset.CARRIAGE_RETURN || n === charset.TAB) {\n              // whitespace\n              continue;\n            }\n            if (n === charset.LEFT_CURLY_BRACKET) {\n              this.onToken(LEFT_BRACE$1, \"{\", this.offset);\n              continue;\n            }\n            if (n === charset.RIGHT_CURLY_BRACKET) {\n              this.onToken(RIGHT_BRACE$1, \"}\", this.offset);\n              continue;\n            }\n            if (n === charset.LEFT_SQUARE_BRACKET) {\n              this.onToken(LEFT_BRACKET$1, \"[\", this.offset);\n              continue;\n            }\n            if (n === charset.RIGHT_SQUARE_BRACKET) {\n              this.onToken(RIGHT_BRACKET$1, \"]\", this.offset);\n              continue;\n            }\n            if (n === charset.COLON) {\n              this.onToken(COLON$1, \":\", this.offset);\n              continue;\n            }\n            if (n === charset.COMMA) {\n              this.onToken(COMMA$1, \",\", this.offset);\n              continue;\n            }\n            if (n === charset.LATIN_SMALL_LETTER_T) {\n              this.state = TokenizerStates.TRUE1;\n              continue;\n            }\n            if (n === charset.LATIN_SMALL_LETTER_F) {\n              this.state = TokenizerStates.FALSE1;\n              continue;\n            }\n            if (n === charset.LATIN_SMALL_LETTER_N) {\n              this.state = TokenizerStates.NULL1;\n              continue;\n            }\n            if (n === charset.QUOTATION_MARK) {\n              this.bufferedString.reset();\n              this.state = TokenizerStates.STRING_DEFAULT;\n              continue;\n            }\n            if (n >= charset.DIGIT_ONE && n <= charset.DIGIT_NINE) {\n              this.bufferedNumber.reset();\n              this.bufferedNumber.appendChar(n);\n              this.state = TokenizerStates.NUMBER_AFTER_INITIAL_NON_ZERO;\n              continue;\n            }\n            if (n === charset.DIGIT_ZERO) {\n              this.bufferedNumber.reset();\n              this.bufferedNumber.appendChar(n);\n              this.state = TokenizerStates.NUMBER_AFTER_INITIAL_ZERO;\n              continue;\n            }\n            if (n === charset.HYPHEN_MINUS) {\n              this.bufferedNumber.reset();\n              this.bufferedNumber.appendChar(n);\n              this.state = TokenizerStates.NUMBER_AFTER_INITIAL_MINUS;\n              continue;\n            }\n            break;\n          // STRING\n          case TokenizerStates.STRING_DEFAULT:\n            if (n === charset.QUOTATION_MARK) {\n              var string = this.bufferedString.toString();\n              this.state = TokenizerStates.START;\n              this.onToken(STRING$1, string, this.offset);\n              this.offset += this.bufferedString.byteLength + 1;\n              continue;\n            }\n            if (n === charset.REVERSE_SOLIDUS) {\n              this.state = TokenizerStates.STRING_AFTER_BACKSLASH;\n              continue;\n            }\n            if (n >= 128) {\n              // Parse multi byte (>=128) chars one at a time\n              if (n >= 194 && n <= 223) {\n                this.bytes_in_sequence = 2;\n              } else if (n <= 239) {\n                this.bytes_in_sequence = 3;\n              } else {\n                this.bytes_in_sequence = 4;\n              }\n              if (this.bytes_in_sequence <= buffer.length - i) {\n                // if bytes needed to complete char fall outside buffer length, we have a boundary split\n                this.bufferedString.appendBuf(buffer, i, i + this.bytes_in_sequence);\n                i += this.bytes_in_sequence - 1;\n                continue;\n              }\n              this.bytes_remaining = i + this.bytes_in_sequence - buffer.length;\n              this.char_split_buffer.set(buffer.subarray(i));\n              i = buffer.length - 1;\n              this.state = TokenizerStates.STRING_INCOMPLETE_CHAR;\n              continue;\n            }\n            if (n >= charset.SPACE) {\n              this.bufferedString.appendChar(n);\n              continue;\n            }\n            break;\n          case TokenizerStates.STRING_INCOMPLETE_CHAR:\n            // check for carry over of a multi byte char split between data chunks\n            // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration\n            this.char_split_buffer.set(buffer.subarray(i, i + this.bytes_remaining), this.bytes_in_sequence - this.bytes_remaining);\n            this.bufferedString.appendBuf(this.char_split_buffer, 0, this.bytes_in_sequence);\n            i = this.bytes_remaining - 1;\n            this.state = TokenizerStates.STRING_DEFAULT;\n            continue;\n          case TokenizerStates.STRING_AFTER_BACKSLASH:\n            var controlChar = escapedSequences[n];\n            if (controlChar) {\n              this.bufferedString.appendChar(controlChar);\n              this.state = TokenizerStates.STRING_DEFAULT;\n              continue;\n            }\n            if (n === charset.LATIN_SMALL_LETTER_U) {\n              this.unicode = \"\";\n              this.state = TokenizerStates.STRING_UNICODE_DIGIT_1;\n              continue;\n            }\n            break;\n          case TokenizerStates.STRING_UNICODE_DIGIT_1:\n          case TokenizerStates.STRING_UNICODE_DIGIT_2:\n          case TokenizerStates.STRING_UNICODE_DIGIT_3:\n            if (n >= charset.DIGIT_ZERO && n <= charset.DIGIT_NINE || n >= charset.LATIN_CAPITAL_LETTER_A && n <= charset.LATIN_CAPITAL_LETTER_F || n >= charset.LATIN_SMALL_LETTER_A && n <= charset.LATIN_SMALL_LETTER_F) {\n              this.unicode += String.fromCharCode(n);\n              this.state += 1;\n              continue;\n            }\n            break;\n          case TokenizerStates.STRING_UNICODE_DIGIT_4:\n            if (n >= charset.DIGIT_ZERO && n <= charset.DIGIT_NINE || n >= charset.LATIN_CAPITAL_LETTER_A && n <= charset.LATIN_CAPITAL_LETTER_F || n >= charset.LATIN_SMALL_LETTER_A && n <= charset.LATIN_SMALL_LETTER_F) {\n              var intVal = parseInt(this.unicode + String.fromCharCode(n), 16);\n              if (this.highSurrogate === undefined) {\n                if (intVal >= 0xd800 && intVal <= 0xdbff) {\n                  //<55296,56319> - highSurrogate\n                  this.highSurrogate = intVal;\n                } else {\n                  this.bufferedString.appendBuf(this.encoder.encode(String.fromCharCode(intVal)));\n                }\n              } else {\n                if (intVal >= 0xdc00 && intVal <= 0xdfff) {\n                  //<56320,57343> - lowSurrogate\n                  this.bufferedString.appendBuf(this.encoder.encode(String.fromCharCode(this.highSurrogate, intVal)));\n                } else {\n                  this.bufferedString.appendBuf(this.encoder.encode(String.fromCharCode(this.highSurrogate)));\n                }\n                this.highSurrogate = undefined;\n              }\n              this.state = TokenizerStates.STRING_DEFAULT;\n              continue;\n            }\n          // Number\n          case TokenizerStates.NUMBER_AFTER_INITIAL_MINUS:\n            if (n === charset.DIGIT_ZERO) {\n              this.bufferedNumber.appendChar(n);\n              this.state = TokenizerStates.NUMBER_AFTER_INITIAL_ZERO;\n              continue;\n            }\n            if (n >= charset.DIGIT_ONE && n <= charset.DIGIT_NINE) {\n              this.bufferedNumber.appendChar(n);\n              this.state = TokenizerStates.NUMBER_AFTER_INITIAL_NON_ZERO;\n              continue;\n            }\n            break;\n          case TokenizerStates.NUMBER_AFTER_INITIAL_ZERO:\n            if (n === charset.FULL_STOP) {\n              this.bufferedNumber.appendChar(n);\n              this.state = TokenizerStates.NUMBER_AFTER_FULL_STOP;\n              continue;\n            }\n            if (n === charset.LATIN_SMALL_LETTER_E || n === charset.LATIN_CAPITAL_LETTER_E) {\n              this.bufferedNumber.appendChar(n);\n              this.state = TokenizerStates.NUMBER_AFTER_E;\n              continue;\n            }\n            i -= 1;\n            this.state = TokenizerStates.START;\n            this.emitNumber();\n            continue;\n          case TokenizerStates.NUMBER_AFTER_INITIAL_NON_ZERO:\n            if (n >= charset.DIGIT_ZERO && n <= charset.DIGIT_NINE) {\n              this.bufferedNumber.appendChar(n);\n              continue;\n            }\n            if (n === charset.FULL_STOP) {\n              this.bufferedNumber.appendChar(n);\n              this.state = TokenizerStates.NUMBER_AFTER_FULL_STOP;\n              continue;\n            }\n            if (n === charset.LATIN_SMALL_LETTER_E || n === charset.LATIN_CAPITAL_LETTER_E) {\n              this.bufferedNumber.appendChar(n);\n              this.state = TokenizerStates.NUMBER_AFTER_E;\n              continue;\n            }\n            i -= 1;\n            this.state = TokenizerStates.START;\n            this.emitNumber();\n            continue;\n          case TokenizerStates.NUMBER_AFTER_FULL_STOP:\n            if (n >= charset.DIGIT_ZERO && n <= charset.DIGIT_NINE) {\n              this.bufferedNumber.appendChar(n);\n              this.state = TokenizerStates.NUMBER_AFTER_DECIMAL;\n              continue;\n            }\n            break;\n          case TokenizerStates.NUMBER_AFTER_DECIMAL:\n            if (n >= charset.DIGIT_ZERO && n <= charset.DIGIT_NINE) {\n              this.bufferedNumber.appendChar(n);\n              continue;\n            }\n            if (n === charset.LATIN_SMALL_LETTER_E || n === charset.LATIN_CAPITAL_LETTER_E) {\n              this.bufferedNumber.appendChar(n);\n              this.state = TokenizerStates.NUMBER_AFTER_E;\n              continue;\n            }\n            i -= 1;\n            this.state = TokenizerStates.START;\n            this.emitNumber();\n            continue;\n          case TokenizerStates.NUMBER_AFTER_E:\n            if (n === charset.PLUS_SIGN || n === charset.HYPHEN_MINUS) {\n              this.bufferedNumber.appendChar(n);\n              this.state = TokenizerStates.NUMBER_AFTER_E_AND_SIGN;\n              continue;\n            }\n          // Allow cascading\n          case TokenizerStates.NUMBER_AFTER_E_AND_SIGN:\n            if (n >= charset.DIGIT_ZERO && n <= charset.DIGIT_NINE) {\n              this.bufferedNumber.appendChar(n);\n              this.state = TokenizerStates.NUMBER_AFTER_E_AND_DIGIT;\n              continue;\n            }\n            break;\n          case TokenizerStates.NUMBER_AFTER_E_AND_DIGIT:\n            if (n >= charset.DIGIT_ZERO && n <= charset.DIGIT_NINE) {\n              this.bufferedNumber.appendChar(n);\n              continue;\n            }\n            i -= 1;\n            this.state = TokenizerStates.START;\n            this.emitNumber();\n            continue;\n          // TRUE\n          case TokenizerStates.TRUE1:\n            if (n === charset.LATIN_SMALL_LETTER_R) {\n              this.state = TokenizerStates.TRUE2;\n              continue;\n            }\n            break;\n          case TokenizerStates.TRUE2:\n            if (n === charset.LATIN_SMALL_LETTER_U) {\n              this.state = TokenizerStates.TRUE3;\n              continue;\n            }\n            break;\n          case TokenizerStates.TRUE3:\n            if (n === charset.LATIN_SMALL_LETTER_E) {\n              this.state = TokenizerStates.START;\n              this.onToken(TRUE$1, true, this.offset);\n              this.offset += 3;\n              continue;\n            }\n            break;\n          // FALSE\n          case TokenizerStates.FALSE1:\n            if (n === charset.LATIN_SMALL_LETTER_A) {\n              this.state = TokenizerStates.FALSE2;\n              continue;\n            }\n            break;\n          case TokenizerStates.FALSE2:\n            if (n === charset.LATIN_SMALL_LETTER_L) {\n              this.state = TokenizerStates.FALSE3;\n              continue;\n            }\n            break;\n          case TokenizerStates.FALSE3:\n            if (n === charset.LATIN_SMALL_LETTER_S) {\n              this.state = TokenizerStates.FALSE4;\n              continue;\n            }\n            break;\n          case TokenizerStates.FALSE4:\n            if (n === charset.LATIN_SMALL_LETTER_E) {\n              this.state = TokenizerStates.START;\n              this.onToken(FALSE$1, false, this.offset);\n              this.offset += 4;\n              continue;\n            }\n            break;\n          // NULL\n          case TokenizerStates.NULL1:\n            if (n === charset.LATIN_SMALL_LETTER_U) {\n              this.state = TokenizerStates.NULL2;\n              continue;\n            }\n            break;\n          case TokenizerStates.NULL2:\n            if (n === charset.LATIN_SMALL_LETTER_L) {\n              this.state = TokenizerStates.NULL3;\n              continue;\n            }\n            break;\n          case TokenizerStates.NULL3:\n            if (n === charset.LATIN_SMALL_LETTER_L) {\n              this.state = TokenizerStates.START;\n              this.onToken(NULL$1, null, this.offset);\n              this.offset += 3;\n              continue;\n            }\n            break;\n          case TokenizerStates.SEPARATOR:\n            this.separatorIndex += 1;\n            if (!this.separatorBytes || n !== this.separatorBytes[this.separatorIndex]) {\n              break;\n            }\n            if (this.separatorIndex === this.separatorBytes.length - 1) {\n              this.state = TokenizerStates.START;\n              this.onToken(exports.TokenType.SEPARATOR, this.separator, this.offset + this.separatorIndex);\n              this.separatorIndex = 0;\n            }\n            continue;\n          case TokenizerStates.ENDED:\n            if (n === charset.SPACE || n === charset.NEWLINE || n === charset.CARRIAGE_RETURN || n === charset.TAB) {\n              // whitespace\n              continue;\n            }\n        }\n        this.error(new TokenizerError(\"Unexpected \\\"\".concat(String.fromCharCode(n), \"\\\" at position \\\"\").concat(i, \"\\\" in state \").concat(TokenizerStates[this.state])));\n        return;\n      }\n    };\n    Tokenizer.prototype.emitNumber = function () {\n      this.onToken(NUMBER$1, this.parseNumber(this.bufferedNumber.toString()), this.offset);\n      this.offset += this.bufferedNumber.byteLength - 1;\n    };\n    Tokenizer.prototype.parseNumber = function (numberStr) {\n      return Number(numberStr);\n    };\n    Tokenizer.prototype.error = function (err) {\n      if (this.state !== TokenizerStates.ENDED) {\n        this.state = TokenizerStates.ERROR;\n      }\n      this.onError(err);\n    };\n    Tokenizer.prototype.end = function () {\n      switch (this.state) {\n        case TokenizerStates.NUMBER_AFTER_INITIAL_ZERO:\n        case TokenizerStates.NUMBER_AFTER_INITIAL_NON_ZERO:\n        case TokenizerStates.NUMBER_AFTER_DECIMAL:\n        case TokenizerStates.NUMBER_AFTER_E_AND_DIGIT:\n          this.state = TokenizerStates.ENDED;\n          this.emitNumber();\n          this.onEnd();\n          break;\n        case TokenizerStates.START:\n        case TokenizerStates.ERROR:\n        case TokenizerStates.SEPARATOR:\n          this.state = TokenizerStates.ENDED;\n          this.onEnd();\n          break;\n        default:\n          this.error(new TokenizerError(\"Tokenizer ended in the middle of a token (state: \".concat(TokenizerStates[this.state], \"). Either not all the data was received or the data was invalid.\")));\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Tokenizer.prototype.onToken = function (token, value, offset) {\n      // Override me\n      throw new TokenizerError('Can\\'t emit tokens before the \"onToken\" callback has been set up.');\n    };\n    Tokenizer.prototype.onError = function (err) {\n      // Override me\n      throw err;\n    };\n    Tokenizer.prototype.onEnd = function () {\n      // Override me\n    };\n    return Tokenizer;\n  }();\n  var LEFT_BRACE = exports.TokenType.LEFT_BRACE,\n    RIGHT_BRACE = exports.TokenType.RIGHT_BRACE,\n    LEFT_BRACKET = exports.TokenType.LEFT_BRACKET,\n    RIGHT_BRACKET = exports.TokenType.RIGHT_BRACKET,\n    COLON = exports.TokenType.COLON,\n    COMMA = exports.TokenType.COMMA,\n    TRUE = exports.TokenType.TRUE,\n    FALSE = exports.TokenType.FALSE,\n    NULL = exports.TokenType.NULL,\n    STRING = exports.TokenType.STRING,\n    NUMBER = exports.TokenType.NUMBER,\n    SEPARATOR = exports.TokenType.SEPARATOR;\n  // Parser States\n  var TokenParserState;\n  (function (TokenParserState) {\n    TokenParserState[TokenParserState[\"VALUE\"] = 0] = \"VALUE\";\n    TokenParserState[TokenParserState[\"KEY\"] = 1] = \"KEY\";\n    TokenParserState[TokenParserState[\"COLON\"] = 2] = \"COLON\";\n    TokenParserState[TokenParserState[\"COMMA\"] = 3] = \"COMMA\";\n    TokenParserState[TokenParserState[\"ENDED\"] = 4] = \"ENDED\";\n    TokenParserState[TokenParserState[\"ERROR\"] = 5] = \"ERROR\";\n    TokenParserState[TokenParserState[\"SEPARATOR\"] = 6] = \"SEPARATOR\";\n  })(TokenParserState || (TokenParserState = {}));\n  // Parser Modes\n  var TokenParserMode;\n  (function (TokenParserMode) {\n    TokenParserMode[TokenParserMode[\"OBJECT\"] = 0] = \"OBJECT\";\n    TokenParserMode[TokenParserMode[\"ARRAY\"] = 1] = \"ARRAY\";\n  })(TokenParserMode || (TokenParserMode = {}));\n  var defaultOpts = {\n    paths: undefined,\n    keepStack: true,\n    separator: undefined\n  };\n  var TokenParserError = /** @class */function (_super) {\n    __extends(TokenParserError, _super);\n    function TokenParserError(message) {\n      var _this = _super.call(this, message) || this;\n      // Typescript is broken. This is a workaround\n      Object.setPrototypeOf(_this, TokenParserError.prototype);\n      return _this;\n    }\n    return TokenParserError;\n  }(Error);\n  var TokenParser = /** @class */function () {\n    function TokenParser(opts) {\n      this.state = TokenParserState.VALUE;\n      this.mode = undefined;\n      this.key = undefined;\n      this.value = undefined;\n      this.stack = [];\n      opts = __assign(__assign({}, defaultOpts), opts);\n      if (opts.paths) {\n        this.paths = opts.paths.map(function (path) {\n          if (path === undefined || path === \"$*\") return undefined;\n          if (!path.startsWith(\"$\")) throw new TokenParserError(\"Invalid selector \\\"\".concat(path, \"\\\". Should start with \\\"$\\\".\"));\n          var pathParts = path.split(\".\").slice(1);\n          if (pathParts.includes(\"\")) throw new TokenParserError(\"Invalid selector \\\"\".concat(path, \"\\\". \\\"..\\\" syntax not supported.\"));\n          return pathParts;\n        });\n      }\n      this.keepStack = opts.keepStack;\n      this.separator = opts.separator;\n    }\n    TokenParser.prototype.shouldEmit = function () {\n      var _this = this;\n      if (!this.paths) return true;\n      return this.paths.some(function (path) {\n        var _a;\n        if (path === undefined) return true;\n        if (path.length !== _this.stack.length) return false;\n        for (var i = 0; i < path.length - 1; i++) {\n          var selector_1 = path[i];\n          var key = _this.stack[i + 1].key;\n          if (selector_1 === \"*\") continue;\n          if (selector_1 !== key) return false;\n        }\n        var selector = path[path.length - 1];\n        if (selector === \"*\") return true;\n        return selector === ((_a = _this.key) === null || _a === void 0 ? void 0 : _a.toString());\n      });\n    };\n    TokenParser.prototype.push = function () {\n      this.stack.push({\n        key: this.key,\n        value: this.value,\n        mode: this.mode,\n        emit: this.shouldEmit()\n      });\n    };\n    TokenParser.prototype.pop = function () {\n      var _a;\n      var value = this.value;\n      var emit;\n      _a = this.stack.pop(), this.key = _a.key, this.value = _a.value, this.mode = _a.mode, emit = _a.emit;\n      this.state = this.mode !== undefined ? TokenParserState.COMMA : TokenParserState.VALUE;\n      this.emit(value, emit);\n    };\n    TokenParser.prototype.emit = function (value, emit) {\n      if (!this.keepStack && this.value && this.stack.every(function (item) {\n        return !item.emit;\n      })) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        delete this.value[this.key];\n      }\n      if (emit) {\n        this.onValue(value,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.key,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.value, this.stack);\n      }\n      if (this.stack.length === 0) {\n        if (this.separator) {\n          this.state = TokenParserState.SEPARATOR;\n        } else if (this.separator === undefined) {\n          this.end();\n        }\n        // else if separator === '', expect next JSON object.\n      }\n    };\n    Object.defineProperty(TokenParser.prototype, \"isEnded\", {\n      get: function () {\n        return this.state === TokenParserState.ENDED;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    TokenParser.prototype.write = function (token, value) {\n      if (this.state === TokenParserState.VALUE) {\n        if (token === STRING || token === NUMBER || token === TRUE || token === FALSE || token === NULL) {\n          if (this.mode === TokenParserMode.OBJECT) {\n            this.value[this.key] = value;\n            this.state = TokenParserState.COMMA;\n          } else if (this.mode === TokenParserMode.ARRAY) {\n            this.value.push(value);\n            this.state = TokenParserState.COMMA;\n          }\n          this.emit(value, this.shouldEmit());\n          return;\n        }\n        if (token === LEFT_BRACE) {\n          this.push();\n          if (this.mode === TokenParserMode.OBJECT) {\n            this.value = this.value[this.key] = {};\n          } else if (this.mode === TokenParserMode.ARRAY) {\n            var val = {};\n            this.value.push(val);\n            this.value = val;\n          } else {\n            this.value = {};\n          }\n          this.mode = TokenParserMode.OBJECT;\n          this.state = TokenParserState.KEY;\n          this.key = undefined;\n          return;\n        }\n        if (token === LEFT_BRACKET) {\n          this.push();\n          if (this.mode === TokenParserMode.OBJECT) {\n            this.value = this.value[this.key] = [];\n          } else if (this.mode === TokenParserMode.ARRAY) {\n            var val = [];\n            this.value.push(val);\n            this.value = val;\n          } else {\n            this.value = [];\n          }\n          this.mode = TokenParserMode.ARRAY;\n          this.state = TokenParserState.VALUE;\n          this.key = 0;\n          return;\n        }\n        if (this.mode === TokenParserMode.ARRAY && token === RIGHT_BRACKET && this.value.length === 0) {\n          this.pop();\n          return;\n        }\n      }\n      if (this.state === TokenParserState.KEY) {\n        if (token === STRING) {\n          this.key = value;\n          this.state = TokenParserState.COLON;\n          return;\n        }\n        if (token === RIGHT_BRACE && Object.keys(this.value).length === 0) {\n          this.pop();\n          return;\n        }\n      }\n      if (this.state === TokenParserState.COLON) {\n        if (token === COLON) {\n          this.state = TokenParserState.VALUE;\n          return;\n        }\n      }\n      if (this.state === TokenParserState.COMMA) {\n        if (token === COMMA) {\n          if (this.mode === TokenParserMode.ARRAY) {\n            this.state = TokenParserState.VALUE;\n            this.key += 1;\n            return;\n          }\n          /* istanbul ignore else */\n          if (this.mode === TokenParserMode.OBJECT) {\n            this.state = TokenParserState.KEY;\n            return;\n          }\n        }\n        if (token === RIGHT_BRACE && this.mode === TokenParserMode.OBJECT || token === RIGHT_BRACKET && this.mode === TokenParserMode.ARRAY) {\n          this.pop();\n          return;\n        }\n      }\n      if (this.state === TokenParserState.SEPARATOR) {\n        if (token === SEPARATOR && value === this.separator) {\n          this.state = TokenParserState.VALUE;\n          return;\n        }\n      }\n      this.error(new TokenParserError(\"Unexpected \".concat(exports.TokenType[token], \" (\").concat(JSON.stringify(value), \") in state \").concat(TokenParserState[this.state])));\n    };\n    TokenParser.prototype.error = function (err) {\n      if (this.state !== TokenParserState.ENDED) {\n        this.state = TokenParserState.ERROR;\n      }\n      this.onError(err);\n    };\n    TokenParser.prototype.end = function () {\n      if (this.state !== TokenParserState.VALUE && this.state !== TokenParserState.SEPARATOR || this.stack.length > 0) {\n        this.error(new Error(\"Parser ended in mid-parsing (state: \".concat(TokenParserState[this.state], \"). Either not all the data was received or the data was invalid.\")));\n      } else {\n        this.state = TokenParserState.ENDED;\n        this.onEnd();\n      }\n    };\n    TokenParser.prototype.onValue = function (/* eslint-disable @typescript-eslint/no-unused-vars */\n    value, key, parent, stack\n    /* eslint-enable @typescript-eslint/no-unused-vars */) {\n      // Override me\n      throw new TokenParserError('Can\\'t emit data before the \"onValue\" callback has been set up.');\n    };\n    TokenParser.prototype.onError = function (err) {\n      // Override me\n      throw err;\n    };\n    TokenParser.prototype.onEnd = function () {\n      // Override me\n    };\n    return TokenParser;\n  }();\n  var JSONParser = /** @class */function () {\n    function JSONParser(opts) {\n      var _this = this;\n      if (opts === void 0) {\n        opts = {};\n      }\n      this.tokenizer = new Tokenizer(opts);\n      this.tokenParser = new TokenParser(opts);\n      this.tokenizer.onToken = this.tokenParser.write.bind(this.tokenParser);\n      this.tokenizer.onEnd = function () {\n        if (!_this.tokenParser.isEnded) _this.tokenParser.end();\n      };\n      this.tokenParser.onError = this.tokenizer.error.bind(this.tokenizer);\n      this.tokenParser.onEnd = function () {\n        if (!_this.tokenizer.isEnded) _this.tokenizer.end();\n      };\n    }\n    Object.defineProperty(JSONParser.prototype, \"isEnded\", {\n      get: function () {\n        return this.tokenizer.isEnded && this.tokenParser.isEnded;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    JSONParser.prototype.write = function (input) {\n      this.tokenizer.write(input);\n    };\n    JSONParser.prototype.end = function () {\n      this.tokenizer.end();\n    };\n    Object.defineProperty(JSONParser.prototype, \"onToken\", {\n      set: function (cb) {\n        this.tokenizer.onToken = cb;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(JSONParser.prototype, \"onValue\", {\n      set: function (cb) {\n        this.tokenParser.onValue = cb;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(JSONParser.prototype, \"onError\", {\n      set: function (cb) {\n        this.tokenizer.onError = cb;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(JSONParser.prototype, \"onEnd\", {\n      set: function (cb) {\n        var _this = this;\n        this.tokenParser.onEnd = function () {\n          if (!_this.tokenizer.isEnded) _this.tokenizer.end();\n          cb.call(_this.tokenParser);\n        };\n      },\n      enumerable: false,\n      configurable: true\n    });\n    return JSONParser;\n  }();\n  exports.JSONParser = JSONParser;\n  exports.TokenParser = TokenParser;\n  exports.Tokenizer = Tokenizer;\n  exports.utf8 = utf8;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","globalThis","self","jsonparse","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","apply","_a","charset","escapedSequences","QUOTATION_MARK","REVERSE_SOLIDUS","SOLIDUS","LATIN_SMALL_LETTER_B","BACKSPACE","LATIN_SMALL_LETTER_F","FORM_FEED","LATIN_SMALL_LETTER_N","NEWLINE","LATIN_SMALL_LETTER_R","CARRIAGE_RETURN","LATIN_SMALL_LETTER_T","TAB","utf8","freeze","NonBufferedString","decoder","TextDecoder","string","byteLength","appendChar","char","fromCharCode","appendBuf","buf","start","end","decode","subarray","reset","toString","BufferedString","bufferSize","bufferOffset","buffer","Uint8Array","flushStringBuffer","size","set","TokenType","LEFT_BRACE$1","LEFT_BRACE","RIGHT_BRACE$1","RIGHT_BRACE","LEFT_BRACKET$1","LEFT_BRACKET","RIGHT_BRACKET$1","RIGHT_BRACKET","COLON$1","COLON","COMMA$1","COMMA","TRUE$1","TRUE","FALSE$1","FALSE","NULL$1","NULL","STRING$1","STRING","NUMBER$1","NUMBER","TokenizerStates","defaultOpts$1","stringBufferSize","numberBufferSize","separator","undefined","TokenizerError","_super","message","_this","Error","Tokenizer","opts","state","START","separatorIndex","unicode","highSurrogate","bytes_remaining","bytes_in_sequence","char_split_buffer","encoder","TextEncoder","offset","bufferedString","bufferedNumber","separatorBytes","encode","defineProperty","get","ENDED","enumerable","configurable","write","input","isArray","from","error","onToken","SEPARATOR","SPACE","LEFT_CURLY_BRACKET","RIGHT_CURLY_BRACKET","LEFT_SQUARE_BRACKET","RIGHT_SQUARE_BRACKET","TRUE1","FALSE1","NULL1","STRING_DEFAULT","DIGIT_ONE","DIGIT_NINE","NUMBER_AFTER_INITIAL_NON_ZERO","DIGIT_ZERO","NUMBER_AFTER_INITIAL_ZERO","HYPHEN_MINUS","NUMBER_AFTER_INITIAL_MINUS","STRING_AFTER_BACKSLASH","STRING_INCOMPLETE_CHAR","controlChar","LATIN_SMALL_LETTER_U","STRING_UNICODE_DIGIT_1","STRING_UNICODE_DIGIT_2","STRING_UNICODE_DIGIT_3","LATIN_CAPITAL_LETTER_A","LATIN_CAPITAL_LETTER_F","LATIN_SMALL_LETTER_A","STRING_UNICODE_DIGIT_4","intVal","parseInt","FULL_STOP","NUMBER_AFTER_FULL_STOP","LATIN_SMALL_LETTER_E","LATIN_CAPITAL_LETTER_E","NUMBER_AFTER_E","emitNumber","NUMBER_AFTER_DECIMAL","PLUS_SIGN","NUMBER_AFTER_E_AND_SIGN","NUMBER_AFTER_E_AND_DIGIT","TRUE2","TRUE3","FALSE2","LATIN_SMALL_LETTER_L","FALSE3","LATIN_SMALL_LETTER_S","FALSE4","NULL2","NULL3","concat","parseNumber","numberStr","Number","err","ERROR","onError","onEnd","token","value","TokenParserState","TokenParserMode","defaultOpts","paths","keepStack","TokenParserError","TokenParser","VALUE","mode","key","stack","map","path","startsWith","pathParts","split","slice","includes","shouldEmit","some","selector_1","selector","push","emit","pop","every","item","onValue","OBJECT","ARRAY","val","KEY","keys","JSON","stringify","parent","JSONParser","tokenizer","tokenParser","bind","isEnded","cb"],"sources":["/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/node_modules/@streamparser/json/dist/umd/index.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.jsonparse = {}));\n})(this, (function (exports) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\n\n    var _a;\r\n    var charset;\r\n    (function (charset) {\r\n        charset[charset[\"BACKSPACE\"] = 8] = \"BACKSPACE\";\r\n        charset[charset[\"FORM_FEED\"] = 12] = \"FORM_FEED\";\r\n        charset[charset[\"NEWLINE\"] = 10] = \"NEWLINE\";\r\n        charset[charset[\"CARRIAGE_RETURN\"] = 13] = \"CARRIAGE_RETURN\";\r\n        charset[charset[\"TAB\"] = 9] = \"TAB\";\r\n        charset[charset[\"SPACE\"] = 32] = \"SPACE\";\r\n        charset[charset[\"EXCLAMATION_MARK\"] = 33] = \"EXCLAMATION_MARK\";\r\n        charset[charset[\"QUOTATION_MARK\"] = 34] = \"QUOTATION_MARK\";\r\n        charset[charset[\"NUMBER_SIGN\"] = 35] = \"NUMBER_SIGN\";\r\n        charset[charset[\"DOLLAR_SIGN\"] = 36] = \"DOLLAR_SIGN\";\r\n        charset[charset[\"PERCENT_SIGN\"] = 37] = \"PERCENT_SIGN\";\r\n        charset[charset[\"AMPERSAND\"] = 38] = \"AMPERSAND\";\r\n        charset[charset[\"APOSTROPHE\"] = 39] = \"APOSTROPHE\";\r\n        charset[charset[\"LEFT_PARENTHESIS\"] = 40] = \"LEFT_PARENTHESIS\";\r\n        charset[charset[\"RIGHT_PARENTHESIS\"] = 41] = \"RIGHT_PARENTHESIS\";\r\n        charset[charset[\"ASTERISK\"] = 42] = \"ASTERISK\";\r\n        charset[charset[\"PLUS_SIGN\"] = 43] = \"PLUS_SIGN\";\r\n        charset[charset[\"COMMA\"] = 44] = \"COMMA\";\r\n        charset[charset[\"HYPHEN_MINUS\"] = 45] = \"HYPHEN_MINUS\";\r\n        charset[charset[\"FULL_STOP\"] = 46] = \"FULL_STOP\";\r\n        charset[charset[\"SOLIDUS\"] = 47] = \"SOLIDUS\";\r\n        charset[charset[\"DIGIT_ZERO\"] = 48] = \"DIGIT_ZERO\";\r\n        charset[charset[\"DIGIT_ONE\"] = 49] = \"DIGIT_ONE\";\r\n        charset[charset[\"DIGIT_TWO\"] = 50] = \"DIGIT_TWO\";\r\n        charset[charset[\"DIGIT_THREE\"] = 51] = \"DIGIT_THREE\";\r\n        charset[charset[\"DIGIT_FOUR\"] = 52] = \"DIGIT_FOUR\";\r\n        charset[charset[\"DIGIT_FIVE\"] = 53] = \"DIGIT_FIVE\";\r\n        charset[charset[\"DIGIT_SIX\"] = 54] = \"DIGIT_SIX\";\r\n        charset[charset[\"DIGIT_SEVEN\"] = 55] = \"DIGIT_SEVEN\";\r\n        charset[charset[\"DIGIT_EIGHT\"] = 56] = \"DIGIT_EIGHT\";\r\n        charset[charset[\"DIGIT_NINE\"] = 57] = \"DIGIT_NINE\";\r\n        charset[charset[\"COLON\"] = 58] = \"COLON\";\r\n        charset[charset[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\r\n        charset[charset[\"LESS_THAN_SIGN\"] = 60] = \"LESS_THAN_SIGN\";\r\n        charset[charset[\"EQUALS_SIGN\"] = 61] = \"EQUALS_SIGN\";\r\n        charset[charset[\"GREATER_THAN_SIGN\"] = 62] = \"GREATER_THAN_SIGN\";\r\n        charset[charset[\"QUESTION_MARK\"] = 63] = \"QUESTION_MARK\";\r\n        charset[charset[\"COMMERCIAL_AT\"] = 64] = \"COMMERCIAL_AT\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_A\"] = 65] = \"LATIN_CAPITAL_LETTER_A\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_B\"] = 66] = \"LATIN_CAPITAL_LETTER_B\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_C\"] = 67] = \"LATIN_CAPITAL_LETTER_C\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_D\"] = 68] = \"LATIN_CAPITAL_LETTER_D\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_E\"] = 69] = \"LATIN_CAPITAL_LETTER_E\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_F\"] = 70] = \"LATIN_CAPITAL_LETTER_F\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_G\"] = 71] = \"LATIN_CAPITAL_LETTER_G\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_H\"] = 72] = \"LATIN_CAPITAL_LETTER_H\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_I\"] = 73] = \"LATIN_CAPITAL_LETTER_I\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_J\"] = 74] = \"LATIN_CAPITAL_LETTER_J\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_K\"] = 75] = \"LATIN_CAPITAL_LETTER_K\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_L\"] = 76] = \"LATIN_CAPITAL_LETTER_L\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_M\"] = 77] = \"LATIN_CAPITAL_LETTER_M\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_N\"] = 78] = \"LATIN_CAPITAL_LETTER_N\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_O\"] = 79] = \"LATIN_CAPITAL_LETTER_O\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_P\"] = 80] = \"LATIN_CAPITAL_LETTER_P\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_Q\"] = 81] = \"LATIN_CAPITAL_LETTER_Q\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_R\"] = 82] = \"LATIN_CAPITAL_LETTER_R\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_S\"] = 83] = \"LATIN_CAPITAL_LETTER_S\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_T\"] = 84] = \"LATIN_CAPITAL_LETTER_T\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_U\"] = 85] = \"LATIN_CAPITAL_LETTER_U\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_V\"] = 86] = \"LATIN_CAPITAL_LETTER_V\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_W\"] = 87] = \"LATIN_CAPITAL_LETTER_W\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_X\"] = 88] = \"LATIN_CAPITAL_LETTER_X\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_Y\"] = 89] = \"LATIN_CAPITAL_LETTER_Y\";\r\n        charset[charset[\"LATIN_CAPITAL_LETTER_Z\"] = 90] = \"LATIN_CAPITAL_LETTER_Z\";\r\n        charset[charset[\"LEFT_SQUARE_BRACKET\"] = 91] = \"LEFT_SQUARE_BRACKET\";\r\n        charset[charset[\"REVERSE_SOLIDUS\"] = 92] = \"REVERSE_SOLIDUS\";\r\n        charset[charset[\"RIGHT_SQUARE_BRACKET\"] = 93] = \"RIGHT_SQUARE_BRACKET\";\r\n        charset[charset[\"CIRCUMFLEX_ACCENT\"] = 94] = \"CIRCUMFLEX_ACCENT\";\r\n        charset[charset[\"LOW_LINE\"] = 95] = \"LOW_LINE\";\r\n        charset[charset[\"GRAVE_ACCENT\"] = 96] = \"GRAVE_ACCENT\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_A\"] = 97] = \"LATIN_SMALL_LETTER_A\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_B\"] = 98] = \"LATIN_SMALL_LETTER_B\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_C\"] = 99] = \"LATIN_SMALL_LETTER_C\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_D\"] = 100] = \"LATIN_SMALL_LETTER_D\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_E\"] = 101] = \"LATIN_SMALL_LETTER_E\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_F\"] = 102] = \"LATIN_SMALL_LETTER_F\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_G\"] = 103] = \"LATIN_SMALL_LETTER_G\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_H\"] = 104] = \"LATIN_SMALL_LETTER_H\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_I\"] = 105] = \"LATIN_SMALL_LETTER_I\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_J\"] = 106] = \"LATIN_SMALL_LETTER_J\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_K\"] = 107] = \"LATIN_SMALL_LETTER_K\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_L\"] = 108] = \"LATIN_SMALL_LETTER_L\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_M\"] = 109] = \"LATIN_SMALL_LETTER_M\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_N\"] = 110] = \"LATIN_SMALL_LETTER_N\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_O\"] = 111] = \"LATIN_SMALL_LETTER_O\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_P\"] = 112] = \"LATIN_SMALL_LETTER_P\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_Q\"] = 113] = \"LATIN_SMALL_LETTER_Q\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_R\"] = 114] = \"LATIN_SMALL_LETTER_R\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_S\"] = 115] = \"LATIN_SMALL_LETTER_S\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_T\"] = 116] = \"LATIN_SMALL_LETTER_T\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_U\"] = 117] = \"LATIN_SMALL_LETTER_U\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_V\"] = 118] = \"LATIN_SMALL_LETTER_V\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_W\"] = 119] = \"LATIN_SMALL_LETTER_W\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_X\"] = 120] = \"LATIN_SMALL_LETTER_X\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_Y\"] = 121] = \"LATIN_SMALL_LETTER_Y\";\r\n        charset[charset[\"LATIN_SMALL_LETTER_Z\"] = 122] = \"LATIN_SMALL_LETTER_Z\";\r\n        charset[charset[\"LEFT_CURLY_BRACKET\"] = 123] = \"LEFT_CURLY_BRACKET\";\r\n        charset[charset[\"VERTICAL_LINE\"] = 124] = \"VERTICAL_LINE\";\r\n        charset[charset[\"RIGHT_CURLY_BRACKET\"] = 125] = \"RIGHT_CURLY_BRACKET\";\r\n        charset[charset[\"TILDE\"] = 126] = \"TILDE\";\r\n    })(charset || (charset = {}));\r\n    var escapedSequences = (_a = {},\r\n        _a[charset.QUOTATION_MARK] = charset.QUOTATION_MARK,\r\n        _a[charset.REVERSE_SOLIDUS] = charset.REVERSE_SOLIDUS,\r\n        _a[charset.SOLIDUS] = charset.SOLIDUS,\r\n        _a[charset.LATIN_SMALL_LETTER_B] = charset.BACKSPACE,\r\n        _a[charset.LATIN_SMALL_LETTER_F] = charset.FORM_FEED,\r\n        _a[charset.LATIN_SMALL_LETTER_N] = charset.NEWLINE,\r\n        _a[charset.LATIN_SMALL_LETTER_R] = charset.CARRIAGE_RETURN,\r\n        _a[charset.LATIN_SMALL_LETTER_T] = charset.TAB,\r\n        _a);\n\n    var utf8 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        get charset () { return charset; },\n        escapedSequences: escapedSequences\n    });\n\n    var NonBufferedString = /** @class */ (function () {\r\n        function NonBufferedString() {\r\n            this.decoder = new TextDecoder(\"utf-8\");\r\n            this.string = \"\";\r\n            this.byteLength = 0;\r\n        }\r\n        NonBufferedString.prototype.appendChar = function (char) {\r\n            this.string += String.fromCharCode(char);\r\n            this.byteLength += 1;\r\n        };\r\n        NonBufferedString.prototype.appendBuf = function (buf, start, end) {\r\n            if (start === void 0) { start = 0; }\r\n            if (end === void 0) { end = buf.length; }\r\n            this.string += this.decoder.decode(buf.subarray(start, end));\r\n            this.byteLength += end - start;\r\n        };\r\n        NonBufferedString.prototype.reset = function () {\r\n            this.string = \"\";\r\n            this.byteLength = 0;\r\n        };\r\n        NonBufferedString.prototype.toString = function () {\r\n            return this.string;\r\n        };\r\n        return NonBufferedString;\r\n    }());\r\n    var BufferedString = /** @class */ (function () {\r\n        function BufferedString(bufferSize) {\r\n            this.decoder = new TextDecoder(\"utf-8\");\r\n            this.bufferOffset = 0;\r\n            this.string = \"\";\r\n            this.byteLength = 0;\r\n            this.buffer = new Uint8Array(bufferSize);\r\n        }\r\n        BufferedString.prototype.appendChar = function (char) {\r\n            if (this.bufferOffset >= this.buffer.length)\r\n                this.flushStringBuffer();\r\n            this.buffer[this.bufferOffset++] = char;\r\n            this.byteLength += 1;\r\n        };\r\n        BufferedString.prototype.appendBuf = function (buf, start, end) {\r\n            if (start === void 0) { start = 0; }\r\n            if (end === void 0) { end = buf.length; }\r\n            var size = end - start;\r\n            if (this.bufferOffset + size > this.buffer.length)\r\n                this.flushStringBuffer();\r\n            this.buffer.set(buf.subarray(start, end), this.bufferOffset);\r\n            this.bufferOffset += size;\r\n            this.byteLength += size;\r\n        };\r\n        BufferedString.prototype.flushStringBuffer = function () {\r\n            this.string += this.decoder.decode(this.buffer.subarray(0, this.bufferOffset));\r\n            this.bufferOffset = 0;\r\n        };\r\n        BufferedString.prototype.reset = function () {\r\n            this.string = \"\";\r\n            this.bufferOffset = 0;\r\n            this.byteLength = 0;\r\n        };\r\n        BufferedString.prototype.toString = function () {\r\n            this.flushStringBuffer();\r\n            return this.string;\r\n        };\r\n        return BufferedString;\r\n    }());\n\n    exports.TokenType = void 0;\r\n    (function (TokenType) {\r\n        TokenType[TokenType[\"LEFT_BRACE\"] = 1] = \"LEFT_BRACE\";\r\n        TokenType[TokenType[\"RIGHT_BRACE\"] = 2] = \"RIGHT_BRACE\";\r\n        TokenType[TokenType[\"LEFT_BRACKET\"] = 3] = \"LEFT_BRACKET\";\r\n        TokenType[TokenType[\"RIGHT_BRACKET\"] = 4] = \"RIGHT_BRACKET\";\r\n        TokenType[TokenType[\"COLON\"] = 5] = \"COLON\";\r\n        TokenType[TokenType[\"COMMA\"] = 6] = \"COMMA\";\r\n        TokenType[TokenType[\"TRUE\"] = 7] = \"TRUE\";\r\n        TokenType[TokenType[\"FALSE\"] = 8] = \"FALSE\";\r\n        TokenType[TokenType[\"NULL\"] = 9] = \"NULL\";\r\n        TokenType[TokenType[\"STRING\"] = 10] = \"STRING\";\r\n        TokenType[TokenType[\"NUMBER\"] = 11] = \"NUMBER\";\r\n        TokenType[TokenType[\"SEPARATOR\"] = 12] = \"SEPARATOR\";\r\n    })(exports.TokenType || (exports.TokenType = {}));\n\n    var LEFT_BRACE$1 = exports.TokenType.LEFT_BRACE, RIGHT_BRACE$1 = exports.TokenType.RIGHT_BRACE, LEFT_BRACKET$1 = exports.TokenType.LEFT_BRACKET, RIGHT_BRACKET$1 = exports.TokenType.RIGHT_BRACKET, COLON$1 = exports.TokenType.COLON, COMMA$1 = exports.TokenType.COMMA, TRUE$1 = exports.TokenType.TRUE, FALSE$1 = exports.TokenType.FALSE, NULL$1 = exports.TokenType.NULL, STRING$1 = exports.TokenType.STRING, NUMBER$1 = exports.TokenType.NUMBER;\r\n    // Tokenizer States\r\n    var TokenizerStates;\r\n    (function (TokenizerStates) {\r\n        TokenizerStates[TokenizerStates[\"START\"] = 0] = \"START\";\r\n        TokenizerStates[TokenizerStates[\"ENDED\"] = 1] = \"ENDED\";\r\n        TokenizerStates[TokenizerStates[\"ERROR\"] = 2] = \"ERROR\";\r\n        TokenizerStates[TokenizerStates[\"TRUE1\"] = 3] = \"TRUE1\";\r\n        TokenizerStates[TokenizerStates[\"TRUE2\"] = 4] = \"TRUE2\";\r\n        TokenizerStates[TokenizerStates[\"TRUE3\"] = 5] = \"TRUE3\";\r\n        TokenizerStates[TokenizerStates[\"FALSE1\"] = 6] = \"FALSE1\";\r\n        TokenizerStates[TokenizerStates[\"FALSE2\"] = 7] = \"FALSE2\";\r\n        TokenizerStates[TokenizerStates[\"FALSE3\"] = 8] = \"FALSE3\";\r\n        TokenizerStates[TokenizerStates[\"FALSE4\"] = 9] = \"FALSE4\";\r\n        TokenizerStates[TokenizerStates[\"NULL1\"] = 10] = \"NULL1\";\r\n        TokenizerStates[TokenizerStates[\"NULL2\"] = 11] = \"NULL2\";\r\n        TokenizerStates[TokenizerStates[\"NULL3\"] = 12] = \"NULL3\";\r\n        TokenizerStates[TokenizerStates[\"STRING_DEFAULT\"] = 13] = \"STRING_DEFAULT\";\r\n        TokenizerStates[TokenizerStates[\"STRING_AFTER_BACKSLASH\"] = 14] = \"STRING_AFTER_BACKSLASH\";\r\n        TokenizerStates[TokenizerStates[\"STRING_UNICODE_DIGIT_1\"] = 15] = \"STRING_UNICODE_DIGIT_1\";\r\n        TokenizerStates[TokenizerStates[\"STRING_UNICODE_DIGIT_2\"] = 16] = \"STRING_UNICODE_DIGIT_2\";\r\n        TokenizerStates[TokenizerStates[\"STRING_UNICODE_DIGIT_3\"] = 17] = \"STRING_UNICODE_DIGIT_3\";\r\n        TokenizerStates[TokenizerStates[\"STRING_UNICODE_DIGIT_4\"] = 18] = \"STRING_UNICODE_DIGIT_4\";\r\n        TokenizerStates[TokenizerStates[\"STRING_INCOMPLETE_CHAR\"] = 19] = \"STRING_INCOMPLETE_CHAR\";\r\n        TokenizerStates[TokenizerStates[\"NUMBER_AFTER_INITIAL_MINUS\"] = 20] = \"NUMBER_AFTER_INITIAL_MINUS\";\r\n        TokenizerStates[TokenizerStates[\"NUMBER_AFTER_INITIAL_ZERO\"] = 21] = \"NUMBER_AFTER_INITIAL_ZERO\";\r\n        TokenizerStates[TokenizerStates[\"NUMBER_AFTER_INITIAL_NON_ZERO\"] = 22] = \"NUMBER_AFTER_INITIAL_NON_ZERO\";\r\n        TokenizerStates[TokenizerStates[\"NUMBER_AFTER_FULL_STOP\"] = 23] = \"NUMBER_AFTER_FULL_STOP\";\r\n        TokenizerStates[TokenizerStates[\"NUMBER_AFTER_DECIMAL\"] = 24] = \"NUMBER_AFTER_DECIMAL\";\r\n        TokenizerStates[TokenizerStates[\"NUMBER_AFTER_E\"] = 25] = \"NUMBER_AFTER_E\";\r\n        TokenizerStates[TokenizerStates[\"NUMBER_AFTER_E_AND_SIGN\"] = 26] = \"NUMBER_AFTER_E_AND_SIGN\";\r\n        TokenizerStates[TokenizerStates[\"NUMBER_AFTER_E_AND_DIGIT\"] = 27] = \"NUMBER_AFTER_E_AND_DIGIT\";\r\n        TokenizerStates[TokenizerStates[\"SEPARATOR\"] = 28] = \"SEPARATOR\";\r\n    })(TokenizerStates || (TokenizerStates = {}));\r\n    var defaultOpts$1 = {\r\n        stringBufferSize: 0,\r\n        numberBufferSize: 0,\r\n        separator: undefined,\r\n    };\r\n    var TokenizerError = /** @class */ (function (_super) {\r\n        __extends(TokenizerError, _super);\r\n        function TokenizerError(message) {\r\n            var _this = _super.call(this, message) || this;\r\n            // Typescript is broken. This is a workaround\r\n            Object.setPrototypeOf(_this, TokenizerError.prototype);\r\n            return _this;\r\n        }\r\n        return TokenizerError;\r\n    }(Error));\r\n    var Tokenizer = /** @class */ (function () {\r\n        function Tokenizer(opts) {\r\n            this.state = TokenizerStates.START;\r\n            this.separatorIndex = 0;\r\n            this.unicode = undefined; // unicode escapes\r\n            this.highSurrogate = undefined;\r\n            this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary\r\n            this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read\r\n            this.char_split_buffer = new Uint8Array(4); // for rebuilding chars split before boundary is reached\r\n            this.encoder = new TextEncoder();\r\n            this.offset = -1;\r\n            opts = __assign(__assign({}, defaultOpts$1), opts);\r\n            this.bufferedString =\r\n                opts.stringBufferSize && opts.stringBufferSize > 4\r\n                    ? new BufferedString(opts.stringBufferSize)\r\n                    : new NonBufferedString();\r\n            this.bufferedNumber =\r\n                opts.numberBufferSize && opts.numberBufferSize > 0\r\n                    ? new BufferedString(opts.numberBufferSize)\r\n                    : new NonBufferedString();\r\n            this.separator = opts.separator;\r\n            this.separatorBytes = opts.separator\r\n                ? this.encoder.encode(opts.separator)\r\n                : undefined;\r\n        }\r\n        Object.defineProperty(Tokenizer.prototype, \"isEnded\", {\r\n            get: function () {\r\n                return this.state === TokenizerStates.ENDED;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Tokenizer.prototype.write = function (input) {\r\n            var buffer;\r\n            if (input instanceof Uint8Array) {\r\n                buffer = input;\r\n            }\r\n            else if (typeof input === \"string\") {\r\n                buffer = this.encoder.encode(input);\r\n            }\r\n            else if ((typeof input === \"object\" && \"buffer\" in input) ||\r\n                Array.isArray(input)) {\r\n                buffer = Uint8Array.from(input);\r\n            }\r\n            else {\r\n                this.error(new TypeError(\"Unexpected type. The `write` function only accepts Arrays, TypedArrays and Strings.\"));\r\n                return;\r\n            }\r\n            for (var i = 0; i < buffer.length; i += 1) {\r\n                var n = buffer[i]; // get current byte from buffer\r\n                switch (this.state) {\r\n                    case TokenizerStates.START:\r\n                        this.offset += 1;\r\n                        if (this.separatorBytes && n === this.separatorBytes[0]) {\r\n                            if (this.separatorBytes.length === 1) {\r\n                                this.state = TokenizerStates.START;\r\n                                this.onToken(exports.TokenType.SEPARATOR, this.separator, this.offset + this.separatorBytes.length - 1);\r\n                                continue;\r\n                            }\r\n                            this.state = TokenizerStates.SEPARATOR;\r\n                            continue;\r\n                        }\r\n                        if (n === charset.SPACE ||\r\n                            n === charset.NEWLINE ||\r\n                            n === charset.CARRIAGE_RETURN ||\r\n                            n === charset.TAB) {\r\n                            // whitespace\r\n                            continue;\r\n                        }\r\n                        if (n === charset.LEFT_CURLY_BRACKET) {\r\n                            this.onToken(LEFT_BRACE$1, \"{\", this.offset);\r\n                            continue;\r\n                        }\r\n                        if (n === charset.RIGHT_CURLY_BRACKET) {\r\n                            this.onToken(RIGHT_BRACE$1, \"}\", this.offset);\r\n                            continue;\r\n                        }\r\n                        if (n === charset.LEFT_SQUARE_BRACKET) {\r\n                            this.onToken(LEFT_BRACKET$1, \"[\", this.offset);\r\n                            continue;\r\n                        }\r\n                        if (n === charset.RIGHT_SQUARE_BRACKET) {\r\n                            this.onToken(RIGHT_BRACKET$1, \"]\", this.offset);\r\n                            continue;\r\n                        }\r\n                        if (n === charset.COLON) {\r\n                            this.onToken(COLON$1, \":\", this.offset);\r\n                            continue;\r\n                        }\r\n                        if (n === charset.COMMA) {\r\n                            this.onToken(COMMA$1, \",\", this.offset);\r\n                            continue;\r\n                        }\r\n                        if (n === charset.LATIN_SMALL_LETTER_T) {\r\n                            this.state = TokenizerStates.TRUE1;\r\n                            continue;\r\n                        }\r\n                        if (n === charset.LATIN_SMALL_LETTER_F) {\r\n                            this.state = TokenizerStates.FALSE1;\r\n                            continue;\r\n                        }\r\n                        if (n === charset.LATIN_SMALL_LETTER_N) {\r\n                            this.state = TokenizerStates.NULL1;\r\n                            continue;\r\n                        }\r\n                        if (n === charset.QUOTATION_MARK) {\r\n                            this.bufferedString.reset();\r\n                            this.state = TokenizerStates.STRING_DEFAULT;\r\n                            continue;\r\n                        }\r\n                        if (n >= charset.DIGIT_ONE && n <= charset.DIGIT_NINE) {\r\n                            this.bufferedNumber.reset();\r\n                            this.bufferedNumber.appendChar(n);\r\n                            this.state = TokenizerStates.NUMBER_AFTER_INITIAL_NON_ZERO;\r\n                            continue;\r\n                        }\r\n                        if (n === charset.DIGIT_ZERO) {\r\n                            this.bufferedNumber.reset();\r\n                            this.bufferedNumber.appendChar(n);\r\n                            this.state = TokenizerStates.NUMBER_AFTER_INITIAL_ZERO;\r\n                            continue;\r\n                        }\r\n                        if (n === charset.HYPHEN_MINUS) {\r\n                            this.bufferedNumber.reset();\r\n                            this.bufferedNumber.appendChar(n);\r\n                            this.state = TokenizerStates.NUMBER_AFTER_INITIAL_MINUS;\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    // STRING\r\n                    case TokenizerStates.STRING_DEFAULT:\r\n                        if (n === charset.QUOTATION_MARK) {\r\n                            var string = this.bufferedString.toString();\r\n                            this.state = TokenizerStates.START;\r\n                            this.onToken(STRING$1, string, this.offset);\r\n                            this.offset += this.bufferedString.byteLength + 1;\r\n                            continue;\r\n                        }\r\n                        if (n === charset.REVERSE_SOLIDUS) {\r\n                            this.state = TokenizerStates.STRING_AFTER_BACKSLASH;\r\n                            continue;\r\n                        }\r\n                        if (n >= 128) {\r\n                            // Parse multi byte (>=128) chars one at a time\r\n                            if (n >= 194 && n <= 223) {\r\n                                this.bytes_in_sequence = 2;\r\n                            }\r\n                            else if (n <= 239) {\r\n                                this.bytes_in_sequence = 3;\r\n                            }\r\n                            else {\r\n                                this.bytes_in_sequence = 4;\r\n                            }\r\n                            if (this.bytes_in_sequence <= buffer.length - i) {\r\n                                // if bytes needed to complete char fall outside buffer length, we have a boundary split\r\n                                this.bufferedString.appendBuf(buffer, i, i + this.bytes_in_sequence);\r\n                                i += this.bytes_in_sequence - 1;\r\n                                continue;\r\n                            }\r\n                            this.bytes_remaining = i + this.bytes_in_sequence - buffer.length;\r\n                            this.char_split_buffer.set(buffer.subarray(i));\r\n                            i = buffer.length - 1;\r\n                            this.state = TokenizerStates.STRING_INCOMPLETE_CHAR;\r\n                            continue;\r\n                        }\r\n                        if (n >= charset.SPACE) {\r\n                            this.bufferedString.appendChar(n);\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    case TokenizerStates.STRING_INCOMPLETE_CHAR:\r\n                        // check for carry over of a multi byte char split between data chunks\r\n                        // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration\r\n                        this.char_split_buffer.set(buffer.subarray(i, i + this.bytes_remaining), this.bytes_in_sequence - this.bytes_remaining);\r\n                        this.bufferedString.appendBuf(this.char_split_buffer, 0, this.bytes_in_sequence);\r\n                        i = this.bytes_remaining - 1;\r\n                        this.state = TokenizerStates.STRING_DEFAULT;\r\n                        continue;\r\n                    case TokenizerStates.STRING_AFTER_BACKSLASH:\r\n                        var controlChar = escapedSequences[n];\r\n                        if (controlChar) {\r\n                            this.bufferedString.appendChar(controlChar);\r\n                            this.state = TokenizerStates.STRING_DEFAULT;\r\n                            continue;\r\n                        }\r\n                        if (n === charset.LATIN_SMALL_LETTER_U) {\r\n                            this.unicode = \"\";\r\n                            this.state = TokenizerStates.STRING_UNICODE_DIGIT_1;\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    case TokenizerStates.STRING_UNICODE_DIGIT_1:\r\n                    case TokenizerStates.STRING_UNICODE_DIGIT_2:\r\n                    case TokenizerStates.STRING_UNICODE_DIGIT_3:\r\n                        if ((n >= charset.DIGIT_ZERO && n <= charset.DIGIT_NINE) ||\r\n                            (n >= charset.LATIN_CAPITAL_LETTER_A &&\r\n                                n <= charset.LATIN_CAPITAL_LETTER_F) ||\r\n                            (n >= charset.LATIN_SMALL_LETTER_A &&\r\n                                n <= charset.LATIN_SMALL_LETTER_F)) {\r\n                            this.unicode += String.fromCharCode(n);\r\n                            this.state += 1;\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    case TokenizerStates.STRING_UNICODE_DIGIT_4:\r\n                        if ((n >= charset.DIGIT_ZERO && n <= charset.DIGIT_NINE) ||\r\n                            (n >= charset.LATIN_CAPITAL_LETTER_A &&\r\n                                n <= charset.LATIN_CAPITAL_LETTER_F) ||\r\n                            (n >= charset.LATIN_SMALL_LETTER_A &&\r\n                                n <= charset.LATIN_SMALL_LETTER_F)) {\r\n                            var intVal = parseInt(this.unicode + String.fromCharCode(n), 16);\r\n                            if (this.highSurrogate === undefined) {\r\n                                if (intVal >= 0xd800 && intVal <= 0xdbff) {\r\n                                    //<55296,56319> - highSurrogate\r\n                                    this.highSurrogate = intVal;\r\n                                }\r\n                                else {\r\n                                    this.bufferedString.appendBuf(this.encoder.encode(String.fromCharCode(intVal)));\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (intVal >= 0xdc00 && intVal <= 0xdfff) {\r\n                                    //<56320,57343> - lowSurrogate\r\n                                    this.bufferedString.appendBuf(this.encoder.encode(String.fromCharCode(this.highSurrogate, intVal)));\r\n                                }\r\n                                else {\r\n                                    this.bufferedString.appendBuf(this.encoder.encode(String.fromCharCode(this.highSurrogate)));\r\n                                }\r\n                                this.highSurrogate = undefined;\r\n                            }\r\n                            this.state = TokenizerStates.STRING_DEFAULT;\r\n                            continue;\r\n                        }\r\n                    // Number\r\n                    case TokenizerStates.NUMBER_AFTER_INITIAL_MINUS:\r\n                        if (n === charset.DIGIT_ZERO) {\r\n                            this.bufferedNumber.appendChar(n);\r\n                            this.state = TokenizerStates.NUMBER_AFTER_INITIAL_ZERO;\r\n                            continue;\r\n                        }\r\n                        if (n >= charset.DIGIT_ONE && n <= charset.DIGIT_NINE) {\r\n                            this.bufferedNumber.appendChar(n);\r\n                            this.state = TokenizerStates.NUMBER_AFTER_INITIAL_NON_ZERO;\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    case TokenizerStates.NUMBER_AFTER_INITIAL_ZERO:\r\n                        if (n === charset.FULL_STOP) {\r\n                            this.bufferedNumber.appendChar(n);\r\n                            this.state = TokenizerStates.NUMBER_AFTER_FULL_STOP;\r\n                            continue;\r\n                        }\r\n                        if (n === charset.LATIN_SMALL_LETTER_E ||\r\n                            n === charset.LATIN_CAPITAL_LETTER_E) {\r\n                            this.bufferedNumber.appendChar(n);\r\n                            this.state = TokenizerStates.NUMBER_AFTER_E;\r\n                            continue;\r\n                        }\r\n                        i -= 1;\r\n                        this.state = TokenizerStates.START;\r\n                        this.emitNumber();\r\n                        continue;\r\n                    case TokenizerStates.NUMBER_AFTER_INITIAL_NON_ZERO:\r\n                        if (n >= charset.DIGIT_ZERO && n <= charset.DIGIT_NINE) {\r\n                            this.bufferedNumber.appendChar(n);\r\n                            continue;\r\n                        }\r\n                        if (n === charset.FULL_STOP) {\r\n                            this.bufferedNumber.appendChar(n);\r\n                            this.state = TokenizerStates.NUMBER_AFTER_FULL_STOP;\r\n                            continue;\r\n                        }\r\n                        if (n === charset.LATIN_SMALL_LETTER_E ||\r\n                            n === charset.LATIN_CAPITAL_LETTER_E) {\r\n                            this.bufferedNumber.appendChar(n);\r\n                            this.state = TokenizerStates.NUMBER_AFTER_E;\r\n                            continue;\r\n                        }\r\n                        i -= 1;\r\n                        this.state = TokenizerStates.START;\r\n                        this.emitNumber();\r\n                        continue;\r\n                    case TokenizerStates.NUMBER_AFTER_FULL_STOP:\r\n                        if (n >= charset.DIGIT_ZERO && n <= charset.DIGIT_NINE) {\r\n                            this.bufferedNumber.appendChar(n);\r\n                            this.state = TokenizerStates.NUMBER_AFTER_DECIMAL;\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    case TokenizerStates.NUMBER_AFTER_DECIMAL:\r\n                        if (n >= charset.DIGIT_ZERO && n <= charset.DIGIT_NINE) {\r\n                            this.bufferedNumber.appendChar(n);\r\n                            continue;\r\n                        }\r\n                        if (n === charset.LATIN_SMALL_LETTER_E ||\r\n                            n === charset.LATIN_CAPITAL_LETTER_E) {\r\n                            this.bufferedNumber.appendChar(n);\r\n                            this.state = TokenizerStates.NUMBER_AFTER_E;\r\n                            continue;\r\n                        }\r\n                        i -= 1;\r\n                        this.state = TokenizerStates.START;\r\n                        this.emitNumber();\r\n                        continue;\r\n                    case TokenizerStates.NUMBER_AFTER_E:\r\n                        if (n === charset.PLUS_SIGN || n === charset.HYPHEN_MINUS) {\r\n                            this.bufferedNumber.appendChar(n);\r\n                            this.state = TokenizerStates.NUMBER_AFTER_E_AND_SIGN;\r\n                            continue;\r\n                        }\r\n                    // Allow cascading\r\n                    case TokenizerStates.NUMBER_AFTER_E_AND_SIGN:\r\n                        if (n >= charset.DIGIT_ZERO && n <= charset.DIGIT_NINE) {\r\n                            this.bufferedNumber.appendChar(n);\r\n                            this.state = TokenizerStates.NUMBER_AFTER_E_AND_DIGIT;\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    case TokenizerStates.NUMBER_AFTER_E_AND_DIGIT:\r\n                        if (n >= charset.DIGIT_ZERO && n <= charset.DIGIT_NINE) {\r\n                            this.bufferedNumber.appendChar(n);\r\n                            continue;\r\n                        }\r\n                        i -= 1;\r\n                        this.state = TokenizerStates.START;\r\n                        this.emitNumber();\r\n                        continue;\r\n                    // TRUE\r\n                    case TokenizerStates.TRUE1:\r\n                        if (n === charset.LATIN_SMALL_LETTER_R) {\r\n                            this.state = TokenizerStates.TRUE2;\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    case TokenizerStates.TRUE2:\r\n                        if (n === charset.LATIN_SMALL_LETTER_U) {\r\n                            this.state = TokenizerStates.TRUE3;\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    case TokenizerStates.TRUE3:\r\n                        if (n === charset.LATIN_SMALL_LETTER_E) {\r\n                            this.state = TokenizerStates.START;\r\n                            this.onToken(TRUE$1, true, this.offset);\r\n                            this.offset += 3;\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    // FALSE\r\n                    case TokenizerStates.FALSE1:\r\n                        if (n === charset.LATIN_SMALL_LETTER_A) {\r\n                            this.state = TokenizerStates.FALSE2;\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    case TokenizerStates.FALSE2:\r\n                        if (n === charset.LATIN_SMALL_LETTER_L) {\r\n                            this.state = TokenizerStates.FALSE3;\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    case TokenizerStates.FALSE3:\r\n                        if (n === charset.LATIN_SMALL_LETTER_S) {\r\n                            this.state = TokenizerStates.FALSE4;\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    case TokenizerStates.FALSE4:\r\n                        if (n === charset.LATIN_SMALL_LETTER_E) {\r\n                            this.state = TokenizerStates.START;\r\n                            this.onToken(FALSE$1, false, this.offset);\r\n                            this.offset += 4;\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    // NULL\r\n                    case TokenizerStates.NULL1:\r\n                        if (n === charset.LATIN_SMALL_LETTER_U) {\r\n                            this.state = TokenizerStates.NULL2;\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    case TokenizerStates.NULL2:\r\n                        if (n === charset.LATIN_SMALL_LETTER_L) {\r\n                            this.state = TokenizerStates.NULL3;\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    case TokenizerStates.NULL3:\r\n                        if (n === charset.LATIN_SMALL_LETTER_L) {\r\n                            this.state = TokenizerStates.START;\r\n                            this.onToken(NULL$1, null, this.offset);\r\n                            this.offset += 3;\r\n                            continue;\r\n                        }\r\n                        break;\r\n                    case TokenizerStates.SEPARATOR:\r\n                        this.separatorIndex += 1;\r\n                        if (!this.separatorBytes ||\r\n                            n !== this.separatorBytes[this.separatorIndex]) {\r\n                            break;\r\n                        }\r\n                        if (this.separatorIndex === this.separatorBytes.length - 1) {\r\n                            this.state = TokenizerStates.START;\r\n                            this.onToken(exports.TokenType.SEPARATOR, this.separator, this.offset + this.separatorIndex);\r\n                            this.separatorIndex = 0;\r\n                        }\r\n                        continue;\r\n                    case TokenizerStates.ENDED:\r\n                        if (n === charset.SPACE ||\r\n                            n === charset.NEWLINE ||\r\n                            n === charset.CARRIAGE_RETURN ||\r\n                            n === charset.TAB) {\r\n                            // whitespace\r\n                            continue;\r\n                        }\r\n                }\r\n                this.error(new TokenizerError(\"Unexpected \\\"\".concat(String.fromCharCode(n), \"\\\" at position \\\"\").concat(i, \"\\\" in state \").concat(TokenizerStates[this.state])));\r\n                return;\r\n            }\r\n        };\r\n        Tokenizer.prototype.emitNumber = function () {\r\n            this.onToken(NUMBER$1, this.parseNumber(this.bufferedNumber.toString()), this.offset);\r\n            this.offset += this.bufferedNumber.byteLength - 1;\r\n        };\r\n        Tokenizer.prototype.parseNumber = function (numberStr) {\r\n            return Number(numberStr);\r\n        };\r\n        Tokenizer.prototype.error = function (err) {\r\n            if (this.state !== TokenizerStates.ENDED) {\r\n                this.state = TokenizerStates.ERROR;\r\n            }\r\n            this.onError(err);\r\n        };\r\n        Tokenizer.prototype.end = function () {\r\n            switch (this.state) {\r\n                case TokenizerStates.NUMBER_AFTER_INITIAL_ZERO:\r\n                case TokenizerStates.NUMBER_AFTER_INITIAL_NON_ZERO:\r\n                case TokenizerStates.NUMBER_AFTER_DECIMAL:\r\n                case TokenizerStates.NUMBER_AFTER_E_AND_DIGIT:\r\n                    this.state = TokenizerStates.ENDED;\r\n                    this.emitNumber();\r\n                    this.onEnd();\r\n                    break;\r\n                case TokenizerStates.START:\r\n                case TokenizerStates.ERROR:\r\n                case TokenizerStates.SEPARATOR:\r\n                    this.state = TokenizerStates.ENDED;\r\n                    this.onEnd();\r\n                    break;\r\n                default:\r\n                    this.error(new TokenizerError(\"Tokenizer ended in the middle of a token (state: \".concat(TokenizerStates[this.state], \"). Either not all the data was received or the data was invalid.\")));\r\n            }\r\n        };\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        Tokenizer.prototype.onToken = function (token, value, offset) {\r\n            // Override me\r\n            throw new TokenizerError('Can\\'t emit tokens before the \"onToken\" callback has been set up.');\r\n        };\r\n        Tokenizer.prototype.onError = function (err) {\r\n            // Override me\r\n            throw err;\r\n        };\r\n        Tokenizer.prototype.onEnd = function () {\r\n            // Override me\r\n        };\r\n        return Tokenizer;\r\n    }());\n\n    var LEFT_BRACE = exports.TokenType.LEFT_BRACE, RIGHT_BRACE = exports.TokenType.RIGHT_BRACE, LEFT_BRACKET = exports.TokenType.LEFT_BRACKET, RIGHT_BRACKET = exports.TokenType.RIGHT_BRACKET, COLON = exports.TokenType.COLON, COMMA = exports.TokenType.COMMA, TRUE = exports.TokenType.TRUE, FALSE = exports.TokenType.FALSE, NULL = exports.TokenType.NULL, STRING = exports.TokenType.STRING, NUMBER = exports.TokenType.NUMBER, SEPARATOR = exports.TokenType.SEPARATOR;\r\n    // Parser States\r\n    var TokenParserState;\r\n    (function (TokenParserState) {\r\n        TokenParserState[TokenParserState[\"VALUE\"] = 0] = \"VALUE\";\r\n        TokenParserState[TokenParserState[\"KEY\"] = 1] = \"KEY\";\r\n        TokenParserState[TokenParserState[\"COLON\"] = 2] = \"COLON\";\r\n        TokenParserState[TokenParserState[\"COMMA\"] = 3] = \"COMMA\";\r\n        TokenParserState[TokenParserState[\"ENDED\"] = 4] = \"ENDED\";\r\n        TokenParserState[TokenParserState[\"ERROR\"] = 5] = \"ERROR\";\r\n        TokenParserState[TokenParserState[\"SEPARATOR\"] = 6] = \"SEPARATOR\";\r\n    })(TokenParserState || (TokenParserState = {}));\r\n    // Parser Modes\r\n    var TokenParserMode;\r\n    (function (TokenParserMode) {\r\n        TokenParserMode[TokenParserMode[\"OBJECT\"] = 0] = \"OBJECT\";\r\n        TokenParserMode[TokenParserMode[\"ARRAY\"] = 1] = \"ARRAY\";\r\n    })(TokenParserMode || (TokenParserMode = {}));\r\n    var defaultOpts = {\r\n        paths: undefined,\r\n        keepStack: true,\r\n        separator: undefined,\r\n    };\r\n    var TokenParserError = /** @class */ (function (_super) {\r\n        __extends(TokenParserError, _super);\r\n        function TokenParserError(message) {\r\n            var _this = _super.call(this, message) || this;\r\n            // Typescript is broken. This is a workaround\r\n            Object.setPrototypeOf(_this, TokenParserError.prototype);\r\n            return _this;\r\n        }\r\n        return TokenParserError;\r\n    }(Error));\r\n    var TokenParser = /** @class */ (function () {\r\n        function TokenParser(opts) {\r\n            this.state = TokenParserState.VALUE;\r\n            this.mode = undefined;\r\n            this.key = undefined;\r\n            this.value = undefined;\r\n            this.stack = [];\r\n            opts = __assign(__assign({}, defaultOpts), opts);\r\n            if (opts.paths) {\r\n                this.paths = opts.paths.map(function (path) {\r\n                    if (path === undefined || path === \"$*\")\r\n                        return undefined;\r\n                    if (!path.startsWith(\"$\"))\r\n                        throw new TokenParserError(\"Invalid selector \\\"\".concat(path, \"\\\". Should start with \\\"$\\\".\"));\r\n                    var pathParts = path.split(\".\").slice(1);\r\n                    if (pathParts.includes(\"\"))\r\n                        throw new TokenParserError(\"Invalid selector \\\"\".concat(path, \"\\\". \\\"..\\\" syntax not supported.\"));\r\n                    return pathParts;\r\n                });\r\n            }\r\n            this.keepStack = opts.keepStack;\r\n            this.separator = opts.separator;\r\n        }\r\n        TokenParser.prototype.shouldEmit = function () {\r\n            var _this = this;\r\n            if (!this.paths)\r\n                return true;\r\n            return this.paths.some(function (path) {\r\n                var _a;\r\n                if (path === undefined)\r\n                    return true;\r\n                if (path.length !== _this.stack.length)\r\n                    return false;\r\n                for (var i = 0; i < path.length - 1; i++) {\r\n                    var selector_1 = path[i];\r\n                    var key = _this.stack[i + 1].key;\r\n                    if (selector_1 === \"*\")\r\n                        continue;\r\n                    if (selector_1 !== key)\r\n                        return false;\r\n                }\r\n                var selector = path[path.length - 1];\r\n                if (selector === \"*\")\r\n                    return true;\r\n                return selector === ((_a = _this.key) === null || _a === void 0 ? void 0 : _a.toString());\r\n            });\r\n        };\r\n        TokenParser.prototype.push = function () {\r\n            this.stack.push({\r\n                key: this.key,\r\n                value: this.value,\r\n                mode: this.mode,\r\n                emit: this.shouldEmit(),\r\n            });\r\n        };\r\n        TokenParser.prototype.pop = function () {\r\n            var _a;\r\n            var value = this.value;\r\n            var emit;\r\n            (_a = this.stack.pop(), this.key = _a.key, this.value = _a.value, this.mode = _a.mode, emit = _a.emit);\r\n            this.state =\r\n                this.mode !== undefined ? TokenParserState.COMMA : TokenParserState.VALUE;\r\n            this.emit(value, emit);\r\n        };\r\n        TokenParser.prototype.emit = function (value, emit) {\r\n            if (!this.keepStack &&\r\n                this.value &&\r\n                this.stack.every(function (item) { return !item.emit; })) {\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                delete this.value[this.key];\r\n            }\r\n            if (emit) {\r\n                this.onValue(value, \r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                this.key, \r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                this.value, this.stack);\r\n            }\r\n            if (this.stack.length === 0) {\r\n                if (this.separator) {\r\n                    this.state = TokenParserState.SEPARATOR;\r\n                }\r\n                else if (this.separator === undefined) {\r\n                    this.end();\r\n                }\r\n                // else if separator === '', expect next JSON object.\r\n            }\r\n        };\r\n        Object.defineProperty(TokenParser.prototype, \"isEnded\", {\r\n            get: function () {\r\n                return this.state === TokenParserState.ENDED;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        TokenParser.prototype.write = function (token, value) {\r\n            if (this.state === TokenParserState.VALUE) {\r\n                if (token === STRING ||\r\n                    token === NUMBER ||\r\n                    token === TRUE ||\r\n                    token === FALSE ||\r\n                    token === NULL) {\r\n                    if (this.mode === TokenParserMode.OBJECT) {\r\n                        this.value[this.key] = value;\r\n                        this.state = TokenParserState.COMMA;\r\n                    }\r\n                    else if (this.mode === TokenParserMode.ARRAY) {\r\n                        this.value.push(value);\r\n                        this.state = TokenParserState.COMMA;\r\n                    }\r\n                    this.emit(value, this.shouldEmit());\r\n                    return;\r\n                }\r\n                if (token === LEFT_BRACE) {\r\n                    this.push();\r\n                    if (this.mode === TokenParserMode.OBJECT) {\r\n                        this.value = this.value[this.key] = {};\r\n                    }\r\n                    else if (this.mode === TokenParserMode.ARRAY) {\r\n                        var val = {};\r\n                        this.value.push(val);\r\n                        this.value = val;\r\n                    }\r\n                    else {\r\n                        this.value = {};\r\n                    }\r\n                    this.mode = TokenParserMode.OBJECT;\r\n                    this.state = TokenParserState.KEY;\r\n                    this.key = undefined;\r\n                    return;\r\n                }\r\n                if (token === LEFT_BRACKET) {\r\n                    this.push();\r\n                    if (this.mode === TokenParserMode.OBJECT) {\r\n                        this.value = this.value[this.key] = [];\r\n                    }\r\n                    else if (this.mode === TokenParserMode.ARRAY) {\r\n                        var val = [];\r\n                        this.value.push(val);\r\n                        this.value = val;\r\n                    }\r\n                    else {\r\n                        this.value = [];\r\n                    }\r\n                    this.mode = TokenParserMode.ARRAY;\r\n                    this.state = TokenParserState.VALUE;\r\n                    this.key = 0;\r\n                    return;\r\n                }\r\n                if (this.mode === TokenParserMode.ARRAY &&\r\n                    token === RIGHT_BRACKET &&\r\n                    this.value.length === 0) {\r\n                    this.pop();\r\n                    return;\r\n                }\r\n            }\r\n            if (this.state === TokenParserState.KEY) {\r\n                if (token === STRING) {\r\n                    this.key = value;\r\n                    this.state = TokenParserState.COLON;\r\n                    return;\r\n                }\r\n                if (token === RIGHT_BRACE &&\r\n                    Object.keys(this.value).length === 0) {\r\n                    this.pop();\r\n                    return;\r\n                }\r\n            }\r\n            if (this.state === TokenParserState.COLON) {\r\n                if (token === COLON) {\r\n                    this.state = TokenParserState.VALUE;\r\n                    return;\r\n                }\r\n            }\r\n            if (this.state === TokenParserState.COMMA) {\r\n                if (token === COMMA) {\r\n                    if (this.mode === TokenParserMode.ARRAY) {\r\n                        this.state = TokenParserState.VALUE;\r\n                        this.key += 1;\r\n                        return;\r\n                    }\r\n                    /* istanbul ignore else */\r\n                    if (this.mode === TokenParserMode.OBJECT) {\r\n                        this.state = TokenParserState.KEY;\r\n                        return;\r\n                    }\r\n                }\r\n                if ((token === RIGHT_BRACE && this.mode === TokenParserMode.OBJECT) ||\r\n                    (token === RIGHT_BRACKET && this.mode === TokenParserMode.ARRAY)) {\r\n                    this.pop();\r\n                    return;\r\n                }\r\n            }\r\n            if (this.state === TokenParserState.SEPARATOR) {\r\n                if (token === SEPARATOR && value === this.separator) {\r\n                    this.state = TokenParserState.VALUE;\r\n                    return;\r\n                }\r\n            }\r\n            this.error(new TokenParserError(\"Unexpected \".concat(exports.TokenType[token], \" (\").concat(JSON.stringify(value), \") in state \").concat(TokenParserState[this.state])));\r\n        };\r\n        TokenParser.prototype.error = function (err) {\r\n            if (this.state !== TokenParserState.ENDED) {\r\n                this.state = TokenParserState.ERROR;\r\n            }\r\n            this.onError(err);\r\n        };\r\n        TokenParser.prototype.end = function () {\r\n            if ((this.state !== TokenParserState.VALUE &&\r\n                this.state !== TokenParserState.SEPARATOR) ||\r\n                this.stack.length > 0) {\r\n                this.error(new Error(\"Parser ended in mid-parsing (state: \".concat(TokenParserState[this.state], \"). Either not all the data was received or the data was invalid.\")));\r\n            }\r\n            else {\r\n                this.state = TokenParserState.ENDED;\r\n                this.onEnd();\r\n            }\r\n        };\r\n        TokenParser.prototype.onValue = function (\r\n        /* eslint-disable @typescript-eslint/no-unused-vars */\r\n        value, key, parent, stack\r\n        /* eslint-enable @typescript-eslint/no-unused-vars */\r\n        ) {\r\n            // Override me\r\n            throw new TokenParserError('Can\\'t emit data before the \"onValue\" callback has been set up.');\r\n        };\r\n        TokenParser.prototype.onError = function (err) {\r\n            // Override me\r\n            throw err;\r\n        };\r\n        TokenParser.prototype.onEnd = function () {\r\n            // Override me\r\n        };\r\n        return TokenParser;\r\n    }());\n\n    var JSONParser = /** @class */ (function () {\r\n        function JSONParser(opts) {\r\n            var _this = this;\r\n            if (opts === void 0) { opts = {}; }\r\n            this.tokenizer = new Tokenizer(opts);\r\n            this.tokenParser = new TokenParser(opts);\r\n            this.tokenizer.onToken = this.tokenParser.write.bind(this.tokenParser);\r\n            this.tokenizer.onEnd = function () {\r\n                if (!_this.tokenParser.isEnded)\r\n                    _this.tokenParser.end();\r\n            };\r\n            this.tokenParser.onError = this.tokenizer.error.bind(this.tokenizer);\r\n            this.tokenParser.onEnd = function () {\r\n                if (!_this.tokenizer.isEnded)\r\n                    _this.tokenizer.end();\r\n            };\r\n        }\r\n        Object.defineProperty(JSONParser.prototype, \"isEnded\", {\r\n            get: function () {\r\n                return this.tokenizer.isEnded && this.tokenParser.isEnded;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        JSONParser.prototype.write = function (input) {\r\n            this.tokenizer.write(input);\r\n        };\r\n        JSONParser.prototype.end = function () {\r\n            this.tokenizer.end();\r\n        };\r\n        Object.defineProperty(JSONParser.prototype, \"onToken\", {\r\n            set: function (cb) {\r\n                this.tokenizer.onToken = cb;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(JSONParser.prototype, \"onValue\", {\r\n            set: function (cb) {\r\n                this.tokenParser.onValue = cb;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(JSONParser.prototype, \"onError\", {\r\n            set: function (cb) {\r\n                this.tokenizer.onError = cb;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(JSONParser.prototype, \"onEnd\", {\r\n            set: function (cb) {\r\n                var _this = this;\r\n                this.tokenParser.onEnd = function () {\r\n                    if (!_this.tokenizer.isEnded)\r\n                        _this.tokenizer.end();\r\n                    cb.call(_this.tokenParser);\r\n                };\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        return JSONParser;\r\n    }());\n\n    exports.JSONParser = JSONParser;\n    exports.TokenParser = TokenParser;\n    exports.Tokenizer = Tokenizer;\n    exports.utf8 = utf8;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"],"mappings":"AAAA,CAAC,UAAUA,MAAM,EAAEC,OAAO,EAAE;EACxB,OAAOC,OAAO,KAAK,QAAQ,IAAI,OAAOC,MAAM,KAAK,WAAW,GAAGF,OAAO,CAACC,OAAO,CAAC,GAC/E,OAAOE,MAAM,KAAK,UAAU,IAAIA,MAAM,CAACC,GAAG,GAAGD,MAAM,CAAC,CAAC,SAAS,CAAC,EAAEH,OAAO,CAAC,IACxED,MAAM,GAAG,OAAOM,UAAU,KAAK,WAAW,GAAGA,UAAU,GAAGN,MAAM,IAAIO,IAAI,EAAEN,OAAO,CAACD,MAAM,CAACQ,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;AAC9G,CAAC,EAAE,IAAI,EAAG,UAAUN,OAAO,EAAE;EAAE,YAAY;;EAEvC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAGI;EAEA,IAAIO,aAAa,GAAG,SAAAA,CAASC,CAAC,EAAEC,CAAC,EAAE;IAC/BF,aAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;MAAEC,SAAS,EAAE;IAAG,CAAC,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;MAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;IAAE,CAAE,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;MAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC,EAAE,IAAIC,MAAM,CAACK,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IAAE,CAAC;IACrG,OAAOP,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B,CAAC;EAED,SAASS,SAASA,CAACV,CAAC,EAAEC,CAAC,EAAE;IACrB,IAAI,OAAOA,CAAC,KAAK,UAAU,IAAIA,CAAC,KAAK,IAAI,EACrC,MAAM,IAAIU,SAAS,CAAC,sBAAsB,GAAGC,MAAM,CAACX,CAAC,CAAC,GAAG,+BAA+B,CAAC;IAC7FF,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;IACnB,SAASY,EAAEA,CAAA,EAAG;MAAE,IAAI,CAACC,WAAW,GAAGd,CAAC;IAAE;IACtCA,CAAC,CAACO,SAAS,GAAGN,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACa,MAAM,CAACd,CAAC,CAAC,IAAIY,EAAE,CAACN,SAAS,GAAGN,CAAC,CAACM,SAAS,EAAE,IAAIM,EAAE,CAAC,CAAC,CAAC;EACxF;EAEA,IAAIG,QAAQ,GAAG,SAAAA,CAAA,EAAW;IACtBA,QAAQ,GAAGd,MAAM,CAACe,MAAM,IAAI,SAASD,QAAQA,CAACE,CAAC,EAAE;MAC7C,KAAK,IAAIC,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;QACjDD,CAAC,GAAGG,SAAS,CAACF,CAAC,CAAC;QAChB,KAAK,IAAId,CAAC,IAAIa,CAAC,EAAE,IAAIjB,MAAM,CAACK,SAAS,CAACC,cAAc,CAACC,IAAI,CAACU,CAAC,EAAEb,CAAC,CAAC,EAAEY,CAAC,CAACZ,CAAC,CAAC,GAAGa,CAAC,CAACb,CAAC,CAAC;MAChF;MACA,OAAOY,CAAC;IACZ,CAAC;IACD,OAAOF,QAAQ,CAACQ,KAAK,CAAC,IAAI,EAAEF,SAAS,CAAC;EAC1C,CAAC;EAED,IAAIG,EAAE;EACN,IAAIC,OAAO;EACX,CAAC,UAAUA,OAAO,EAAE;IAChBA,OAAO,CAACA,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW;IAC/CA,OAAO,CAACA,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,WAAW;IAChDA,OAAO,CAACA,OAAO,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,SAAS;IAC5CA,OAAO,CAACA,OAAO,CAAC,iBAAiB,CAAC,GAAG,EAAE,CAAC,GAAG,iBAAiB;IAC5DA,OAAO,CAACA,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;IACnCA,OAAO,CAACA,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO;IACxCA,OAAO,CAACA,OAAO,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,GAAG,kBAAkB;IAC9DA,OAAO,CAACA,OAAO,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,GAAG,gBAAgB;IAC1DA,OAAO,CAACA,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,GAAG,aAAa;IACpDA,OAAO,CAACA,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,GAAG,aAAa;IACpDA,OAAO,CAACA,OAAO,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,GAAG,cAAc;IACtDA,OAAO,CAACA,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,WAAW;IAChDA,OAAO,CAACA,OAAO,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,GAAG,YAAY;IAClDA,OAAO,CAACA,OAAO,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,GAAG,kBAAkB;IAC9DA,OAAO,CAACA,OAAO,CAAC,mBAAmB,CAAC,GAAG,EAAE,CAAC,GAAG,mBAAmB;IAChEA,OAAO,CAACA,OAAO,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,GAAG,UAAU;IAC9CA,OAAO,CAACA,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,WAAW;IAChDA,OAAO,CAACA,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO;IACxCA,OAAO,CAACA,OAAO,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,GAAG,cAAc;IACtDA,OAAO,CAACA,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,WAAW;IAChDA,OAAO,CAACA,OAAO,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,SAAS;IAC5CA,OAAO,CAACA,OAAO,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,GAAG,YAAY;IAClDA,OAAO,CAACA,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,WAAW;IAChDA,OAAO,CAACA,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,WAAW;IAChDA,OAAO,CAACA,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,GAAG,aAAa;IACpDA,OAAO,CAACA,OAAO,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,GAAG,YAAY;IAClDA,OAAO,CAACA,OAAO,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,GAAG,YAAY;IAClDA,OAAO,CAACA,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,WAAW;IAChDA,OAAO,CAACA,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,GAAG,aAAa;IACpDA,OAAO,CAACA,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,GAAG,aAAa;IACpDA,OAAO,CAACA,OAAO,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,GAAG,YAAY;IAClDA,OAAO,CAACA,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO;IACxCA,OAAO,CAACA,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,WAAW;IAChDA,OAAO,CAACA,OAAO,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,GAAG,gBAAgB;IAC1DA,OAAO,CAACA,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,GAAG,aAAa;IACpDA,OAAO,CAACA,OAAO,CAAC,mBAAmB,CAAC,GAAG,EAAE,CAAC,GAAG,mBAAmB;IAChEA,OAAO,CAACA,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,GAAG,eAAe;IACxDA,OAAO,CAACA,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,GAAG,eAAe;IACxDA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAAO,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,GAAG,wBAAwB;IAC1EA,OAAO,CAACA,OAA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}