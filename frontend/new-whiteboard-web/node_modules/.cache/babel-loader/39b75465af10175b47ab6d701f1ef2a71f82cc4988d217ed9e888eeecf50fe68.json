{"ast":null,"code":"var _jsxFileName = \"/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/pages/WhiteboardLabelingPage.js\",\n  _s = $RefreshSig$();\n// // src/pages/WhiteboardLabelingPage.js\n// import React, { useState, useRef, useEffect } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import {\n//   Container,\n//   Typography,\n//   IconButton,\n//   TextField,\n//   Paper,\n//   Button,\n// } from \"@mui/material\";\n// import { ArrowBack } from \"@mui/icons-material\";\n// import { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\n// import useImage from \"use-image\";\n\n// const whiteboards = [\n//   {\n//     id: \"wb_456\",\n//     imageUrl: \"https://via.placeholder.com/1200x800\",\n//     annotated: true,\n//   },\n//   {\n//     id: \"wb_457\",\n//     imageUrl: \"https://via.placeholder.com/1200x800\",\n//     annotated: false,\n//   },\n//   {\n//     id: \"wb_458\",\n//     imageUrl: \"https://via.placeholder.com/1200x800\",\n//     annotated: false,\n//   },\n// ];\n\n// const confidenceColors = [\n//   \"rgba(0, 255, 0, 0.5)\", // High Confidence (Green)\n//   \"rgba(255, 165, 0, 0.5)\", // Medium Confidence (Orange)\n//   \"rgba(255, 0, 0, 0.5)\", // Low Confidence (Red)\n// ];\n\n// function WhiteboardLabelingPage() {\n//   const { id } = useParams();\n//   const navigate = useNavigate();\n//   const whiteboard = whiteboards.find((wb) => wb.id === id);\n//   const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n\n//   const [annotations, setAnnotations] = useState([]);\n//   const [newAnnotation, setNewAnnotation] = useState(null);\n//   const [activeAnnotation, setActiveAnnotation] = useState(null);\n//   const [transcription, setTranscription] = useState(\"\");\n//   const [panelWidth, setPanelWidth] = useState(70);\n\n//   const transcriptionRef = useRef(null); // Reference for focusing the input\n\n//   useEffect(() => {\n//     if (activeAnnotation !== null && transcriptionRef.current) {\n//       transcriptionRef.current.focus(); // Focus the input when a new annotation is active\n//     }\n//   }, [activeAnnotation]); // Run when activeAnnotation changes\n\n//   const handleMouseDown = (e) => {\n//     const { x, y } = e.target.getStage().getPointerPosition();\n//     setNewAnnotation({\n//       x,\n//       y,\n//       width: 0,\n//       height: 0,\n//       confidenceLevel: 0,\n//       transcription: \"\",\n//     });\n//   };\n\n//   const handleMouseMove = (e) => {\n//     if (!newAnnotation) return;\n//     const stage = e.target.getStage();\n//     const pointerPosition = stage.getPointerPosition();\n//     setNewAnnotation({\n//       ...newAnnotation,\n//       width: pointerPosition.x - newAnnotation.x,\n//       height: pointerPosition.y - newAnnotation.y,\n//     });\n//   };\n\n//   const handleMouseUp = () => {\n//     if (newAnnotation) {\n//       // Add the new annotation to the list\n//       setAnnotations((prevAnnotations) => {\n//         const updatedAnnotations = [...prevAnnotations, newAnnotation];\n//         return updatedAnnotations;\n//       });\n\n//       // Set the new annotation as active and open the transcription editor\n//       setActiveAnnotation(annotations.length); // Use the new annotation as active\n//       setTranscription(newAnnotation.transcription); // Load its transcription\n//       setNewAnnotation(null); // Reset the drawing state\n//     }\n//   };\n\n//   const handleAnnotationClick = (index) => {\n//     // Cycle the confidence level color (0 -> 1 -> 2 -> 0)\n//     const updatedAnnotations = [...annotations];\n//     const currentAnnotation = updatedAnnotations[index];\n\n//     // Increment the confidence level (cycling through 0, 1, 2)\n//     const nextConfidenceLevel =\n//       (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n\n//     // Update the annotation's confidence level\n//     updatedAnnotations[index] = {\n//       ...currentAnnotation,\n//       confidenceLevel: nextConfidenceLevel,\n//     };\n//     setAnnotations(updatedAnnotations);\n\n//     // Set active annotation to open the transcription editor\n//     setActiveAnnotation(index);\n//     setTranscription(updatedAnnotations[index].transcription);\n//   };\n\n//   const handleTranscriptionChange = (event) => {\n//     const updatedTranscription = event.target.value;\n//     setTranscription(updatedTranscription);\n\n//     // Auto-save the transcription when it changes\n//     setAnnotations((prevAnnotations) =>\n//       prevAnnotations.map((annotation, i) =>\n//         i === activeAnnotation\n//           ? { ...annotation, transcription: updatedTranscription }\n//           : annotation\n//       )\n//     );\n//   };\n\n//   const handleResize = (e) => {\n//     const newWidth = (e.clientX / window.innerWidth) * 100;\n//     setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n//   };\n\n//   // Handlers for navigating whiteboards\n//   const handleNext = () => {\n//     const currentIndex = whiteboards.findIndex((wb) => wb.id === id);\n//     const nextIndex = (currentIndex + 1) % whiteboards.length;\n//     navigate(`/label/${whiteboards[nextIndex].id}`);\n//   };\n\n//   const handlePrevious = () => {\n//     const currentIndex = whiteboards.findIndex((wb) => wb.id === id);\n//     const prevIndex =\n//       (currentIndex - 1 + whiteboards.length) % whiteboards.length;\n//     navigate(`/label/${whiteboards[prevIndex].id}`);\n//   };\n\n//   return (\n//     <Container\n//       maxWidth={false}\n//       style={{ height: \"100vh\", display: \"flex\", padding: 0 }}\n//     >\n//       {/* Whiteboard Section */}\n//       <div\n//         style={{\n//           width: `${panelWidth}%`,\n//           overflowY: \"auto\",\n//           position: \"relative\",\n//         }}\n//       >\n//         <IconButton\n//           onClick={() => navigate(\"/whiteboards\")}\n//           style={{\n//             position: \"absolute\",\n//             top: \"20px\",\n//             left: \"20px\",\n//             zIndex: 1000,\n//           }}\n//         >\n//           <ArrowBack fontSize=\"large\" />\n//         </IconButton>\n//         <Typography\n//           variant=\"h6\"\n//           style={{\n//             position: \"absolute\",\n//             top: \"20px\",\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             zIndex: 1000,\n//             opacity: 0.8,\n//             backgroundColor: \"white\",\n//             padding: \"5px 15px\",\n//             borderRadius: \"4px\",\n//           }}\n//         >\n//           Whiteboard ID: {id}\n//         </Typography>\n//         {whiteboard ? (\n//           <Stage\n//             width={1200}\n//             height={800}\n//             onMouseDown={handleMouseDown}\n//             onMouseMove={handleMouseMove}\n//             onMouseUp={handleMouseUp}\n//             style={{ margin: \"0 auto\" }}\n//           >\n//             <Layer>\n//               <KonvaImage image={image} width={1200} height={800} />\n//               {annotations.map((rect, i) => (\n//                 <Rect\n//                   key={i}\n//                   x={rect.x}\n//                   y={rect.y}\n//                   width={rect.width}\n//                   height={rect.height}\n//                   fill={confidenceColors[rect.confidenceLevel]} // Set color based on confidence level\n//                   onClick={() => handleAnnotationClick(i)}\n//                 />\n//               ))}\n//               {newAnnotation && (\n//                 <Rect\n//                   x={newAnnotation.x}\n//                   y={newAnnotation.y}\n//                   width={newAnnotation.width}\n//                   height={newAnnotation.height}\n//                   fill=\"rgba(0,0,255,0.5)\"\n//                 />\n//               )}\n//             </Layer>\n//           </Stage>\n//         ) : (\n//           <Typography color=\"error\">Whiteboard not found</Typography>\n//         )}\n\n//         {/* Previous and Next Buttons */}\n//         <Button\n//           variant=\"contained\"\n//           color=\"secondary\"\n//           onClick={handlePrevious}\n//           style={{\n//             position: \"fixed\",\n//             bottom: \"20px\",\n//             left: \"20px\",\n//             opacity: 0.7,\n//           }}\n//         >\n//           Previous Whiteboard\n//         </Button>\n//         <Button\n//           variant=\"contained\"\n//           color=\"secondary\"\n//           onClick={handleNext}\n//           style={{\n//             position: \"fixed\",\n//             bottom: \"20px\",\n//             right: \"20px\",\n//             opacity: 0.7,\n//           }}\n//         >\n//           Next Whiteboard\n//         </Button>\n//       </div>\n\n//       {/* Divider for Resizing */}\n//       <div\n//         onMouseDown={(e) => {\n//           document.addEventListener(\"mousemove\", handleResize);\n//           document.addEventListener(\"mouseup\", () => {\n//             document.removeEventListener(\"mousemove\", handleResize);\n//           });\n//         }}\n//         style={{\n//           width: \"5px\",\n//           cursor: \"col-resize\",\n//           backgroundColor: \"#ccc\",\n//         }}\n//       />\n\n//       {/* Transcription Panel */}\n//       {activeAnnotation !== null && (\n//         <Paper\n//           style={{\n//             width: `${100 - panelWidth}%`,\n//             padding: \"20px\",\n//             display: \"flex\",\n//             flexDirection: \"column\",\n//             alignItems: \"flex-start\",\n//             boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n//             overflowY: \"auto\",\n//           }}\n//           square\n//         >\n//           <Typography variant=\"h6\" gutterBottom>\n//             Edit Transcription\n//           </Typography>\n//           <TextField\n//             fullWidth\n//             label=\"Transcription\"\n//             value={annotations[activeAnnotation]?.transcription || \"\"}\n//             onChange={handleTranscriptionChange}\n//             multiline\n//             rows={4}\n//             variant=\"outlined\"\n//             inputRef={transcriptionRef} // Automatically focuses when active annotation changes\n//             autoFocus // Automatically focuses the TextField\n//           />\n//         </Paper>\n//       )}\n//     </Container>\n//   );\n// }\n\n// export default WhiteboardLabelingPage;\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Container, Typography, IconButton, TextField, Paper, Button } from \"@mui/material\";\nimport { ArrowBack } from \"@mui/icons-material\";\nimport { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\nimport useImage from \"use-image\";\nimport axios from \"axios\";\nimport { useWhiteboard } from \"../context/WhiteboardContext\"; // Import context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst confidenceColors = [\"rgba(0, 255, 0, 0.5)\",\n// High Confidence (Green)\n\"rgba(255, 165, 0, 0.5)\",\n// Medium Confidence (Orange)\n\"rgba(255, 0, 0, 0.5)\" // Low Confidence (Red)\n];\nfunction WhiteboardLabelingPage() {\n  _s();\n  var _annotations$activeAn2;\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const {\n    whiteboards\n  } = useWhiteboard(); // Access whiteboards from context\n  const whiteboard = whiteboards.find(wb => wb.id === id); // Find the current whiteboard by ID\n  const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n  const [annotations, setAnnotations] = useState([]);\n  const [newAnnotation, setNewAnnotation] = useState(null);\n  const [activeAnnotation, setActiveAnnotation] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n  const [panelWidth, setPanelWidth] = useState(70);\n  const transcriptionRef = useRef(null);\n  useEffect(() => {\n    if (activeAnnotation !== null && transcriptionRef.current) {\n      transcriptionRef.current.focus();\n    }\n  }, [activeAnnotation]);\n\n  // Fetch existing annotations when the component mounts\n  useEffect(() => {\n    async function fetchAnnotations() {\n      try {\n        const response = await axios.get(`/whiteboards/${id}/annotations`);\n        setAnnotations(response.data);\n      } catch (error) {\n        console.error(\"Error fetching annotations:\", error);\n      }\n    }\n    if (whiteboard) fetchAnnotations();\n  }, [id, whiteboard]);\n  const handleMouseDown = e => {\n    const {\n      x,\n      y\n    } = e.target.getStage().getPointerPosition();\n    setNewAnnotation({\n      x,\n      y,\n      width: 0,\n      height: 0,\n      confidenceLevel: 0,\n      transcription: \"\"\n    });\n  };\n  const handleMouseMove = e => {\n    if (!newAnnotation) return;\n    const stage = e.target.getStage();\n    const pointerPosition = stage.getPointerPosition();\n    setNewAnnotation({\n      ...newAnnotation,\n      width: pointerPosition.x - newAnnotation.x,\n      height: pointerPosition.y - newAnnotation.y\n    });\n  };\n  const handleMouseUp = async () => {\n    if (newAnnotation) {\n      try {\n        // Send the new annotation to the backend\n        const response = await axios.post(`/whiteboards/${id}/annotations`, newAnnotation);\n\n        // After saving the annotation, update the state\n        setAnnotations(prevAnnotations => [...prevAnnotations, response.data]);\n        setNewAnnotation(null); // Reset drawing state\n      } catch (error) {\n        console.error(\"Error saving annotation:\", error);\n      }\n    }\n  };\n  const handleAnnotationClick = index => {\n    const updatedAnnotations = [...annotations];\n    const currentAnnotation = updatedAnnotations[index];\n    const nextConfidenceLevel = (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n    updatedAnnotations[index] = {\n      ...currentAnnotation,\n      confidenceLevel: nextConfidenceLevel\n    };\n    setAnnotations(updatedAnnotations);\n    setActiveAnnotation(index);\n    setTranscription(updatedAnnotations[index].transcription);\n\n    // Update confidence level in the backend\n    axios.patch(`/annotations/${currentAnnotation._id}`, {\n      confidenceLevel: nextConfidenceLevel\n    });\n  };\n  const handleTranscriptionChange = event => {\n    var _annotations$activeAn;\n    const updatedTranscription = event.target.value;\n    setTranscription(updatedTranscription);\n    setAnnotations(prevAnnotations => prevAnnotations.map((annotation, i) => i === activeAnnotation ? {\n      ...annotation,\n      transcription: updatedTranscription\n    } : annotation));\n\n    // Update transcription in the backend\n    const annotationId = (_annotations$activeAn = annotations[activeAnnotation]) === null || _annotations$activeAn === void 0 ? void 0 : _annotations$activeAn._id;\n    if (annotationId) {\n      axios.patch(`/annotations/${annotationId}`, {\n        transcription: updatedTranscription\n      });\n    }\n  };\n  const handleResize = e => {\n    const newWidth = e.clientX / window.innerWidth * 100;\n    setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n  };\n  const handleNext = () => {\n    const nextId = parseInt(id) + 1;\n    navigate(`/label/${nextId}`);\n  };\n  const handlePrevious = () => {\n    const prevId = parseInt(id) - 1;\n    navigate(`/label/${prevId}`);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: false,\n    style: {\n      height: \"100vh\",\n      display: \"flex\",\n      padding: 0\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: `${panelWidth}%`,\n        overflowY: \"auto\",\n        position: \"relative\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: () => navigate(\"/whiteboards\"),\n        style: {\n          position: \"absolute\",\n          top: \"20px\",\n          left: \"20px\",\n          zIndex: 1000\n        },\n        children: /*#__PURE__*/_jsxDEV(ArrowBack, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        style: {\n          position: \"absolute\",\n          top: \"20px\",\n          left: \"50%\",\n          transform: \"translateX(-50%)\",\n          zIndex: 1000,\n          opacity: 0.8,\n          backgroundColor: \"white\",\n          padding: \"5px 15px\",\n          borderRadius: \"4px\"\n        },\n        children: [\"Whiteboard ID: \", id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stage, {\n        width: 1200,\n        height: 800,\n        onMouseDown: handleMouseDown,\n        onMouseMove: handleMouseMove,\n        onMouseUp: handleMouseUp,\n        style: {\n          margin: \"0 auto\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Layer, {\n          children: [/*#__PURE__*/_jsxDEV(KonvaImage, {\n            image: image,\n            width: 1200,\n            height: 800\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 13\n          }, this), annotations.map((rect, i) => /*#__PURE__*/_jsxDEV(Rect, {\n            x: rect.x,\n            y: rect.y,\n            width: rect.width,\n            height: rect.height,\n            fill: confidenceColors[rect.confidenceLevel],\n            onClick: () => handleAnnotationClick(i)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 15\n          }, this)), newAnnotation && /*#__PURE__*/_jsxDEV(Rect, {\n            x: newAnnotation.x,\n            y: newAnnotation.y,\n            width: newAnnotation.width,\n            height: newAnnotation.height,\n            fill: \"rgba(0,0,255,0.5)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: handlePrevious,\n        style: {\n          position: \"fixed\",\n          bottom: \"20px\",\n          left: \"20px\",\n          opacity: 0.7\n        },\n        children: \"Previous Whiteboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: handleNext,\n        style: {\n          position: \"fixed\",\n          bottom: \"20px\",\n          right: \"20px\",\n          opacity: 0.7\n        },\n        children: \"Next Whiteboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onMouseDown: e => {\n        document.addEventListener(\"mousemove\", handleResize);\n        document.addEventListener(\"mouseup\", () => {\n          document.removeEventListener(\"mousemove\", handleResize);\n        });\n      },\n      style: {\n        width: \"5px\",\n        cursor: \"col-resize\",\n        backgroundColor: \"#ccc\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 7\n    }, this), activeAnnotation !== null && /*#__PURE__*/_jsxDEV(Paper, {\n      style: {\n        width: `${100 - panelWidth}%`,\n        padding: \"20px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\",\n        boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n        overflowY: \"auto\"\n      },\n      square: true,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Edit Transcription\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"Transcription\",\n        value: ((_annotations$activeAn2 = annotations[activeAnnotation]) === null || _annotations$activeAn2 === void 0 ? void 0 : _annotations$activeAn2.transcription) || \"\",\n        onChange: handleTranscriptionChange,\n        multiline: true,\n        rows: 4,\n        variant: \"outlined\",\n        inputRef: transcriptionRef // Automatically focuses when active annotation changes\n        ,\n        autoFocus: true // Automatically focuses the TextField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 466,\n    columnNumber: 5\n  }, this);\n}\n_s(WhiteboardLabelingPage, \"GpZUkKtPUgRmI6w5o4+D/QR5yyg=\", false, function () {\n  return [useParams, useNavigate, useWhiteboard, useImage];\n});\n_c = WhiteboardLabelingPage;\nexport default WhiteboardLabelingPage;\nvar _c;\n$RefreshReg$(_c, \"WhiteboardLabelingPage\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useParams","useNavigate","Container","Typography","IconButton","TextField","Paper","Button","ArrowBack","Stage","Layer","Image","KonvaImage","Rect","useImage","axios","useWhiteboard","jsxDEV","_jsxDEV","confidenceColors","WhiteboardLabelingPage","_s","_annotations$activeAn2","id","navigate","whiteboards","whiteboard","find","wb","image","imageUrl","annotations","setAnnotations","newAnnotation","setNewAnnotation","activeAnnotation","setActiveAnnotation","transcription","setTranscription","panelWidth","setPanelWidth","transcriptionRef","current","focus","fetchAnnotations","response","get","data","error","console","handleMouseDown","e","x","y","target","getStage","getPointerPosition","width","height","confidenceLevel","handleMouseMove","stage","pointerPosition","handleMouseUp","post","prevAnnotations","handleAnnotationClick","index","updatedAnnotations","currentAnnotation","nextConfidenceLevel","length","patch","_id","handleTranscriptionChange","event","_annotations$activeAn","updatedTranscription","value","map","annotation","i","annotationId","handleResize","newWidth","clientX","window","innerWidth","Math","max","min","handleNext","nextId","parseInt","handlePrevious","prevId","maxWidth","style","display","padding","children","overflowY","position","onClick","top","left","zIndex","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","variant","transform","opacity","backgroundColor","borderRadius","onMouseDown","onMouseMove","onMouseUp","margin","rect","fill","color","bottom","right","document","addEventListener","removeEventListener","cursor","flexDirection","alignItems","boxShadow","square","gutterBottom","fullWidth","label","onChange","multiline","rows","inputRef","autoFocus","_c","$RefreshReg$"],"sources":["/Users/prakashkoukuntla/Goblins-Whiteboard-App/frontend/new-whiteboard-web/src/pages/WhiteboardLabelingPage.js"],"sourcesContent":["// // src/pages/WhiteboardLabelingPage.js\n// import React, { useState, useRef, useEffect } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import {\n//   Container,\n//   Typography,\n//   IconButton,\n//   TextField,\n//   Paper,\n//   Button,\n// } from \"@mui/material\";\n// import { ArrowBack } from \"@mui/icons-material\";\n// import { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\n// import useImage from \"use-image\";\n\n// const whiteboards = [\n//   {\n//     id: \"wb_456\",\n//     imageUrl: \"https://via.placeholder.com/1200x800\",\n//     annotated: true,\n//   },\n//   {\n//     id: \"wb_457\",\n//     imageUrl: \"https://via.placeholder.com/1200x800\",\n//     annotated: false,\n//   },\n//   {\n//     id: \"wb_458\",\n//     imageUrl: \"https://via.placeholder.com/1200x800\",\n//     annotated: false,\n//   },\n// ];\n\n// const confidenceColors = [\n//   \"rgba(0, 255, 0, 0.5)\", // High Confidence (Green)\n//   \"rgba(255, 165, 0, 0.5)\", // Medium Confidence (Orange)\n//   \"rgba(255, 0, 0, 0.5)\", // Low Confidence (Red)\n// ];\n\n// function WhiteboardLabelingPage() {\n//   const { id } = useParams();\n//   const navigate = useNavigate();\n//   const whiteboard = whiteboards.find((wb) => wb.id === id);\n//   const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n\n//   const [annotations, setAnnotations] = useState([]);\n//   const [newAnnotation, setNewAnnotation] = useState(null);\n//   const [activeAnnotation, setActiveAnnotation] = useState(null);\n//   const [transcription, setTranscription] = useState(\"\");\n//   const [panelWidth, setPanelWidth] = useState(70);\n\n//   const transcriptionRef = useRef(null); // Reference for focusing the input\n\n//   useEffect(() => {\n//     if (activeAnnotation !== null && transcriptionRef.current) {\n//       transcriptionRef.current.focus(); // Focus the input when a new annotation is active\n//     }\n//   }, [activeAnnotation]); // Run when activeAnnotation changes\n\n//   const handleMouseDown = (e) => {\n//     const { x, y } = e.target.getStage().getPointerPosition();\n//     setNewAnnotation({\n//       x,\n//       y,\n//       width: 0,\n//       height: 0,\n//       confidenceLevel: 0,\n//       transcription: \"\",\n//     });\n//   };\n\n//   const handleMouseMove = (e) => {\n//     if (!newAnnotation) return;\n//     const stage = e.target.getStage();\n//     const pointerPosition = stage.getPointerPosition();\n//     setNewAnnotation({\n//       ...newAnnotation,\n//       width: pointerPosition.x - newAnnotation.x,\n//       height: pointerPosition.y - newAnnotation.y,\n//     });\n//   };\n\n//   const handleMouseUp = () => {\n//     if (newAnnotation) {\n//       // Add the new annotation to the list\n//       setAnnotations((prevAnnotations) => {\n//         const updatedAnnotations = [...prevAnnotations, newAnnotation];\n//         return updatedAnnotations;\n//       });\n\n//       // Set the new annotation as active and open the transcription editor\n//       setActiveAnnotation(annotations.length); // Use the new annotation as active\n//       setTranscription(newAnnotation.transcription); // Load its transcription\n//       setNewAnnotation(null); // Reset the drawing state\n//     }\n//   };\n\n//   const handleAnnotationClick = (index) => {\n//     // Cycle the confidence level color (0 -> 1 -> 2 -> 0)\n//     const updatedAnnotations = [...annotations];\n//     const currentAnnotation = updatedAnnotations[index];\n\n//     // Increment the confidence level (cycling through 0, 1, 2)\n//     const nextConfidenceLevel =\n//       (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n\n//     // Update the annotation's confidence level\n//     updatedAnnotations[index] = {\n//       ...currentAnnotation,\n//       confidenceLevel: nextConfidenceLevel,\n//     };\n//     setAnnotations(updatedAnnotations);\n\n//     // Set active annotation to open the transcription editor\n//     setActiveAnnotation(index);\n//     setTranscription(updatedAnnotations[index].transcription);\n//   };\n\n//   const handleTranscriptionChange = (event) => {\n//     const updatedTranscription = event.target.value;\n//     setTranscription(updatedTranscription);\n\n//     // Auto-save the transcription when it changes\n//     setAnnotations((prevAnnotations) =>\n//       prevAnnotations.map((annotation, i) =>\n//         i === activeAnnotation\n//           ? { ...annotation, transcription: updatedTranscription }\n//           : annotation\n//       )\n//     );\n//   };\n\n//   const handleResize = (e) => {\n//     const newWidth = (e.clientX / window.innerWidth) * 100;\n//     setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n//   };\n\n//   // Handlers for navigating whiteboards\n//   const handleNext = () => {\n//     const currentIndex = whiteboards.findIndex((wb) => wb.id === id);\n//     const nextIndex = (currentIndex + 1) % whiteboards.length;\n//     navigate(`/label/${whiteboards[nextIndex].id}`);\n//   };\n\n//   const handlePrevious = () => {\n//     const currentIndex = whiteboards.findIndex((wb) => wb.id === id);\n//     const prevIndex =\n//       (currentIndex - 1 + whiteboards.length) % whiteboards.length;\n//     navigate(`/label/${whiteboards[prevIndex].id}`);\n//   };\n\n//   return (\n//     <Container\n//       maxWidth={false}\n//       style={{ height: \"100vh\", display: \"flex\", padding: 0 }}\n//     >\n//       {/* Whiteboard Section */}\n//       <div\n//         style={{\n//           width: `${panelWidth}%`,\n//           overflowY: \"auto\",\n//           position: \"relative\",\n//         }}\n//       >\n//         <IconButton\n//           onClick={() => navigate(\"/whiteboards\")}\n//           style={{\n//             position: \"absolute\",\n//             top: \"20px\",\n//             left: \"20px\",\n//             zIndex: 1000,\n//           }}\n//         >\n//           <ArrowBack fontSize=\"large\" />\n//         </IconButton>\n//         <Typography\n//           variant=\"h6\"\n//           style={{\n//             position: \"absolute\",\n//             top: \"20px\",\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             zIndex: 1000,\n//             opacity: 0.8,\n//             backgroundColor: \"white\",\n//             padding: \"5px 15px\",\n//             borderRadius: \"4px\",\n//           }}\n//         >\n//           Whiteboard ID: {id}\n//         </Typography>\n//         {whiteboard ? (\n//           <Stage\n//             width={1200}\n//             height={800}\n//             onMouseDown={handleMouseDown}\n//             onMouseMove={handleMouseMove}\n//             onMouseUp={handleMouseUp}\n//             style={{ margin: \"0 auto\" }}\n//           >\n//             <Layer>\n//               <KonvaImage image={image} width={1200} height={800} />\n//               {annotations.map((rect, i) => (\n//                 <Rect\n//                   key={i}\n//                   x={rect.x}\n//                   y={rect.y}\n//                   width={rect.width}\n//                   height={rect.height}\n//                   fill={confidenceColors[rect.confidenceLevel]} // Set color based on confidence level\n//                   onClick={() => handleAnnotationClick(i)}\n//                 />\n//               ))}\n//               {newAnnotation && (\n//                 <Rect\n//                   x={newAnnotation.x}\n//                   y={newAnnotation.y}\n//                   width={newAnnotation.width}\n//                   height={newAnnotation.height}\n//                   fill=\"rgba(0,0,255,0.5)\"\n//                 />\n//               )}\n//             </Layer>\n//           </Stage>\n//         ) : (\n//           <Typography color=\"error\">Whiteboard not found</Typography>\n//         )}\n\n//         {/* Previous and Next Buttons */}\n//         <Button\n//           variant=\"contained\"\n//           color=\"secondary\"\n//           onClick={handlePrevious}\n//           style={{\n//             position: \"fixed\",\n//             bottom: \"20px\",\n//             left: \"20px\",\n//             opacity: 0.7,\n//           }}\n//         >\n//           Previous Whiteboard\n//         </Button>\n//         <Button\n//           variant=\"contained\"\n//           color=\"secondary\"\n//           onClick={handleNext}\n//           style={{\n//             position: \"fixed\",\n//             bottom: \"20px\",\n//             right: \"20px\",\n//             opacity: 0.7,\n//           }}\n//         >\n//           Next Whiteboard\n//         </Button>\n//       </div>\n\n//       {/* Divider for Resizing */}\n//       <div\n//         onMouseDown={(e) => {\n//           document.addEventListener(\"mousemove\", handleResize);\n//           document.addEventListener(\"mouseup\", () => {\n//             document.removeEventListener(\"mousemove\", handleResize);\n//           });\n//         }}\n//         style={{\n//           width: \"5px\",\n//           cursor: \"col-resize\",\n//           backgroundColor: \"#ccc\",\n//         }}\n//       />\n\n//       {/* Transcription Panel */}\n//       {activeAnnotation !== null && (\n//         <Paper\n//           style={{\n//             width: `${100 - panelWidth}%`,\n//             padding: \"20px\",\n//             display: \"flex\",\n//             flexDirection: \"column\",\n//             alignItems: \"flex-start\",\n//             boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n//             overflowY: \"auto\",\n//           }}\n//           square\n//         >\n//           <Typography variant=\"h6\" gutterBottom>\n//             Edit Transcription\n//           </Typography>\n//           <TextField\n//             fullWidth\n//             label=\"Transcription\"\n//             value={annotations[activeAnnotation]?.transcription || \"\"}\n//             onChange={handleTranscriptionChange}\n//             multiline\n//             rows={4}\n//             variant=\"outlined\"\n//             inputRef={transcriptionRef} // Automatically focuses when active annotation changes\n//             autoFocus // Automatically focuses the TextField\n//           />\n//         </Paper>\n//       )}\n//     </Container>\n//   );\n// }\n\n// export default WhiteboardLabelingPage;\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport {\n  Container,\n  Typography,\n  IconButton,\n  TextField,\n  Paper,\n  Button,\n} from \"@mui/material\";\nimport { ArrowBack } from \"@mui/icons-material\";\nimport { Stage, Layer, Image as KonvaImage, Rect } from \"react-konva\";\nimport useImage from \"use-image\";\nimport axios from \"axios\";\nimport { useWhiteboard } from \"../context/WhiteboardContext\"; // Import context\n\nconst confidenceColors = [\n  \"rgba(0, 255, 0, 0.5)\", // High Confidence (Green)\n  \"rgba(255, 165, 0, 0.5)\", // Medium Confidence (Orange)\n  \"rgba(255, 0, 0, 0.5)\", // Low Confidence (Red)\n];\n\nfunction WhiteboardLabelingPage() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const { whiteboards } = useWhiteboard(); // Access whiteboards from context\n  const whiteboard = whiteboards.find((wb) => wb.id === id); // Find the current whiteboard by ID\n  const [image] = useImage(whiteboard ? whiteboard.imageUrl : \"\");\n\n  const [annotations, setAnnotations] = useState([]);\n  const [newAnnotation, setNewAnnotation] = useState(null);\n  const [activeAnnotation, setActiveAnnotation] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n  const [panelWidth, setPanelWidth] = useState(70);\n\n  const transcriptionRef = useRef(null);\n\n  useEffect(() => {\n    if (activeAnnotation !== null && transcriptionRef.current) {\n      transcriptionRef.current.focus();\n    }\n  }, [activeAnnotation]);\n\n  // Fetch existing annotations when the component mounts\n  useEffect(() => {\n    async function fetchAnnotations() {\n      try {\n        const response = await axios.get(`/whiteboards/${id}/annotations`);\n        setAnnotations(response.data);\n      } catch (error) {\n        console.error(\"Error fetching annotations:\", error);\n      }\n    }\n    if (whiteboard) fetchAnnotations();\n  }, [id, whiteboard]);\n\n  const handleMouseDown = (e) => {\n    const { x, y } = e.target.getStage().getPointerPosition();\n    setNewAnnotation({\n      x,\n      y,\n      width: 0,\n      height: 0,\n      confidenceLevel: 0,\n      transcription: \"\",\n    });\n  };\n\n  const handleMouseMove = (e) => {\n    if (!newAnnotation) return;\n    const stage = e.target.getStage();\n    const pointerPosition = stage.getPointerPosition();\n    setNewAnnotation({\n      ...newAnnotation,\n      width: pointerPosition.x - newAnnotation.x,\n      height: pointerPosition.y - newAnnotation.y,\n    });\n  };\n\n  const handleMouseUp = async () => {\n    if (newAnnotation) {\n      try {\n        // Send the new annotation to the backend\n        const response = await axios.post(\n          `/whiteboards/${id}/annotations`,\n          newAnnotation\n        );\n\n        // After saving the annotation, update the state\n        setAnnotations((prevAnnotations) => [\n          ...prevAnnotations,\n          response.data,\n        ]);\n        setNewAnnotation(null); // Reset drawing state\n      } catch (error) {\n        console.error(\"Error saving annotation:\", error);\n      }\n    }\n  };\n\n  const handleAnnotationClick = (index) => {\n    const updatedAnnotations = [...annotations];\n    const currentAnnotation = updatedAnnotations[index];\n    const nextConfidenceLevel =\n      (currentAnnotation.confidenceLevel + 1) % confidenceColors.length;\n\n    updatedAnnotations[index] = {\n      ...currentAnnotation,\n      confidenceLevel: nextConfidenceLevel,\n    };\n    setAnnotations(updatedAnnotations);\n    setActiveAnnotation(index);\n    setTranscription(updatedAnnotations[index].transcription);\n\n    // Update confidence level in the backend\n    axios.patch(`/annotations/${currentAnnotation._id}`, {\n      confidenceLevel: nextConfidenceLevel,\n    });\n  };\n\n  const handleTranscriptionChange = (event) => {\n    const updatedTranscription = event.target.value;\n    setTranscription(updatedTranscription);\n\n    setAnnotations((prevAnnotations) =>\n      prevAnnotations.map((annotation, i) =>\n        i === activeAnnotation\n          ? { ...annotation, transcription: updatedTranscription }\n          : annotation\n      )\n    );\n\n    // Update transcription in the backend\n    const annotationId = annotations[activeAnnotation]?._id;\n    if (annotationId) {\n      axios.patch(`/annotations/${annotationId}`, {\n        transcription: updatedTranscription,\n      });\n    }\n  };\n\n  const handleResize = (e) => {\n    const newWidth = (e.clientX / window.innerWidth) * 100;\n    setPanelWidth(Math.max(30, Math.min(newWidth, 85)));\n  };\n\n  const handleNext = () => {\n    const nextId = parseInt(id) + 1;\n    navigate(`/label/${nextId}`);\n  };\n\n  const handlePrevious = () => {\n    const prevId = parseInt(id) - 1;\n    navigate(`/label/${prevId}`);\n  };\n\n  return (\n    <Container\n      maxWidth={false}\n      style={{ height: \"100vh\", display: \"flex\", padding: 0 }}\n    >\n      <div\n        style={{\n          width: `${panelWidth}%`,\n          overflowY: \"auto\",\n          position: \"relative\",\n        }}\n      >\n        <IconButton\n          onClick={() => navigate(\"/whiteboards\")}\n          style={{\n            position: \"absolute\",\n            top: \"20px\",\n            left: \"20px\",\n            zIndex: 1000,\n          }}\n        >\n          <ArrowBack fontSize=\"large\" />\n        </IconButton>\n        <Typography\n          variant=\"h6\"\n          style={{\n            position: \"absolute\",\n            top: \"20px\",\n            left: \"50%\",\n            transform: \"translateX(-50%)\",\n            zIndex: 1000,\n            opacity: 0.8,\n            backgroundColor: \"white\",\n            padding: \"5px 15px\",\n            borderRadius: \"4px\",\n          }}\n        >\n          Whiteboard ID: {id}\n        </Typography>\n        <Stage\n          width={1200}\n          height={800}\n          onMouseDown={handleMouseDown}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          style={{ margin: \"0 auto\" }}\n        >\n          <Layer>\n            <KonvaImage image={image} width={1200} height={800} />\n            {annotations.map((rect, i) => (\n              <Rect\n                key={i}\n                x={rect.x}\n                y={rect.y}\n                width={rect.width}\n                height={rect.height}\n                fill={confidenceColors[rect.confidenceLevel]}\n                onClick={() => handleAnnotationClick(i)}\n              />\n            ))}\n            {newAnnotation && (\n              <Rect\n                x={newAnnotation.x}\n                y={newAnnotation.y}\n                width={newAnnotation.width}\n                height={newAnnotation.height}\n                fill=\"rgba(0,0,255,0.5)\"\n              />\n            )}\n          </Layer>\n        </Stage>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={handlePrevious}\n          style={{\n            position: \"fixed\",\n            bottom: \"20px\",\n            left: \"20px\",\n            opacity: 0.7,\n          }}\n        >\n          Previous Whiteboard\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={handleNext}\n          style={{\n            position: \"fixed\",\n            bottom: \"20px\",\n            right: \"20px\",\n            opacity: 0.7,\n          }}\n        >\n          Next Whiteboard\n        </Button>\n      </div>\n      <div\n        onMouseDown={(e) => {\n          document.addEventListener(\"mousemove\", handleResize);\n          document.addEventListener(\"mouseup\", () => {\n            document.removeEventListener(\"mousemove\", handleResize);\n          });\n        }}\n        style={{ width: \"5px\", cursor: \"col-resize\", backgroundColor: \"#ccc\" }}\n      />\n      {activeAnnotation !== null && (\n        <Paper\n          style={{\n            width: `${100 - panelWidth}%`,\n            padding: \"20px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            boxShadow: \"0px 4px 12px rgba(0,0,0,0.2)\",\n            overflowY: \"auto\",\n          }}\n          square\n        >\n          <Typography variant=\"h6\" gutterBottom>\n            Edit Transcription\n          </Typography>\n          <TextField\n            fullWidth\n            label=\"Transcription\"\n            value={annotations[activeAnnotation]?.transcription || \"\"}\n            onChange={handleTranscriptionChange}\n            multiline\n            rows={4}\n            variant=\"outlined\"\n            inputRef={transcriptionRef} // Automatically focuses when active annotation changes\n            autoFocus // Automatically focuses the TextField\n          />\n        </Paper>\n      )}\n    </Container>\n  );\n}\n\nexport default WhiteboardLabelingPage;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}